
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b020  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800b2b8  0800b2b8  0001b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800b310  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800b370  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  240000d0  0800b3d0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240010a0  0800b3d0  000210a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d34c  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f1  00000000  00000000  0004d44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00051640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  000536b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e146  00000000  00000000  000555b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029cd1  00000000  00000000  000936f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185d25  00000000  00000000  000bd3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002430ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f14  00000000  00000000  0024313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b2a0 	.word	0x0800b2a0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800b2a0 	.word	0x0800b2a0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fef6 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f82c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fd38 	bl	800105c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ec:	f000 f8b4 	bl	8000758 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005f0:	f000 f92c 	bl	800084c <MX_DFSDM1_Init>
  MX_ETH_Init();
 80005f4:	f000 f962 	bl	80008bc <MX_ETH_Init>
  MX_FMC_Init();
 80005f8:	f000 fc34 	bl	8000e64 <MX_FMC_Init>
  MX_I2C1_Init();
 80005fc:	f000 f9aa 	bl	8000954 <MX_I2C1_Init>
  MX_LTDC_Init();
 8000600:	f000 f9e8 	bl	80009d4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000604:	f000 fa98 	bl	8000b38 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000608:	f000 fabe 	bl	8000b88 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 800060c:	f000 fb7a 	bl	8000d04 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000610:	f000 fbc4 	bl	8000d9c <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000614:	f000 fbf4 	bl	8000e00 <MX_USB_OTG_HS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10); //toggle LD1
 8000618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <main+0x5c>)
 800061e:	f004 f836 	bl	800468e <HAL_GPIO_TogglePin>
	  HAL_Delay(100); //wait .1 seconds
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 ff66 	bl	80024f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4); //toggle LD3
 8000628:	2110      	movs	r1, #16
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <main+0x60>)
 800062c:	f004 f82f 	bl	800468e <HAL_GPIO_TogglePin>
	  HAL_Delay(100); //wait .1 seconds
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f001 ff5f 	bl	80024f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10); //toggle LD1
 8000636:	e7ef      	b.n	8000618 <main+0x3c>
 8000638:	58021400 	.word	0x58021400
 800063c:	58020000 	.word	0x58020000

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00a fe1e 	bl	800b290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a fe18 	bl	800b290 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f004 fe5b 	bl	800531c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <SystemClock_Config+0x10c>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	4a37      	ldr	r2, [pc, #220]	; (800074c <SystemClock_Config+0x10c>)
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <SystemClock_Config+0x10c>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b33      	ldr	r3, [pc, #204]	; (8000750 <SystemClock_Config+0x110>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a32      	ldr	r2, [pc, #200]	; (8000750 <SystemClock_Config+0x110>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <SystemClock_Config+0x110>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000698:	bf00      	nop
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <SystemClock_Config+0x110>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a6:	d1f8      	bne.n	800069a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <SystemClock_Config+0x114>)
 80006aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ac:	4a29      	ldr	r2, [pc, #164]	; (8000754 <SystemClock_Config+0x114>)
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006b4:	2322      	movs	r3, #34	; 0x22
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80006d0:	2309      	movs	r3, #9
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006e0:	230c      	movs	r3, #12
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80006e4:	2302      	movs	r3, #2
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80006e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 ff16 	bl	8005524 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 fe1d 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	233f      	movs	r3, #63	; 0x3f
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800071a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2101      	movs	r1, #1
 8000728:	4618      	mov	r0, r3
 800072a:	f005 fb55 	bl	8005dd8 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000734:	f000 fe02 	bl	800133c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000738:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800073c:	2100      	movs	r1, #0
 800073e:	2000      	movs	r0, #0
 8000740:	f005 fd00 	bl	8006144 <HAL_RCC_MCOConfig>
}
 8000744:	bf00      	nop
 8000746:	3770      	adds	r7, #112	; 0x70
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58000400 	.word	0x58000400
 8000750:	58024800 	.word	0x58024800
 8000754:	58024400 	.word	0x58024400

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_ADC1_Init+0xe4>)
 800077e:	4a30      	ldr	r2, [pc, #192]	; (8000840 <MX_ADC1_Init+0xe8>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_ADC1_Init+0xe4>)
 8000784:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_ADC1_Init+0xe4>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC1_Init+0xe4>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC1_Init+0xe4>)
 8000798:	2204      	movs	r2, #4
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC1_Init+0xe4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC1_Init+0xe4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC1_Init+0xe4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC1_Init+0xe4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC1_Init+0xe4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC1_Init+0xe4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC1_Init+0xe4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC1_Init+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC1_Init+0xe4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC1_Init+0xe4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_ADC1_Init+0xe4>)
 80007dc:	f002 f870 	bl	80028c0 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007e6:	f000 fda9 	bl	800133c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_ADC1_Init+0xe4>)
 80007f6:	f002 fe87 	bl	8003508 <HAL_ADCEx_MultiModeConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000800:	f000 fd9c 	bl	800133c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC1_Init+0xec>)
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000808:	2306      	movs	r3, #6
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_ADC1_Init+0xf0>)
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000814:	2304      	movs	r3, #4
 8000816:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC1_Init+0xe4>)
 8000826:	f002 f9ed 	bl	8002c04 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000830:	f000 fd84 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000124 	.word	0x24000124
 8000840:	40022000 	.word	0x40022000
 8000844:	04300002 	.word	0x04300002
 8000848:	47ff0000 	.word	0x47ff0000

0800084c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <MX_DFSDM1_Init+0x6c>)
 8000854:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000858:	2201      	movs	r2, #1
 800085a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000864:	2202      	movs	r2, #2
 8000866:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000882:	2204      	movs	r2, #4
 8000884:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800088e:	2201      	movs	r2, #1
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_DFSDM1_Init+0x68>)
 80008a0:	f002 fff4 	bl	800388c <HAL_DFSDM_ChannelInit>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008aa:	f000 fd47 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	24000188 	.word	0x24000188
 80008b8:	40017020 	.word	0x40017020

080008bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_ETH_Init+0x80>)
 80008c2:	4a1f      	ldr	r2, [pc, #124]	; (8000940 <MX_ETH_Init+0x84>)
 80008c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_ETH_Init+0x88>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_ETH_Init+0x88>)
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_ETH_Init+0x88>)
 80008d4:	22e1      	movs	r2, #225	; 0xe1
 80008d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ETH_Init+0x88>)
 80008da:	2200      	movs	r2, #0
 80008dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ETH_Init+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_ETH_Init+0x88>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_ETH_Init+0x80>)
 80008ec:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_ETH_Init+0x88>)
 80008ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_ETH_Init+0x80>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_ETH_Init+0x80>)
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_ETH_Init+0x8c>)
 80008fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_ETH_Init+0x80>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_ETH_Init+0x90>)
 8000900:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_ETH_Init+0x80>)
 8000904:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000908:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ETH_Init+0x80>)
 800090c:	f003 f8d2 	bl	8003ab4 <HAL_ETH_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000916:	f000 fd11 	bl	800133c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800091a:	2238      	movs	r2, #56	; 0x38
 800091c:	2100      	movs	r1, #0
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_ETH_Init+0x94>)
 8000920:	f00a fcb6 	bl	800b290 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_ETH_Init+0x94>)
 8000926:	2221      	movs	r2, #33	; 0x21
 8000928:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_ETH_Init+0x94>)
 800092c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000930:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_ETH_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	240001c0 	.word	0x240001c0
 8000940:	40028000 	.word	0x40028000
 8000944:	24001060 	.word	0x24001060
 8000948:	24000070 	.word	0x24000070
 800094c:	24000010 	.word	0x24000010
 8000950:	240000ec 	.word	0x240000ec

08000954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_I2C1_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_I2C1_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <MX_I2C1_Init+0x7c>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_I2C1_Init+0x74>)
 800096c:	2201      	movs	r2, #1
 800096e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000990:	f003 fe98 	bl	80046c4 <HAL_I2C_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099a:	f000 fccf 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_I2C1_Init+0x74>)
 80009a2:	f003 ff1f 	bl	80047e4 <HAL_I2CEx_ConfigAnalogFilter>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ac:	f000 fcc6 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_I2C1_Init+0x74>)
 80009b4:	f003 ff61 	bl	800487a <HAL_I2CEx_ConfigDigitalFilter>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 fcbd 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000270 	.word	0x24000270
 80009cc:	40005400 	.word	0x40005400
 80009d0:	109093dc 	.word	0x109093dc

080009d4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09a      	sub	sp, #104	; 0x68
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009de:	2234      	movs	r2, #52	; 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00a fc54 	bl	800b290 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2234      	movs	r2, #52	; 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00a fc4e 	bl	800b290 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009f4:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <MX_LTDC_Init+0x15c>)
 80009f6:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <MX_LTDC_Init+0x160>)
 80009f8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009fa:	4b4d      	ldr	r3, [pc, #308]	; (8000b30 <MX_LTDC_Init+0x15c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a06:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a0c:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000a12:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000a18:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a20:	220e      	movs	r2, #14
 8000a22:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a26:	2205      	movs	r2, #5
 8000a28:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a2c:	f240 228e 	movw	r2, #654	; 0x28e
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000a32:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a34:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a3c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000a42:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a44:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a62:	4833      	ldr	r0, [pc, #204]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000a64:	f003 ff56 	bl	8004914 <HAL_LTDC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 fc65 	bl	800133c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a94:	2305      	movs	r3, #5
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000ac0:	f003 fff8 	bl	8004ab4 <HAL_LTDC_ConfigLayer>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000aca:	f000 fc37 	bl	800133c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000af0:	2305      	movs	r3, #5
 8000af2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	2201      	movs	r2, #1
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_LTDC_Init+0x15c>)
 8000b1a:	f003 ffcb 	bl	8004ab4 <HAL_LTDC_ConfigLayer>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000b24:	f000 fc0a 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3768      	adds	r7, #104	; 0x68
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	240002c4 	.word	0x240002c4
 8000b34:	50001000 	.word	0x50001000

08000b38 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <MX_QUADSPI_Init+0x4c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_QUADSPI_Init+0x48>)
 8000b6e:	f004 fc1f 	bl	80053b0 <HAL_QSPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000b78:	f000 fbe0 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400036c 	.word	0x2400036c
 8000b84:	52005000 	.word	0x52005000

08000b88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b8c:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000b8e:	4a59      	ldr	r2, [pc, #356]	; (8000cf4 <MX_SAI1_Init+0x16c>)
 8000b90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b92:	4b57      	ldr	r3, [pc, #348]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b98:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b9e:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000baa:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bb0:	4b4f      	ldr	r3, [pc, #316]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb6:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bbc:	4b4c      	ldr	r3, [pc, #304]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bc8:	4b49      	ldr	r3, [pc, #292]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bca:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <MX_SAI1_Init+0x170>)
 8000bcc:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bce:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bd4:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bda:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000be0:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000bfe:	2208      	movs	r2, #8
 8000c00:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000c1a:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c20:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000c2c:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000c32:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <MX_SAI1_Init+0x168>)
 8000c34:	f008 f9c4 	bl	8008fc0 <HAL_SAI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000c3e:	f000 fb7d 	bl	800133c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c44:	4a2e      	ldr	r2, [pc, #184]	; (8000d00 <MX_SAI1_Init+0x178>)
 8000c46:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c56:	2240      	movs	r2, #64	; 0x40
 8000c58:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_SAI1_Init+0x174>)
 8000cde:	f008 f96f 	bl	8008fc0 <HAL_SAI_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000ce8:	f000 fb28 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	240003b8 	.word	0x240003b8
 8000cf4:	40015804 	.word	0x40015804
 8000cf8:	0002ee00 	.word	0x0002ee00
 8000cfc:	24000450 	.word	0x24000450
 8000d00:	40015824 	.word	0x40015824

08000d04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d0a:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <MX_USART1_UART_Init+0x94>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4c:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d4e:	f008 fca7 	bl	80096a0 <HAL_UART_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d58:	f000 faf0 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d60:	f009 fca9 	bl	800a6b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6a:	f000 fae7 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d72:	f009 fcde 	bl	800a732 <HAL_UARTEx_SetRxFifoThreshold>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 fade 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d82:	f009 fc5f 	bl	800a644 <HAL_UARTEx_DisableFifoMode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 fad6 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	240004e8 	.word	0x240004e8
 8000d98:	40011000 	.word	0x40011000

08000d9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000da4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da8:	2209      	movs	r2, #9
 8000daa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de4:	f004 f952 	bl	800508c <HAL_PCD_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dee:	f000 faa5 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2400057c 	.word	0x2400057c
 8000dfc:	40080000 	.word	0x40080000

08000e00 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000e08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e0c:	2209      	movs	r2, #9
 8000e0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e48:	f004 f920 	bl	800508c <HAL_PCD_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e52:	f000 fa73 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000a88 	.word	0x24000a88
 8000e60:	40040000 	.word	0x40040000

08000e64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000e90:	4b6c      	ldr	r3, [pc, #432]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000e92:	4a6d      	ldr	r2, [pc, #436]	; (8001048 <MX_FMC_Init+0x1e4>)
 8000e94:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e96:	4b6b      	ldr	r3, [pc, #428]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000e98:	4a6c      	ldr	r2, [pc, #432]	; (800104c <MX_FMC_Init+0x1e8>)
 8000e9a:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000e9c:	4b69      	ldr	r3, [pc, #420]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ea2:	4b68      	ldr	r3, [pc, #416]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000ea8:	4b66      	ldr	r3, [pc, #408]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000eae:	4b65      	ldr	r3, [pc, #404]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000eb4:	4b63      	ldr	r3, [pc, #396]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eba:	4b62      	ldr	r3, [pc, #392]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ec0:	4b60      	ldr	r3, [pc, #384]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000ecc:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000ed2:	4b5c      	ldr	r3, [pc, #368]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000ed8:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000eda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000ee0:	4b58      	ldr	r3, [pc, #352]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000eec:	4b55      	ldr	r3, [pc, #340]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000efc:	230f      	movs	r3, #15
 8000efe:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000f00:	23ff      	movs	r3, #255	; 0xff
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000f04:	230f      	movs	r3, #15
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000f0c:	2311      	movs	r3, #17
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4849      	ldr	r0, [pc, #292]	; (8001044 <MX_FMC_Init+0x1e0>)
 8000f1e:	f003 ffa1 	bl	8004e64 <HAL_NOR_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8000f28:	f000 fa08 	bl	800133c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <MX_FMC_Init+0x1e4>)
 8000f30:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f34:	4a45      	ldr	r2, [pc, #276]	; (800104c <MX_FMC_Init+0x1e8>)
 8000f36:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8000f38:	4b45      	ldr	r3, [pc, #276]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f56:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f94:	230f      	movs	r3, #15
 8000f96:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000f9c:	23ff      	movs	r3, #255	; 0xff
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000fa8:	2311      	movs	r3, #17
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <MX_FMC_Init+0x1ec>)
 8000fba:	f008 fb21 	bl	8009600 <HAL_SRAM_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_FMC_Init+0x164>
  {
    Error_Handler( );
 8000fc4:	f000 f9ba 	bl	800133c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <MX_FMC_Init+0x1f4>)
 8000fcc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_FMC_Init+0x1f0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_FMC_Init+0x1f0>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_FMC_Init+0x1f0>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800100a:	2310      	movs	r3, #16
 800100c:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800100e:	2310      	movs	r3, #16
 8001010:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8001012:	2310      	movs	r3, #16
 8001014:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8001016:	2310      	movs	r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 800101a:	2310      	movs	r3, #16
 800101c:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 800101e:	2310      	movs	r3, #16
 8001020:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8001022:	2310      	movs	r3, #16
 8001024:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <MX_FMC_Init+0x1f0>)
 800102c:	f008 faac 	bl	8009588 <HAL_SDRAM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_FMC_Init+0x1d6>
  {
    Error_Handler( );
 8001036:	f000 f981 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800103a:	bf00      	nop
 800103c:	3738      	adds	r7, #56	; 0x38
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	24000f94 	.word	0x24000f94
 8001048:	52004000 	.word	0x52004000
 800104c:	52004104 	.word	0x52004104
 8001050:	24000fe0 	.word	0x24000fe0
 8001054:	2400102c 	.word	0x2400102c
 8001058:	52004140 	.word	0x52004140

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001072:	4baa      	ldr	r3, [pc, #680]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4aa8      	ldr	r2, [pc, #672]	; (800131c <MX_GPIO_Init+0x2c0>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4ba6      	ldr	r3, [pc, #664]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4ba2      	ldr	r3, [pc, #648]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4aa1      	ldr	r2, [pc, #644]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b9e      	ldr	r3, [pc, #632]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010ae:	4b9b      	ldr	r3, [pc, #620]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	4a99      	ldr	r2, [pc, #612]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010be:	4b97      	ldr	r3, [pc, #604]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010cc:	4b93      	ldr	r3, [pc, #588]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	4a92      	ldr	r2, [pc, #584]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010dc:	4b8f      	ldr	r3, [pc, #572]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b8c      	ldr	r3, [pc, #560]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	4a8a      	ldr	r2, [pc, #552]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fa:	4b88      	ldr	r3, [pc, #544]	; (800131c <MX_GPIO_Init+0x2c0>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b84      	ldr	r3, [pc, #528]	; (800131c <MX_GPIO_Init+0x2c0>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a83      	ldr	r2, [pc, #524]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b80      	ldr	r3, [pc, #512]	; (800131c <MX_GPIO_Init+0x2c0>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001126:	4b7d      	ldr	r3, [pc, #500]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	4a7b      	ldr	r2, [pc, #492]	; (800131c <MX_GPIO_Init+0x2c0>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001136:	4b79      	ldr	r3, [pc, #484]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001144:	4b75      	ldr	r3, [pc, #468]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	4a74      	ldr	r2, [pc, #464]	; (800131c <MX_GPIO_Init+0x2c0>)
 800114c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	4b6e      	ldr	r3, [pc, #440]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	4a6c      	ldr	r2, [pc, #432]	; (800131c <MX_GPIO_Init+0x2c0>)
 800116a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001172:	4b6a      	ldr	r3, [pc, #424]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b66      	ldr	r3, [pc, #408]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	4a65      	ldr	r2, [pc, #404]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <MX_GPIO_Init+0x2c0>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <MX_GPIO_Init+0x2c0>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	4a5d      	ldr	r2, [pc, #372]	; (800131c <MX_GPIO_Init+0x2c0>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <MX_GPIO_Init+0x2c0>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2108      	movs	r1, #8
 80011c0:	4857      	ldr	r0, [pc, #348]	; (8001320 <MX_GPIO_Init+0x2c4>)
 80011c2:	f003 fa4b 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011cc:	4855      	ldr	r0, [pc, #340]	; (8001324 <MX_GPIO_Init+0x2c8>)
 80011ce:	f003 fa45 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LED3_RGB_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2150      	movs	r1, #80	; 0x50
 80011d6:	4854      	ldr	r0, [pc, #336]	; (8001328 <MX_GPIO_Init+0x2cc>)
 80011d8:	f003 fa40 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CLK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 80011dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011ee:	230c      	movs	r3, #12
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	484c      	ldr	r0, [pc, #304]	; (800132c <MX_GPIO_Init+0x2d0>)
 80011fa:	f003 f87f 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 80011fe:	2308      	movs	r3, #8
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	4842      	ldr	r0, [pc, #264]	; (8001320 <MX_GPIO_Init+0x2c4>)
 8001216:	f003 f871 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 800121a:	2304      	movs	r3, #4
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800122a:	230a      	movs	r3, #10
 800122c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	483e      	ldr	r0, [pc, #248]	; (8001330 <MX_GPIO_Init+0x2d4>)
 8001236:	f003 f861 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CDIR_Pin SDIO1_CKIN_Pin */
  GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 800123a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 800124c:	2307      	movs	r3, #7
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001254:	4619      	mov	r1, r3
 8001256:	4837      	ldr	r0, [pc, #220]	; (8001334 <MX_GPIO_Init+0x2d8>)
 8001258:	f003 f850 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800125c:	2304      	movs	r3, #4
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800126c:	230c      	movs	r3, #12
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001274:	4619      	mov	r1, r3
 8001276:	482a      	ldr	r0, [pc, #168]	; (8001320 <MX_GPIO_Init+0x2c4>)
 8001278:	f003 f840 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 800127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001282:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	4829      	ldr	r0, [pc, #164]	; (8001338 <MX_GPIO_Init+0x2dc>)
 8001294:	f003 f832 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b2:	4619      	mov	r1, r3
 80012b4:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_GPIO_Init+0x2cc>)
 80012b6:	f003 f821 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D123DIR_Pin SDIO1_D0DIR_Pin */
  GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 80012ca:	2308      	movs	r3, #8
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	4815      	ldr	r0, [pc, #84]	; (800132c <MX_GPIO_Init+0x2d0>)
 80012d6:	f003 f811 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 80012da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0x2c8>)
 80012f4:	f003 f802 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LED3_RGB_Pin;
 80012f8:	2350      	movs	r3, #80	; 0x50
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_GPIO_Init+0x2cc>)
 8001310:	f002 fff4 	bl	80042fc <HAL_GPIO_Init>

}
 8001314:	bf00      	nop
 8001316:	3740      	adds	r7, #64	; 0x40
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58024400 	.word	0x58024400
 8001320:	58020c00 	.word	0x58020c00
 8001324:	58021400 	.word	0x58021400
 8001328:	58020000 	.word	0x58020000
 800132c:	58020800 	.word	0x58020800
 8001330:	58021000 	.word	0x58021000
 8001334:	58020400 	.word	0x58020400
 8001338:	58022000 	.word	0x58022000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_MspInit+0x30>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x30>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x30>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58024400 	.word	0x58024400

0800137c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0b4      	sub	sp, #208	; 0xd0
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	22c0      	movs	r2, #192	; 0xc0
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f009 ff7f 	bl	800b290 <memset>
  if(hadc->Instance==ADC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2a      	ldr	r2, [pc, #168]	; (8001440 <HAL_ADC_MspInit+0xc4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d14d      	bne.n	8001438 <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800139c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80013ac:	2309      	movs	r3, #9
 80013ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013bc:	23c0      	movs	r3, #192	; 0xc0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013c0:	2320      	movs	r3, #32
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80013c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 f8f5 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 80013e0:	f7ff ffac 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_ADC_MspInit+0xc8>)
 80013e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_ADC_MspInit+0xc8>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_ADC_MspInit+0xc8>)
 80013f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_ADC_MspInit+0xc8>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_ADC_MspInit+0xc8>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_ADC_MspInit+0xc8>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001420:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001424:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001428:	f001 f8a8 	bl	800257c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800142c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001430:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001434:	f001 f8a2 	bl	800257c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	37d0      	adds	r7, #208	; 0xd0
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40022000 	.word	0x40022000
 8001444:	58024400 	.word	0x58024400

08001448 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ba      	sub	sp, #232	; 0xe8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	22c0      	movs	r2, #192	; 0xc0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f009 ff11 	bl	800b290 <memset>
  if(DFSDM1_Init == 0)
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d15e      	bne.n	8001534 <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001476:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001482:	2300      	movs	r3, #0
 8001484:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4618      	mov	r0, r3
 800148c:	f005 f89a 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_DFSDM_ChannelMspInit+0x52>
    {
      Error_Handler();
 8001496:	f7ff ff51 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800149c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80014ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 80014d6:	2304      	movs	r3, #4
 80014d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ee:	2306      	movs	r3, #6
 80014f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80014fc:	f002 fefe 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001500:	2308      	movs	r3, #8
 8001502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001526:	f002 fee9 	bl	80042fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_DFSDM_ChannelMspInit+0xf4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a02      	ldr	r2, [pc, #8]	; (800153c <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001532:	6013      	str	r3, [r2, #0]
  }

}
 8001534:	bf00      	nop
 8001536:	37e8      	adds	r7, #232	; 0xe8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	24001068 	.word	0x24001068
 8001540:	58024400 	.word	0x58024400
 8001544:	58020800 	.word	0x58020800

08001548 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a49      	ldr	r2, [pc, #292]	; (800168c <HAL_ETH_MspInit+0x144>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f040 808b 	bne.w	8001682 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800156c:	4b48      	ldr	r3, [pc, #288]	; (8001690 <HAL_ETH_MspInit+0x148>)
 800156e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001572:	4a47      	ldr	r2, [pc, #284]	; (8001690 <HAL_ETH_MspInit+0x148>)
 8001574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001578:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <HAL_ETH_MspInit+0x148>)
 800157e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001586:	623b      	str	r3, [r7, #32]
 8001588:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_ETH_MspInit+0x148>)
 800158c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001590:	4a3f      	ldr	r2, [pc, #252]	; (8001690 <HAL_ETH_MspInit+0x148>)
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_ETH_MspInit+0x148>)
 800159c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ae:	4a38      	ldr	r2, [pc, #224]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a30      	ldr	r2, [pc, #192]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <HAL_ETH_MspInit+0x148>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_ETH_MspInit+0x148>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_ETH_MspInit+0x148>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_ETH_MspInit+0x148>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8001620:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001632:	230b      	movs	r3, #11
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4815      	ldr	r0, [pc, #84]	; (8001694 <HAL_ETH_MspInit+0x14c>)
 800163e:	f002 fe5d 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001642:	2332      	movs	r3, #50	; 0x32
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001652:	230b      	movs	r3, #11
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	480e      	ldr	r0, [pc, #56]	; (8001698 <HAL_ETH_MspInit+0x150>)
 800165e:	f002 fe4d 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8001662:	2386      	movs	r3, #134	; 0x86
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001672:	230b      	movs	r3, #11
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <HAL_ETH_MspInit+0x154>)
 800167e:	f002 fe3d 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	; 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40028000 	.word	0x40028000
 8001690:	58024400 	.word	0x58024400
 8001694:	58021800 	.word	0x58021800
 8001698:	58020800 	.word	0x58020800
 800169c:	58020000 	.word	0x58020000

080016a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0ba      	sub	sp, #232	; 0xe8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	22c0      	movs	r2, #192	; 0xc0
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f009 fde5 	bl	800b290 <memset>
  if(hi2c->Instance==I2C1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a26      	ldr	r2, [pc, #152]	; (8001764 <HAL_I2C_MspInit+0xc4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d145      	bne.n	800175c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016d0:	f04f 0208 	mov.w	r2, #8
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 ff6c 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016f2:	f7ff fe23 	bl	800133c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_I2C_MspInit+0xc8>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_I2C_MspInit+0xc8>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_I2C_MspInit+0xc8>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001720:	2301      	movs	r3, #1
 8001722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172c:	2304      	movs	r3, #4
 800172e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <HAL_I2C_MspInit+0xcc>)
 800173a:	f002 fddf 	bl	80042fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_I2C_MspInit+0xc8>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_I2C_MspInit+0xc8>)
 8001746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800174a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_I2C_MspInit+0xc8>)
 8001750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	37e8      	adds	r7, #232	; 0xe8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40005400 	.word	0x40005400
 8001768:	58024400 	.word	0x58024400
 800176c:	58020400 	.word	0x58020400

08001770 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0bc      	sub	sp, #240	; 0xf0
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	22c0      	movs	r2, #192	; 0xc0
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f009 fd7d 	bl	800b290 <memset>
  if(hltdc->Instance==LTDC)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_LTDC_MspInit+0x178>)
 800179c:	4293      	cmp	r3, r2
 800179e:	f040 809e 	bne.w	80018de <HAL_LTDC_MspInit+0x16e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 80017b2:	2304      	movs	r3, #4
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017be:	2302      	movs	r3, #2
 80017c0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017c6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fef5 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80017e0:	f7ff fdac 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 80017e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017ea:	4a40      	ldr	r2, [pc, #256]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80017f4:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 80017f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001802:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001808:	4a38      	ldr	r2, [pc, #224]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001820:	4b32      	ldr	r3, [pc, #200]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	4a29      	ldr	r2, [pc, #164]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_LTDC_MspInit+0x17c>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin
 800185c:	23ff      	movs	r3, #255	; 0xff
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001874:	230e      	movs	r3, #14
 8001876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800187a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800187e:	4619      	mov	r1, r3
 8001880:	481b      	ldr	r0, [pc, #108]	; (80018f0 <HAL_LTDC_MspInit+0x180>)
 8001882:	f002 fd3b 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin
 8001886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018a0:	230e      	movs	r3, #14
 80018a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018aa:	4619      	mov	r1, r3
 80018ac:	4811      	ldr	r0, [pc, #68]	; (80018f4 <HAL_LTDC_MspInit+0x184>)
 80018ae:	f002 fd25 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 80018b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018cc:	230e      	movs	r3, #14
 80018ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <HAL_LTDC_MspInit+0x188>)
 80018da:	f002 fd0f 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	37f0      	adds	r7, #240	; 0xf0
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	50001000 	.word	0x50001000
 80018ec:	58024400 	.word	0x58024400
 80018f0:	58022800 	.word	0x58022800
 80018f4:	58022400 	.word	0x58022400
 80018f8:	58022000 	.word	0x58022000

080018fc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0be      	sub	sp, #248	; 0xf8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	22c0      	movs	r2, #192	; 0xc0
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f009 fcb7 	bl	800b290 <memset>
  if(hqspi->Instance==QUADSPI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <HAL_QSPI_MspInit+0x1f4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	f040 80dd 	bne.w	8001ae8 <HAL_QSPI_MspInit+0x1ec>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800192e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800193a:	2300      	movs	r3, #0
 800193c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fe3e 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800194e:	f7ff fcf5 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001952:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001954:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001958:	4a66      	ldr	r2, [pc, #408]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 800195a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001962:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001964:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001970:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	4a5f      	ldr	r2, [pc, #380]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199e:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ac:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	4a50      	ldr	r2, [pc, #320]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d0:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_QSPI_MspInit+0x1f8>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 80019e8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80019ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a02:	2309      	movs	r3, #9
 8001a04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	483a      	ldr	r0, [pc, #232]	; (8001af8 <HAL_QSPI_MspInit+0x1fc>)
 8001a10:	f002 fc74 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a2c:	230a      	movs	r3, #10
 8001a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a36:	4619      	mov	r1, r3
 8001a38:	482f      	ldr	r0, [pc, #188]	; (8001af8 <HAL_QSPI_MspInit+0x1fc>)
 8001a3a:	f002 fc5f 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8001a3e:	23c0      	movs	r3, #192	; 0xc0
 8001a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a56:	2309      	movs	r3, #9
 8001a58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4826      	ldr	r0, [pc, #152]	; (8001afc <HAL_QSPI_MspInit+0x200>)
 8001a64:	f002 fc4a 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001a68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a82:	230a      	movs	r3, #10
 8001a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	481b      	ldr	r0, [pc, #108]	; (8001afc <HAL_QSPI_MspInit+0x200>)
 8001a90:	f002 fc34 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001a94:	230c      	movs	r3, #12
 8001a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001aac:	2309      	movs	r3, #9
 8001aae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ab2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <HAL_QSPI_MspInit+0x204>)
 8001aba:	f002 fc1f 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ad6:	2309      	movs	r3, #9
 8001ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_QSPI_MspInit+0x208>)
 8001ae4:	f002 fc0a 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	37f8      	adds	r7, #248	; 0xf8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	52005000 	.word	0x52005000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58021800 	.word	0x58021800
 8001afc:	58021400 	.word	0x58021400
 8001b00:	58021c00 	.word	0x58021c00
 8001b04:	58020400 	.word	0x58020400

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0ba      	sub	sp, #232	; 0xe8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	22c0      	movs	r2, #192	; 0xc0
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f009 fbb1 	bl	800b290 <memset>
  if(huart->Instance==USART1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_UART_MspInit+0xc8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d146      	bne.n	8001bc6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b38:	f04f 0201 	mov.w	r2, #1
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fd38 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b5a:	f7ff fbef 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b66:	f043 0310 	orr.w	r3, r3, #16
 8001b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001b9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <HAL_UART_MspInit+0xd0>)
 8001bc2:	f002 fb9b 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	37e8      	adds	r7, #232	; 0xe8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	58020400 	.word	0x58020400

08001bdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0c2      	sub	sp, #264	; 0x108
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c00:	22c0      	movs	r2, #192	; 0xc0
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f009 fb43 	bl	800b290 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4aa3      	ldr	r2, [pc, #652]	; (8001ea4 <HAL_PCD_MspInit+0x2c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d14a      	bne.n	8001cb2 <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c28:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fcc5 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_PCD_MspInit+0x68>
    {
      Error_Handler();
 8001c40:	f7ff fb7c 	bl	800133c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c44:	f003 fba4 	bl	8005390 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b97      	ldr	r3, [pc, #604]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	4a96      	ldr	r2, [pc, #600]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c58:	4b93      	ldr	r3, [pc, #588]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001c66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c80:	230a      	movs	r3, #10
 8001c82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4887      	ldr	r0, [pc, #540]	; (8001eac <HAL_PCD_MspInit+0x2d0>)
 8001c8e:	f002 fb35 	bl	80042fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c92:	4b85      	ldr	r3, [pc, #532]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c98:	4a83      	ldr	r2, [pc, #524]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ca2:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001cb0:	e0f3      	b.n	8001e9a <HAL_PCD_MspInit+0x2be>
  else if(hpcd->Instance==USB_OTG_HS)
 8001cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7c      	ldr	r2, [pc, #496]	; (8001eb0 <HAL_PCD_MspInit+0x2d4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f040 80ea 	bne.w	8001e9a <HAL_PCD_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cc6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001cd2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fc70 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_PCD_MspInit+0x112>
      Error_Handler();
 8001cea:	f7ff fb27 	bl	800133c <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 8001cee:	f003 fb4f 	bl	8005390 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	4a6b      	ldr	r2, [pc, #428]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d02:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d10:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d16:	4a64      	ldr	r2, [pc, #400]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d20:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	4a5c      	ldr	r2, [pc, #368]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4c:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5c:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8001d88:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001da2:	230a      	movs	r3, #10
 8001da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4841      	ldr	r0, [pc, #260]	; (8001eb4 <HAL_PCD_MspInit+0x2d8>)
 8001db0:	f002 faa4 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4837      	ldr	r0, [pc, #220]	; (8001eb8 <HAL_PCD_MspInit+0x2dc>)
 8001ddc:	f002 fa8e 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001df8:	230a      	movs	r3, #10
 8001dfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e02:	4619      	mov	r1, r3
 8001e04:	482d      	ldr	r0, [pc, #180]	; (8001ebc <HAL_PCD_MspInit+0x2e0>)
 8001e06:	f002 fa79 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001e22:	230a      	movs	r3, #10
 8001e24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <HAL_PCD_MspInit+0x2e4>)
 8001e30:	f002 fa64 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001e34:	2328      	movs	r3, #40	; 0x28
 8001e36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4814      	ldr	r0, [pc, #80]	; (8001eac <HAL_PCD_MspInit+0x2d0>)
 8001e5a:	f002 fa4f 	bl	80042fc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e64:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_PCD_MspInit+0x2cc>)
 8001e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	bf00      	nop
 8001e9c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40080000 	.word	0x40080000
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020000 	.word	0x58020000
 8001eb0:	40040000 	.word	0x40040000
 8001eb4:	58020400 	.word	0x58020400
 8001eb8:	58022000 	.word	0x58022000
 8001ebc:	58020800 	.word	0x58020800
 8001ec0:	58021c00 	.word	0x58021c00

08001ec4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0b8      	sub	sp, #224	; 0xe0
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001eca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_FMC_MspInit+0x188>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80b0 	bne.w	8002044 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_FMC_MspInit+0x188>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	22c0      	movs	r2, #192	; 0xc0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f009 f9cc 	bl	800b290 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fb59 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001f18:	f7ff fa10 	bl	800133c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_FMC_MspInit+0x18c>)
 8001f1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f22:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_FMC_MspInit+0x18c>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f28:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001f2c:	4b48      	ldr	r3, [pc, #288]	; (8002050 <HAL_FMC_MspInit+0x18c>)
 8001f2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin
 8001f3a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f54:	230c      	movs	r3, #12
 8001f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f5e:	4619      	mov	r1, r3
 8001f60:	483c      	ldr	r0, [pc, #240]	; (8002054 <HAL_FMC_MspInit+0x190>)
 8001f62:	f002 f9cb 	bl	80042fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5
 8001f66:	f248 533f 	movw	r3, #34111	; 0x853f
 8001f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f80:	230c      	movs	r3, #12
 8001f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4832      	ldr	r0, [pc, #200]	; (8002058 <HAL_FMC_MspInit+0x194>)
 8001f8e:	f002 f9b5 	bl	80042fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin
 8001f92:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001f96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fac:	230c      	movs	r3, #12
 8001fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4828      	ldr	r0, [pc, #160]	; (800205c <HAL_FMC_MspInit+0x198>)
 8001fba:	f002 f99f 	bl	80042fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 8001fbe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001fc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fd8:	230c      	movs	r3, #12
 8001fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481e      	ldr	r0, [pc, #120]	; (8002060 <HAL_FMC_MspInit+0x19c>)
 8001fe6:	f002 f989 	bl	80042fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 8001fea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002004:	230c      	movs	r3, #12
 8002006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800200a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800200e:	4619      	mov	r1, r3
 8002010:	4814      	ldr	r0, [pc, #80]	; (8002064 <HAL_FMC_MspInit+0x1a0>)
 8002012:	f002 f973 	bl	80042fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 8002016:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800201a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002030:	230c      	movs	r3, #12
 8002032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002036:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800203a:	4619      	mov	r1, r3
 800203c:	480a      	ldr	r0, [pc, #40]	; (8002068 <HAL_FMC_MspInit+0x1a4>)
 800203e:	f002 f95d 	bl	80042fc <HAL_GPIO_Init>
 8002042:	e000      	b.n	8002046 <HAL_FMC_MspInit+0x182>
    return;
 8002044:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002046:	37e0      	adds	r7, #224	; 0xe0
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2400106c 	.word	0x2400106c
 8002050:	58024400 	.word	0x58024400
 8002054:	58022000 	.word	0x58022000
 8002058:	58021800 	.word	0x58021800
 800205c:	58020c00 	.word	0x58020c00
 8002060:	58021000 	.word	0x58021000
 8002064:	58021c00 	.word	0x58021c00
 8002068:	58021400 	.word	0x58021400

0800206c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8002074:	f7ff ff26 	bl	8001ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002088:	f7ff ff1c 	bl	8001ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800209c:	f7ff ff12 	bl	8001ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0ba      	sub	sp, #232	; 0xe8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	22c0      	movs	r2, #192	; 0xc0
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f009 f8e9 	bl	800b290 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <HAL_SAI_MspInit+0x158>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d153      	bne.n	8002170 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 fa71 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80020e8:	f7ff f928 	bl	800133c <Error_Handler>
    }

    if (SAI1_client == 0)
 80020ec:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_SAI_MspInit+0x15c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10e      	bne.n	8002112 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020f4:	4b44      	ldr	r3, [pc, #272]	; (8002208 <HAL_SAI_MspInit+0x160>)
 80020f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020fa:	4a43      	ldr	r2, [pc, #268]	; (8002208 <HAL_SAI_MspInit+0x160>)
 80020fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002100:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_SAI_MspInit+0x160>)
 8002106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_SAI_MspInit+0x15c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <HAL_SAI_MspInit+0x15c>)
 800211a:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 800211c:	2370      	movs	r3, #112	; 0x70
 800211e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002134:	2306      	movs	r3, #6
 8002136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800213e:	4619      	mov	r1, r3
 8002140:	4832      	ldr	r0, [pc, #200]	; (800220c <HAL_SAI_MspInit+0x164>)
 8002142:	f002 f8db 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800215e:	2306      	movs	r3, #6
 8002160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002168:	4619      	mov	r1, r3
 800216a:	4829      	ldr	r0, [pc, #164]	; (8002210 <HAL_SAI_MspInit+0x168>)
 800216c:	f002 f8c6 	bl	80042fc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <HAL_SAI_MspInit+0x16c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d13e      	bne.n	80021f8 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800217a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002186:	2300      	movs	r3, #0
 8002188:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fa18 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 800219a:	f7ff f8cf 	bl	800133c <Error_Handler>
    }

      if (SAI1_client == 0)
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_SAI_MspInit+0x15c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_SAI_MspInit+0x160>)
 80021a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ac:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_SAI_MspInit+0x160>)
 80021ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_SAI_MspInit+0x160>)
 80021b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_SAI_MspInit+0x15c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_SAI_MspInit+0x15c>)
 80021cc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80021ce:	2308      	movs	r3, #8
 80021d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80021e6:	2306      	movs	r3, #6
 80021e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4806      	ldr	r0, [pc, #24]	; (800220c <HAL_SAI_MspInit+0x164>)
 80021f4:	f002 f882 	bl	80042fc <HAL_GPIO_Init>

    }
}
 80021f8:	bf00      	nop
 80021fa:	37e8      	adds	r7, #232	; 0xe8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40015804 	.word	0x40015804
 8002204:	24001070 	.word	0x24001070
 8002208:	58024400 	.word	0x58024400
 800220c:	58021000 	.word	0x58021000
 8002210:	58021800 	.word	0x58021800
 8002214:	40015824 	.word	0x40015824

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 f926 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002270:	4b37      	ldr	r3, [pc, #220]	; (8002350 <SystemInit+0xe4>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a36      	ldr	r2, [pc, #216]	; (8002350 <SystemInit+0xe4>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <SystemInit+0xe8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	2b06      	cmp	r3, #6
 800228a:	d807      	bhi.n	800229c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <SystemInit+0xe8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 030f 	bic.w	r3, r3, #15
 8002294:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <SystemInit+0xe8>)
 8002296:	f043 0307 	orr.w	r3, r3, #7
 800229a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <SystemInit+0xec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <SystemInit+0xec>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <SystemInit+0xec>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <SystemInit+0xec>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4929      	ldr	r1, [pc, #164]	; (8002358 <SystemInit+0xec>)
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <SystemInit+0xf0>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <SystemInit+0xe8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <SystemInit+0xe8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 030f 	bic.w	r3, r3, #15
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <SystemInit+0xe8>)
 80022d0:	f043 0307 	orr.w	r3, r3, #7
 80022d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <SystemInit+0xec>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <SystemInit+0xec>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <SystemInit+0xec>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <SystemInit+0xec>)
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <SystemInit+0xf4>)
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <SystemInit+0xec>)
 80022f0:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <SystemInit+0xf8>)
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <SystemInit+0xec>)
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <SystemInit+0xfc>)
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <SystemInit+0xec>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <SystemInit+0xec>)
 8002302:	4a19      	ldr	r2, [pc, #100]	; (8002368 <SystemInit+0xfc>)
 8002304:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <SystemInit+0xec>)
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <SystemInit+0xec>)
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <SystemInit+0xfc>)
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <SystemInit+0xec>)
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <SystemInit+0xec>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <SystemInit+0xec>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <SystemInit+0xec>)
 8002326:	2200      	movs	r2, #0
 8002328:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <SystemInit+0x100>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <SystemInit+0x104>)
 8002330:	4013      	ands	r3, r2
 8002332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002336:	d202      	bcs.n	800233e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <SystemInit+0x108>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <SystemInit+0x10c>)
 8002340:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002344:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	52002000 	.word	0x52002000
 8002358:	58024400 	.word	0x58024400
 800235c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002360:	02020200 	.word	0x02020200
 8002364:	01ff0000 	.word	0x01ff0000
 8002368:	01010280 	.word	0x01010280
 800236c:	5c001000 	.word	0x5c001000
 8002370:	ffff0000 	.word	0xffff0000
 8002374:	51008108 	.word	0x51008108
 8002378:	52004000 	.word	0x52004000

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002380:	f7ff ff74 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	; (80023bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	; (80023c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f008 ff4d 	bl	800b248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7fe f915 	bl	80005dc <main>
  bx  lr
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023bc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80023c0:	0800b300 	.word	0x0800b300
  ldr r2, =_sbss
 80023c4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80023c8:	240010a0 	.word	0x240010a0

080023cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC3_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d6:	2003      	movs	r0, #3
 80023d8:	f001 fa26 	bl	8003828 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023dc:	f003 ff1c 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_Init+0x68>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	4913      	ldr	r1, [pc, #76]	; (800243c <HAL_Init+0x6c>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_Init+0x68>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_Init+0x6c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_Init+0x70>)
 8002412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_Init+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241a:	2000      	movs	r0, #0
 800241c:	f000 f814 	bl	8002448 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e002      	b.n	8002430 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800242a:	f7fe ff8d 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58024400 	.word	0x58024400
 800243c:	0800b2b8 	.word	0x0800b2b8
 8002440:	24000004 	.word	0x24000004
 8002444:	24000000 	.word	0x24000000

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_InitTick+0x60>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e021      	b.n	80024a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_InitTick+0x64>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_InitTick+0x60>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f001 f9fd 	bl	8003872 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f001 f9d5 	bl	800383e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x68>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2400000c 	.word	0x2400000c
 80024ac:	24000000 	.word	0x24000000
 80024b0:	24000008 	.word	0x24000008

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2400000c 	.word	0x2400000c
 80024d8:	24001074 	.word	0x24001074

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	24001074 	.word	0x24001074

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2400000c 	.word	0x2400000c

0800253c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetREVID+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1b      	lsrs	r3, r3, #16
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	5c001000 	.word	0x5c001000

08002554 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002564:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	58000400 	.word	0x58000400

0800257c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	58000400 	.word	0x58000400

080025a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	609a      	str	r2, [r3, #8]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3360      	adds	r3, #96	; 0x60
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	430b      	orrs	r3, r1
 800263e:	431a      	orrs	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	611a      	str	r2, [r3, #16]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3360      	adds	r3, #96	; 0x60
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	601a      	str	r2, [r3, #0]
  }
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3330      	adds	r3, #48	; 0x30
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	4413      	add	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	211f      	movs	r1, #31
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 011f 	and.w	r1, r3, #31
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3314      	adds	r3, #20
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0e5b      	lsrs	r3, r3, #25
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0d1b      	lsrs	r3, r3, #20
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2107      	movs	r1, #7
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	401a      	ands	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	431a      	orrs	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0318 	and.w	r3, r3, #24
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800278c:	40d9      	lsrs	r1, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	400b      	ands	r3, r1
 8002792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	000fffff 	.word	0x000fffff

080027b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027be:	4013      	ands	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	5fffffc0 	.word	0x5fffffc0

080027d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e8:	d101      	bne.n	80027ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <LL_ADC_EnableInternalRegulator+0x24>)
 800280a:	4013      	ands	r3, r2
 800280c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	6fffffc0 	.word	0x6fffffc0

08002824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002838:	d101      	bne.n	800283e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <LL_ADC_IsEnabled+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_ADC_IsEnabled+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d101      	bne.n	800288a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e18f      	b.n	8002bfa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fe fd47 	bl	800137c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff67 	bl	80027d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff4d 	bl	80027b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff82 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d114      	bne.n	8002950 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff66 	bl	80027fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002930:	4b87      	ldr	r3, [pc, #540]	; (8002b50 <HAL_ADC_Init+0x290>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	4a87      	ldr	r2, [pc, #540]	; (8002b54 <HAL_ADC_Init+0x294>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	3301      	adds	r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002942:	e002      	b.n	800294a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3b01      	subs	r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f9      	bne.n	8002944 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff65 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff76 	bl	8002872 <LL_ADC_REG_IsConversionOngoing>
 8002986:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 8129 	bne.w	8002be8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 8125 	bne.w	8002be8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029a6:	f043 0202 	orr.w	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff4a 	bl	800284c <LL_ADC_IsEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d136      	bne.n	8002a2c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_ADC_Init+0x298>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_ADC_Init+0x112>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a63      	ldr	r2, [pc, #396]	; (8002b5c <HAL_ADC_Init+0x29c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <HAL_ADC_Init+0x130>
 80029d2:	4861      	ldr	r0, [pc, #388]	; (8002b58 <HAL_ADC_Init+0x298>)
 80029d4:	f7ff ff3a 	bl	800284c <LL_ADC_IsEnabled>
 80029d8:	4604      	mov	r4, r0
 80029da:	4860      	ldr	r0, [pc, #384]	; (8002b5c <HAL_ADC_Init+0x29c>)
 80029dc:	f7ff ff36 	bl	800284c <LL_ADC_IsEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4323      	orrs	r3, r4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e008      	b.n	8002a02 <HAL_ADC_Init+0x142>
 80029f0:	485b      	ldr	r0, [pc, #364]	; (8002b60 <HAL_ADC_Init+0x2a0>)
 80029f2:	f7ff ff2b 	bl	800284c <LL_ADC_IsEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a53      	ldr	r2, [pc, #332]	; (8002b58 <HAL_ADC_Init+0x298>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_Init+0x15a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_ADC_Init+0x29c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Init+0x15e>
 8002a1a:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_ADC_Init+0x2a4>)
 8002a1c:	e000      	b.n	8002a20 <HAL_ADC_Init+0x160>
 8002a1e:	4a52      	ldr	r2, [pc, #328]	; (8002b68 <HAL_ADC_Init+0x2a8>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f7ff fdbe 	bl	80025a8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a2c:	f7ff fd86 	bl	800253c <HAL_GetREVID>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d914      	bls.n	8002a64 <HAL_ADC_Init+0x1a4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d110      	bne.n	8002a64 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7d5b      	ldrb	r3, [r3, #21]
 8002a46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a4c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7f1b      	ldrb	r3, [r3, #28]
 8002a58:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a5a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a5c:	f043 030c 	orr.w	r3, r3, #12
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e00d      	b.n	8002a80 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7d5b      	ldrb	r3, [r3, #21]
 8002a68:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a6e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a74:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7f1b      	ldrb	r3, [r3, #28]
 8002a7a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7f1b      	ldrb	r3, [r3, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	045b      	lsls	r3, r3, #17
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_ADC_Init+0x2ac>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	69b9      	ldr	r1, [r7, #24]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fed1 	bl	8002872 <LL_ADC_REG_IsConversionOngoing>
 8002ad0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fede 	bl	8002898 <LL_ADC_INJ_IsConversionOngoing>
 8002adc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d15f      	bne.n	8002ba4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d15c      	bne.n	8002ba4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7d1b      	ldrb	r3, [r3, #20]
 8002aee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_ADC_Init+0x2b0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d130      	bne.n	8002b78 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_ADC_Init+0x2b4>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0411      	lsls	r1, r2, #16
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	e01c      	b.n	8002b88 <HAL_ADC_Init+0x2c8>
 8002b4e:	bf00      	nop
 8002b50:	24000000 	.word	0x24000000
 8002b54:	053e2d63 	.word	0x053e2d63
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022100 	.word	0x40022100
 8002b60:	58026000 	.word	0x58026000
 8002b64:	40022300 	.word	0x40022300
 8002b68:	58026300 	.word	0x58026300
 8002b6c:	fff0c003 	.word	0xfff0c003
 8002b70:	ffffbffc 	.word	0xffffbffc
 8002b74:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fb80 	bl	80032a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f023 010f 	bic.w	r1, r3, #15
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 020f 	bic.w	r2, r2, #15
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
 8002be6:	e007      	b.n	8002bf8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0210 	orr.w	r2, r3, #16
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop

08002c04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b0a1      	sub	sp, #132	; 0x84
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a9d      	ldr	r2, [pc, #628]	; (8002e94 <HAL_ADC_ConfigChannel+0x290>)
 8002c1e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x2a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e321      	b.n	8003272 <HAL_ADC_ConfigChannel+0x66e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe19 	bl	8002872 <LL_ADC_REG_IsConversionOngoing>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 8306 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x62>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2201      	movs	r2, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	e016      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x90>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c76:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2201      	movs	r2, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	69d1      	ldr	r1, [r2, #28]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f7ff fd02 	bl	80026b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fdda 	bl	8002872 <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fde7 	bl	8002898 <LL_ADC_INJ_IsConversionOngoing>
 8002cca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 80b3 	bne.w	8002e3a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 80af 	bne.w	8002e3a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f7ff fd11 	bl	8002710 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_ADC_ConfigChannel+0x294>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x110>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	e01d      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x14c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x136>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	e00a      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x14c>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d027      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d68:	f7ff fc52 	bl	8002610 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6919      	ldr	r1, [r3, #16]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	7e5b      	ldrb	r3, [r3, #25]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x17e>
 8002d7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x180>
 8002d82:	2300      	movs	r3, #0
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff fc7c 	bl	8002682 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6919      	ldr	r1, [r3, #16]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	7e1b      	ldrb	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x19c>
 8002d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x19e>
 8002da0:	2300      	movs	r3, #0
 8002da2:	461a      	mov	r2, r3
 8002da4:	f7ff fc54 	bl	8002650 <LL_ADC_SetDataRightShift>
 8002da8:	e047      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	069b      	lsls	r3, r3, #26
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d107      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	069b      	lsls	r3, r3, #26
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d107      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	069b      	lsls	r3, r3, #26
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d107      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e14:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	069b      	lsls	r3, r3, #26
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d107      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e38:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fd04 	bl	800284c <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 820d 	bne.w	8003266 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f7ff fc85 	bl	8002768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_ADC_ConfigChannel+0x290>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	f040 8133 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d110      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x298>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	bf94      	ite	ls
 8002e8a:	2301      	movls	r3, #1
 8002e8c:	2300      	movhi	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e01e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x2cc>
 8002e92:	bf00      	nop
 8002e94:	47ff0000 	.word	0x47ff0000
 8002e98:	5c001000 	.word	0x5c001000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e003      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	bf94      	ite	ls
 8002eca:	2301      	movls	r3, #1
 8002ecc:	2300      	movhi	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d079      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x2ec>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	069b      	lsls	r3, r3, #26
 8002eea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eee:	e015      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x318>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f00:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e003      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	069b      	lsls	r3, r3, #26
 8002f18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x338>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	e017      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x368>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e003      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	ea42 0103 	orr.w	r1, r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x38e>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	051b      	lsls	r3, r3, #20
 8002f90:	e018      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3c0>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	e07e      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x3e0>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	069b      	lsls	r3, r3, #26
 8002fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe2:	e015      	b.n	8003010 <HAL_ADC_ConfigChannel+0x40c>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	069b      	lsls	r3, r3, #26
 800300c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x42c>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	3301      	adds	r3, #1
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	e017      	b.n	8003060 <HAL_ADC_ConfigChannel+0x45c>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	61bb      	str	r3, [r7, #24]
  return result;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e003      	b.n	8003054 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	ea42 0103 	orr.w	r1, r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_ADC_ConfigChannel+0x488>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	3b1e      	subs	r3, #30
 8003084:	051b      	lsls	r3, r3, #20
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	e01b      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x4c0>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	60fb      	str	r3, [r7, #12]
  return result;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e003      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f003 021f 	and.w	r2, r3, #31
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3b1e      	subs	r3, #30
 80030be:	051b      	lsls	r3, r3, #20
 80030c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c4:	430b      	orrs	r3, r1
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	6892      	ldr	r2, [r2, #8]
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7ff fb20 	bl	8002710 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f280 80c6 	bge.w	8003266 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a67      	ldr	r2, [pc, #412]	; (800327c <HAL_ADC_ConfigChannel+0x678>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x4ea>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_ADC_ConfigChannel+0x67c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x4ee>
 80030ee:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_ADC_ConfigChannel+0x680>)
 80030f0:	e000      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x4f0>
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_ADC_ConfigChannel+0x684>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fa7d 	bl	80025f4 <LL_ADC_GetCommonPathInternalCh>
 80030fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5e      	ldr	r2, [pc, #376]	; (800327c <HAL_ADC_ConfigChannel+0x678>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x50c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5d      	ldr	r2, [pc, #372]	; (8003280 <HAL_ADC_ConfigChannel+0x67c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10e      	bne.n	800312e <HAL_ADC_ConfigChannel+0x52a>
 8003110:	485a      	ldr	r0, [pc, #360]	; (800327c <HAL_ADC_ConfigChannel+0x678>)
 8003112:	f7ff fb9b 	bl	800284c <LL_ADC_IsEnabled>
 8003116:	4604      	mov	r4, r0
 8003118:	4859      	ldr	r0, [pc, #356]	; (8003280 <HAL_ADC_ConfigChannel+0x67c>)
 800311a:	f7ff fb97 	bl	800284c <LL_ADC_IsEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	4323      	orrs	r3, r4
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e008      	b.n	8003140 <HAL_ADC_ConfigChannel+0x53c>
 800312e:	4857      	ldr	r0, [pc, #348]	; (800328c <HAL_ADC_ConfigChannel+0x688>)
 8003130:	f7ff fb8c 	bl	800284c <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d07d      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_ADC_ConfigChannel+0x68c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d130      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x5ac>
 800314e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12b      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_ADC_ConfigChannel+0x688>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f040 8081 	bne.w	8003266 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a44      	ldr	r2, [pc, #272]	; (800327c <HAL_ADC_ConfigChannel+0x678>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x574>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_ADC_ConfigChannel+0x67c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x578>
 8003178:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_ADC_ConfigChannel+0x680>)
 800317a:	e000      	b.n	800317e <HAL_ADC_ConfigChannel+0x57a>
 800317c:	4a42      	ldr	r2, [pc, #264]	; (8003288 <HAL_ADC_ConfigChannel+0x684>)
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f7ff fa21 	bl	80025ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_ADC_ConfigChannel+0x690>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	4a41      	ldr	r2, [pc, #260]	; (8003298 <HAL_ADC_ConfigChannel+0x694>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031a0:	e002      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f9      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ae:	e05a      	b.n	8003266 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a39      	ldr	r2, [pc, #228]	; (800329c <HAL_ADC_ConfigChannel+0x698>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d11e      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5f4>
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d119      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a30      	ldr	r2, [pc, #192]	; (800328c <HAL_ADC_ConfigChannel+0x688>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d14b      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2a      	ldr	r2, [pc, #168]	; (800327c <HAL_ADC_ConfigChannel+0x678>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_ADC_ConfigChannel+0x5de>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_ADC_ConfigChannel+0x67c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x5e2>
 80031e2:	4a28      	ldr	r2, [pc, #160]	; (8003284 <HAL_ADC_ConfigChannel+0x680>)
 80031e4:	e000      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x5e4>
 80031e6:	4a28      	ldr	r2, [pc, #160]	; (8003288 <HAL_ADC_ConfigChannel+0x684>)
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7ff f9ec 	bl	80025ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f6:	e036      	b.n	8003266 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <HAL_ADC_ConfigChannel+0x69c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d131      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x662>
 8003202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d12c      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_ADC_ConfigChannel+0x688>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d127      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_ADC_ConfigChannel+0x678>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_ADC_ConfigChannel+0x626>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <HAL_ADC_ConfigChannel+0x67c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x62a>
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <HAL_ADC_ConfigChannel+0x680>)
 800322c:	e000      	b.n	8003230 <HAL_ADC_ConfigChannel+0x62c>
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_ADC_ConfigChannel+0x684>)
 8003230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f7ff f9c8 	bl	80025ce <LL_ADC_SetCommonPathInternalCh>
 800323e:	e012      	b.n	8003266 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003252:	e008      	b.n	8003266 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800326e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003272:	4618      	mov	r0, r3
 8003274:	3784      	adds	r7, #132	; 0x84
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	bf00      	nop
 800327c:	40022000 	.word	0x40022000
 8003280:	40022100 	.word	0x40022100
 8003284:	40022300 	.word	0x40022300
 8003288:	58026300 	.word	0x58026300
 800328c:	58026000 	.word	0x58026000
 8003290:	cb840000 	.word	0xcb840000
 8003294:	24000000 	.word	0x24000000
 8003298:	053e2d63 	.word	0x053e2d63
 800329c:	c7520000 	.word	0xc7520000
 80032a0:	cfb80000 	.word	0xcfb80000

080032a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a7a      	ldr	r2, [pc, #488]	; (800349c <ADC_ConfigureBoostMode+0x1f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <ADC_ConfigureBoostMode+0x1c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a79      	ldr	r2, [pc, #484]	; (80034a0 <ADC_ConfigureBoostMode+0x1fc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d109      	bne.n	80032d4 <ADC_ConfigureBoostMode+0x30>
 80032c0:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <ADC_ConfigureBoostMode+0x200>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e008      	b.n	80032e6 <ADC_ConfigureBoostMode+0x42>
 80032d4:	4b74      	ldr	r3, [pc, #464]	; (80034a8 <ADC_ConfigureBoostMode+0x204>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01c      	beq.n	8003324 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80032ea:	f003 f90f 	bl	800650c <HAL_RCC_GetHCLKFreq>
 80032ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032f8:	d010      	beq.n	800331c <ADC_ConfigureBoostMode+0x78>
 80032fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032fe:	d873      	bhi.n	80033e8 <ADC_ConfigureBoostMode+0x144>
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d002      	beq.n	800330c <ADC_ConfigureBoostMode+0x68>
 8003306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800330a:	d16d      	bne.n	80033e8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	60fb      	str	r3, [r7, #12]
        break;
 800331a:	e068      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	60fb      	str	r3, [r7, #12]
        break;
 8003322:	e064      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003324:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	f004 fb54 	bl	80079d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003330:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800333a:	d051      	beq.n	80033e0 <ADC_ConfigureBoostMode+0x13c>
 800333c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003340:	d854      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 8003342:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003346:	d047      	beq.n	80033d8 <ADC_ConfigureBoostMode+0x134>
 8003348:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800334c:	d84e      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 800334e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003352:	d03d      	beq.n	80033d0 <ADC_ConfigureBoostMode+0x12c>
 8003354:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003358:	d848      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 800335a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800335e:	d033      	beq.n	80033c8 <ADC_ConfigureBoostMode+0x124>
 8003360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003364:	d842      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 8003366:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800336a:	d029      	beq.n	80033c0 <ADC_ConfigureBoostMode+0x11c>
 800336c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003370:	d83c      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 8003372:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003376:	d01a      	beq.n	80033ae <ADC_ConfigureBoostMode+0x10a>
 8003378:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800337c:	d836      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 800337e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003382:	d014      	beq.n	80033ae <ADC_ConfigureBoostMode+0x10a>
 8003384:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003388:	d830      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 800338a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338e:	d00e      	beq.n	80033ae <ADC_ConfigureBoostMode+0x10a>
 8003390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003394:	d82a      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 8003396:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800339a:	d008      	beq.n	80033ae <ADC_ConfigureBoostMode+0x10a>
 800339c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a0:	d824      	bhi.n	80033ec <ADC_ConfigureBoostMode+0x148>
 80033a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033a6:	d002      	beq.n	80033ae <ADC_ConfigureBoostMode+0x10a>
 80033a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ac:	d11e      	bne.n	80033ec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	60fb      	str	r3, [r7, #12]
        break;
 80033be:	e016      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
        break;
 80033c6:	e012      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	60fb      	str	r3, [r7, #12]
        break;
 80033ce:	e00e      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	60fb      	str	r3, [r7, #12]
        break;
 80033d6:	e00a      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	09db      	lsrs	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]
        break;
 80033de:	e006      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	60fb      	str	r3, [r7, #12]
        break;
 80033e6:	e002      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
        break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80033ec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80033ee:	f7ff f8a5 	bl	800253c <HAL_GetREVID>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d815      	bhi.n	8003428 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <ADC_ConfigureBoostMode+0x208>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d908      	bls.n	8003416 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003412:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003414:	e03e      	b.n	8003494 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003424:	609a      	str	r2, [r3, #8]
}
 8003426:	e035      	b.n	8003494 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <ADC_ConfigureBoostMode+0x20c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d808      	bhi.n	8003448 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003444:	609a      	str	r2, [r3, #8]
}
 8003446:	e025      	b.n	8003494 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <ADC_ConfigureBoostMode+0x210>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d80a      	bhi.n	8003466 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	e016      	b.n	8003494 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <ADC_ConfigureBoostMode+0x214>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d80a      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	e007      	b.n	8003494 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40022000 	.word	0x40022000
 80034a0:	40022100 	.word	0x40022100
 80034a4:	40022300 	.word	0x40022300
 80034a8:	58026300 	.word	0x58026300
 80034ac:	01312d00 	.word	0x01312d00
 80034b0:	005f5e10 	.word	0x005f5e10
 80034b4:	00bebc20 	.word	0x00bebc20
 80034b8:	017d7840 	.word	0x017d7840

080034bc <LL_ADC_IsEnabled>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <LL_ADC_IsEnabled+0x18>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <LL_ADC_IsEnabled+0x1a>
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d101      	bne.n	80034fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b09f      	sub	sp, #124	; 0x7c
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003522:	2302      	movs	r3, #2
 8003524:	e0be      	b.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003532:	2300      	movs	r3, #0
 8003534:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d102      	bne.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003540:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	e001      	b.n	800354a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e09d      	b.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ffb9 	bl	80034e2 <LL_ADC_REG_IsConversionOngoing>
 8003570:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ffb3 	bl	80034e2 <LL_ADC_REG_IsConversionOngoing>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d17f      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003584:	2b00      	cmp	r3, #0
 8003586:	d17c      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800359e:	e000      	b.n	80035a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80035a0:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d039      	beq.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10e      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035d2:	4836      	ldr	r0, [pc, #216]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035d4:	f7ff ff72 	bl	80034bc <LL_ADC_IsEnabled>
 80035d8:	4604      	mov	r4, r0
 80035da:	4835      	ldr	r0, [pc, #212]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035dc:	f7ff ff6e 	bl	80034bc <LL_ADC_IsEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4323      	orrs	r3, r4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e008      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80035f0:	4832      	ldr	r0, [pc, #200]	; (80036bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035f2:	f7ff ff63 	bl	80034bc <LL_ADC_IsEnabled>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d047      	beq.n	8003696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800360c:	4013      	ands	r3, r2
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	430a      	orrs	r2, r1
 8003618:	431a      	orrs	r2, r3
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800361e:	e03a      	b.n	8003696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d10e      	bne.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003640:	481a      	ldr	r0, [pc, #104]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003642:	f7ff ff3b 	bl	80034bc <LL_ADC_IsEnabled>
 8003646:	4604      	mov	r4, r0
 8003648:	4819      	ldr	r0, [pc, #100]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800364a:	f7ff ff37 	bl	80034bc <LL_ADC_IsEnabled>
 800364e:	4603      	mov	r3, r0
 8003650:	4323      	orrs	r3, r4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e008      	b.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800365e:	4817      	ldr	r0, [pc, #92]	; (80036bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003660:	f7ff ff2c 	bl	80034bc <LL_ADC_IsEnabled>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800367a:	4013      	ands	r3, r2
 800367c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800367e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003680:	e009      	b.n	8003696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003694:	e000      	b.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003696:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	377c      	adds	r7, #124	; 0x7c
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40022100 	.word	0x40022100
 80036b4:	40022300 	.word	0x40022300
 80036b8:	58026300 	.word	0x58026300
 80036bc:	58026000 	.word	0x58026000
 80036c0:	fffff0e0 	.word	0xfffff0e0

080036c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <__NVIC_SetPriorityGrouping+0x40>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e0:	4013      	ands	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	; (8003704 <__NVIC_SetPriorityGrouping+0x40>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00
 8003708:	05fa0000 	.word	0x05fa0000

0800370c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <__NVIC_GetPriorityGrouping+0x18>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	f003 0307 	and.w	r3, r3, #7
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	; (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	; (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf28      	it	cs
 800379a:	2304      	movcs	r3, #4
 800379c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d902      	bls.n	80037ac <NVIC_EncodePriority+0x30>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3b03      	subs	r3, #3
 80037aa:	e000      	b.n	80037ae <NVIC_EncodePriority+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43d9      	mvns	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	4313      	orrs	r3, r2
         );
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f4:	d301      	bcc.n	80037fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00f      	b.n	800381a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <SysTick_Config+0x40>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003802:	210f      	movs	r1, #15
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f7ff ff8e 	bl	8003728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SysTick_Config+0x40>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003812:	4b04      	ldr	r3, [pc, #16]	; (8003824 <SysTick_Config+0x40>)
 8003814:	2207      	movs	r2, #7
 8003816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	e000e010 	.word	0xe000e010

08003828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff47 	bl	80036c4 <__NVIC_SetPriorityGrouping>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800384c:	f7ff ff5e 	bl	800370c <__NVIC_GetPriorityGrouping>
 8003850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7ff ff90 	bl	800377c <NVIC_EncodePriority>
 800385c:	4602      	mov	r2, r0
 800385e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff5f 	bl	8003728 <__NVIC_SetPriority>
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffb2 	bl	80037e4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0b4      	b.n	8003a08 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800389e:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <HAL_DFSDM_ChannelInit+0x184>)
 80038a0:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80038a2:	4b5c      	ldr	r3, [pc, #368]	; (8003a14 <HAL_DFSDM_ChannelInit+0x188>)
 80038a4:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_DFSDM_ChannelInit+0x18c>)
 80038a8:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f8b4 	bl	8003a1c <DFSDM_GetChannelFromInstance>
 80038b4:	4603      	mov	r3, r0
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a0      	b.n	8003a08 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fdbe 	bl	8001448 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d125      	bne.n	800392a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d108      	bne.n	800391e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	3b01      	subs	r3, #1
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003938:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003948:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800394e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 020f 	bic.w	r2, r2, #15
 8003966:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800398e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f002 0207 	and.w	r2, r2, #7
 80039ba:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f811 	bl	8003a1c <DFSDM_GetChannelFromInstance>
 80039fa:	4603      	mov	r3, r0
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	24001078 	.word	0x24001078
 8003a14:	2400107c 	.word	0x2400107c
 8003a18:	40017000 	.word	0x40017000

08003a1c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d102      	bne.n	8003a32 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e02b      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <DFSDM_GetChannelFromInstance+0x80>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d102      	bne.n	8003a40 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e024      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <DFSDM_GetChannelFromInstance+0x84>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d102      	bne.n	8003a4e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e01d      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <DFSDM_GetChannelFromInstance+0x88>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d102      	bne.n	8003a5c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003a56:	2303      	movs	r3, #3
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e016      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d102      	bne.n	8003a6a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003a64:	2304      	movs	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e00f      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <DFSDM_GetChannelFromInstance+0x90>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d102      	bne.n	8003a78 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8003a72:	2305      	movs	r3, #5
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e008      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <DFSDM_GetChannelFromInstance+0x94>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003a80:	2306      	movs	r3, #6
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e001      	b.n	8003a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8003a86:	2307      	movs	r3, #7
 8003a88:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40017000 	.word	0x40017000
 8003a9c:	40017020 	.word	0x40017020
 8003aa0:	40017040 	.word	0x40017040
 8003aa4:	40017060 	.word	0x40017060
 8003aa8:	40017080 	.word	0x40017080
 8003aac:	400170a0 	.word	0x400170a0
 8003ab0:	400170c0 	.word	0x400170c0

08003ab4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0cf      	b.n	8003c66 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2223      	movs	r2, #35	; 0x23
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fd fd35 	bl	8001548 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_ETH_Init+0x1bc>)
 8003ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ae4:	4a62      	ldr	r2, [pc, #392]	; (8003c70 <HAL_ETH_Init+0x1bc>)
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003aee:	4b60      	ldr	r3, [pc, #384]	; (8003c70 <HAL_ETH_Init+0x1bc>)
 8003af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7a1b      	ldrb	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7fe fd25 	bl	8002554 <HAL_SYSCFG_ETHInterfaceSelect>
 8003b0a:	e003      	b.n	8003b14 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003b0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b10:	f7fe fd20 	bl	8002554 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_ETH_Init+0x1c0>)
 8003b16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b30:	f7fe fcd4 	bl	80024dc <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b36:	e011      	b.n	8003b5c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b38:	f7fe fcd0 	bl	80024dc <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b46:	d909      	bls.n	8003b5c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	22e0      	movs	r2, #224	; 0xe0
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e084      	b.n	8003c66 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e4      	bne.n	8003b38 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f886 	bl	8003c80 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003b74:	f002 fcca 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a3f      	ldr	r2, [pc, #252]	; (8003c78 <HAL_ETH_Init+0x1c4>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	0c9a      	lsrs	r2, r3, #18
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3a01      	subs	r2, #1
 8003b88:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa71 	bl	8004074 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b9e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	22e0      	movs	r2, #224	; 0xe0
 8003bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e049      	b.n	8003c66 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bda:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_ETH_Init+0x1c8>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6952      	ldr	r2, [r2, #20]
 8003be6:	0051      	lsls	r1, r2, #1
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fad9 	bl	80041ae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb1f 	bl	8004240 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	3305      	adds	r3, #5
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	021a      	lsls	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	3303      	adds	r3, #3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	061a      	lsls	r2, r3, #24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3302      	adds	r3, #2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c4e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
 8003c74:	58000400 	.word	0x58000400
 8003c78:	431bde83 	.word	0x431bde83
 8003c7c:	ffff8001 	.word	0xffff8001

08003c80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c9a:	f002 fc37 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8003c9e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d908      	bls.n	8003cba <HAL_ETH_SetMDIOClockRange+0x3a>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d804      	bhi.n	8003cba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e027      	b.n	8003d0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d908      	bls.n	8003cd4 <HAL_ETH_SetMDIOClockRange+0x54>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d204      	bcs.n	8003cd4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e01a      	b.n	8003d0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d303      	bcc.n	8003ce4 <HAL_ETH_SetMDIOClockRange+0x64>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d911      	bls.n	8003d08 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d908      	bls.n	8003cfe <HAL_ETH_SetMDIOClockRange+0x7e>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <HAL_ETH_SetMDIOClockRange+0xac>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d804      	bhi.n	8003cfe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e005      	b.n	8003d0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e000      	b.n	8003d0a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003d08:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	01312cff 	.word	0x01312cff
 8003d20:	02160ebf 	.word	0x02160ebf
 8003d24:	03938700 	.word	0x03938700
 8003d28:	05f5e0ff 	.word	0x05f5e0ff
 8003d2c:	08f0d17f 	.word	0x08f0d17f

08003d30 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003d42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	791b      	ldrb	r3, [r3, #4]
 8003d48:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003d4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	7b1b      	ldrb	r3, [r3, #12]
 8003d50:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	7b5b      	ldrb	r3, [r3, #13]
 8003d58:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	7b9b      	ldrb	r3, [r3, #14]
 8003d60:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	7bdb      	ldrb	r3, [r3, #15]
 8003d68:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	7c12      	ldrb	r2, [r2, #16]
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	d102      	bne.n	8003d7a <ETH_SetMACConfig+0x4a>
 8003d74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d78:	e000      	b.n	8003d7c <ETH_SetMACConfig+0x4c>
 8003d7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	7c52      	ldrb	r2, [r2, #17]
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	d102      	bne.n	8003d8c <ETH_SetMACConfig+0x5c>
 8003d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d8a:	e000      	b.n	8003d8e <ETH_SetMACConfig+0x5e>
 8003d8c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	7c9b      	ldrb	r3, [r3, #18]
 8003d94:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d96:	431a      	orrs	r2, r3
               macconf->Speed |
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d9c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003da2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	7f1b      	ldrb	r3, [r3, #28]
 8003da8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003daa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	7f5b      	ldrb	r3, [r3, #29]
 8003db0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003db2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	7f92      	ldrb	r2, [r2, #30]
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d102      	bne.n	8003dc2 <ETH_SetMACConfig+0x92>
 8003dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc0:	e000      	b.n	8003dc4 <ETH_SetMACConfig+0x94>
 8003dc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003dc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	7fdb      	ldrb	r3, [r3, #31]
 8003dca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003dcc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d102      	bne.n	8003dde <ETH_SetMACConfig+0xae>
 8003dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ddc:	e000      	b.n	8003de0 <ETH_SetMACConfig+0xb0>
 8003dde:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003de0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003de6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003df0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b56      	ldr	r3, [pc, #344]	; (8003f5c <ETH_SetMACConfig+0x22c>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e24:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003e26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e2e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e30:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003e38:	2a00      	cmp	r2, #0
 8003e3a:	d102      	bne.n	8003e42 <ETH_SetMACConfig+0x112>
 8003e3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e40:	e000      	b.n	8003e44 <ETH_SetMACConfig+0x114>
 8003e42:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e44:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <ETH_SetMACConfig+0x230>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e68:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4b3a      	ldr	r3, [pc, #232]	; (8003f64 <ETH_SetMACConfig+0x234>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e8c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d101      	bne.n	8003ea2 <ETH_SetMACConfig+0x172>
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	e000      	b.n	8003ea4 <ETH_SetMACConfig+0x174>
 8003ea2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003ea4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003ecc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ed4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f023 0103 	bic.w	r1, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003efa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	d101      	bne.n	8003f1e <ETH_SetMACConfig+0x1ee>
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	e000      	b.n	8003f20 <ETH_SetMACConfig+0x1f0>
 8003f1e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003f20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f28:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003f32:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003f40:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	00048083 	.word	0x00048083
 8003f60:	c0f88000 	.word	0xc0f88000
 8003f64:	fffffef0 	.word	0xfffffef0

08003f68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b38      	ldr	r3, [pc, #224]	; (8004060 <ETH_SetDMAConfig+0xf8>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	6811      	ldr	r1, [r2, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f8e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f9a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	7b1b      	ldrb	r3, [r3, #12]
 8003fa0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <ETH_SetDMAConfig+0xfc>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fc0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	7b5b      	ldrb	r3, [r3, #13]
 8003fc6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <ETH_SetDMAConfig+0x100>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	7d1b      	ldrb	r3, [r3, #20]
 8003ff8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ffa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7f5b      	ldrb	r3, [r3, #29]
 8004000:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004012:	4b16      	ldr	r3, [pc, #88]	; (800406c <ETH_SetDMAConfig+0x104>)
 8004014:	4013      	ands	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	430b      	orrs	r3, r1
 800401e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004022:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	7f1b      	ldrb	r3, [r3, #28]
 800402a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <ETH_SetDMAConfig+0x108>)
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	430b      	orrs	r3, r1
 800404c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004050:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	ffff87fd 	.word	0xffff87fd
 8004064:	ffff2ffe 	.word	0xffff2ffe
 8004068:	fffec000 	.word	0xfffec000
 800406c:	ffc0efef 	.word	0xffc0efef
 8004070:	7fc0ffff 	.word	0x7fc0ffff

08004074 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0a4      	sub	sp, #144	; 0x90
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004082:	2300      	movs	r3, #0
 8004084:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80040b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80040bc:	2300      	movs	r3, #0
 80040be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80040cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80040d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80040d8:	2300      	movs	r3, #0
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80040ee:	2300      	movs	r3, #0
 80040f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80040f6:	2300      	movs	r3, #0
 80040f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800410c:	2320      	movs	r3, #32
 800410e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800411e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004130:	2302      	movs	r3, #2
 8004132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800414e:	2300      	movs	r3, #0
 8004150:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fde6 	bl	8003d30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004164:	2301      	movs	r3, #1
 8004166:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004168:	2301      	movs	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800416c:	2300      	movs	r3, #0
 800416e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800417a:	2300      	movs	r3, #0
 800417c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800417e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004182:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800418c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004194:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fee1 	bl	8003f68 <ETH_SetDMAConfig>
}
 80041a6:	bf00      	nop
 80041a8:	3790      	adds	r7, #144	; 0x90
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e01d      	b.n	80041f8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68d9      	ldr	r1, [r3, #12]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	3206      	adds	r2, #6
 80041ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d9de      	bls.n	80041bc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420c:	461a      	mov	r2, r3
 800420e:	2303      	movs	r3, #3
 8004210:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004220:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004230:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e023      	b.n	8004296 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6919      	ldr	r1, [r3, #16]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2200      	movs	r2, #0
 800426a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2200      	movs	r2, #0
 8004276:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2200      	movs	r2, #0
 8004282:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	3212      	adds	r2, #18
 800428c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d9d8      	bls.n	800424e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c2:	461a      	mov	r2, r3
 80042c4:	2303      	movs	r3, #3
 80042c6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800430a:	4b89      	ldr	r3, [pc, #548]	; (8004530 <HAL_GPIO_Init+0x234>)
 800430c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800430e:	e194      	b.n	800463a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8186 	beq.w	8004634 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d005      	beq.n	8004340 <HAL_GPIO_Init+0x44>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d130      	bne.n	80043a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004376:	2201      	movs	r2, #1
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0201 	and.w	r2, r3, #1
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d017      	beq.n	80043de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d123      	bne.n	8004432 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	08da      	lsrs	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3208      	adds	r2, #8
 80043f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	220f      	movs	r2, #15
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	08da      	lsrs	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3208      	adds	r2, #8
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80e0 	beq.w	8004634 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <HAL_GPIO_Init+0x238>)
 8004476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800447a:	4a2e      	ldr	r2, [pc, #184]	; (8004534 <HAL_GPIO_Init+0x238>)
 800447c:	f043 0302 	orr.w	r3, r3, #2
 8004480:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_GPIO_Init+0x238>)
 8004486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004492:	4a29      	ldr	r2, [pc, #164]	; (8004538 <HAL_GPIO_Init+0x23c>)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	3302      	adds	r3, #2
 800449a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	220f      	movs	r2, #15
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <HAL_GPIO_Init+0x240>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d052      	beq.n	8004564 <HAL_GPIO_Init+0x268>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <HAL_GPIO_Init+0x244>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d031      	beq.n	800452a <HAL_GPIO_Init+0x22e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <HAL_GPIO_Init+0x248>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d02b      	beq.n	8004526 <HAL_GPIO_Init+0x22a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <HAL_GPIO_Init+0x24c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d025      	beq.n	8004522 <HAL_GPIO_Init+0x226>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	; (800454c <HAL_GPIO_Init+0x250>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <HAL_GPIO_Init+0x222>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_GPIO_Init+0x254>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d019      	beq.n	800451a <HAL_GPIO_Init+0x21e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <HAL_GPIO_Init+0x258>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x21a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <HAL_GPIO_Init+0x25c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x216>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <HAL_GPIO_Init+0x260>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x212>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <HAL_GPIO_Init+0x264>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x20e>
 8004506:	2309      	movs	r3, #9
 8004508:	e02d      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 800450a:	230a      	movs	r3, #10
 800450c:	e02b      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 800450e:	2308      	movs	r3, #8
 8004510:	e029      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 8004512:	2307      	movs	r3, #7
 8004514:	e027      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 8004516:	2306      	movs	r3, #6
 8004518:	e025      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 800451a:	2305      	movs	r3, #5
 800451c:	e023      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 800451e:	2304      	movs	r3, #4
 8004520:	e021      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 8004522:	2303      	movs	r3, #3
 8004524:	e01f      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 8004526:	2302      	movs	r3, #2
 8004528:	e01d      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 800452a:	2301      	movs	r3, #1
 800452c:	e01b      	b.n	8004566 <HAL_GPIO_Init+0x26a>
 800452e:	bf00      	nop
 8004530:	58000080 	.word	0x58000080
 8004534:	58024400 	.word	0x58024400
 8004538:	58000400 	.word	0x58000400
 800453c:	58020000 	.word	0x58020000
 8004540:	58020400 	.word	0x58020400
 8004544:	58020800 	.word	0x58020800
 8004548:	58020c00 	.word	0x58020c00
 800454c:	58021000 	.word	0x58021000
 8004550:	58021400 	.word	0x58021400
 8004554:	58021800 	.word	0x58021800
 8004558:	58021c00 	.word	0x58021c00
 800455c:	58022000 	.word	0x58022000
 8004560:	58022400 	.word	0x58022400
 8004564:	2300      	movs	r3, #0
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	f002 0203 	and.w	r2, r2, #3
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	4093      	lsls	r3, r2
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004576:	4938      	ldr	r1, [pc, #224]	; (8004658 <HAL_GPIO_Init+0x35c>)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	3301      	adds	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	f47f ae63 	bne.w	8004310 <HAL_GPIO_Init+0x14>
  }
}
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	3724      	adds	r7, #36	; 0x24
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	58000400 	.word	0x58000400

0800465c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
 8004668:	4613      	mov	r3, r2
 800466a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800466c:	787b      	ldrb	r3, [r7, #1]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004678:	e003      	b.n	8004682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800467a:	887b      	ldrh	r3, [r7, #2]
 800467c:	041a      	lsls	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	619a      	str	r2, [r3, #24]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046a0:	887a      	ldrh	r2, [r7, #2]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4013      	ands	r3, r2
 80046a6:	041a      	lsls	r2, r3, #16
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43d9      	mvns	r1, r3
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	400b      	ands	r3, r1
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	619a      	str	r2, [r3, #24]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc ffd8 	bl	80016a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	e006      	b.n	800474c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800474a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d104      	bne.n	800475e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_I2C_Init+0x11c>)
 800476a:	430b      	orrs	r3, r1
 800476c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800477c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	02008000 	.word	0x02008000

080047e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d138      	bne.n	800486c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d139      	bne.n	8004904 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800489a:	2302      	movs	r3, #2
 800489c:	e033      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2224      	movs	r2, #36	; 0x24
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0bf      	b.n	8004aa6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc ff18 	bl	8001770 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004956:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800496c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6899      	ldr	r1, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_LTDC_Init+0x19c>)
 8004988:	400b      	ands	r3, r1
 800498a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_LTDC_Init+0x19c>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68d9      	ldr	r1, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b33      	ldr	r3, [pc, #204]	; (8004ab0 <HAL_LTDC_Init+0x19c>)
 80049e4:	400b      	ands	r3, r1
 80049e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6919      	ldr	r1, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6959      	ldr	r1, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_LTDC_Init+0x19c>)
 8004a12:	400b      	ands	r3, r1
 8004a14:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6959      	ldr	r1, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0206 	orr.w	r2, r2, #6
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	f000f800 	.word	0xf000f800

08004ab4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ab4:	b5b0      	push	{r4, r5, r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_LTDC_ConfigLayer+0x1a>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e02c      	b.n	8004b28 <HAL_LTDC_ConfigLayer+0x74>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2134      	movs	r1, #52	; 0x34
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4614      	mov	r4, r2
 8004af2:	461d      	mov	r5, r3
 8004af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f811 	bl	8004b30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bdb0      	pop	{r4, r5, r7, pc}

08004b30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	4413      	add	r3, r2
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	01db      	lsls	r3, r3, #7
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3384      	adds	r3, #132	; 0x84
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	4611      	mov	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	01d2      	lsls	r2, r2, #7
 8004b6c:	440a      	add	r2, r1
 8004b6e:	3284      	adds	r2, #132	; 0x84
 8004b70:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	01db      	lsls	r3, r3, #7
 8004b94:	440b      	add	r3, r1
 8004b96:	3384      	adds	r3, #132	; 0x84
 8004b98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bae:	4413      	add	r3, r2
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	01db      	lsls	r3, r3, #7
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3384      	adds	r3, #132	; 0x84
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	01d2      	lsls	r2, r2, #7
 8004bce:	440a      	add	r2, r1
 8004bd0:	3284      	adds	r2, #132	; 0x84
 8004bd2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004bd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be6:	4413      	add	r3, r2
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	01db      	lsls	r3, r3, #7
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3384      	adds	r3, #132	; 0x84
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3384      	adds	r3, #132	; 0x84
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	4611      	mov	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	01d2      	lsls	r2, r2, #7
 8004c1a:	440a      	add	r2, r1
 8004c1c:	3284      	adds	r2, #132	; 0x84
 8004c1e:	f023 0307 	bic.w	r3, r3, #7
 8004c22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	01db      	lsls	r3, r3, #7
 8004c2e:	4413      	add	r3, r2
 8004c30:	3384      	adds	r3, #132	; 0x84
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	01db      	lsls	r3, r3, #7
 8004c60:	4413      	add	r3, r2
 8004c62:	3384      	adds	r3, #132	; 0x84
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	01db      	lsls	r3, r3, #7
 8004c70:	4413      	add	r3, r2
 8004c72:	3384      	adds	r3, #132	; 0x84
 8004c74:	461a      	mov	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c80:	461a      	mov	r2, r3
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	01db      	lsls	r3, r3, #7
 8004c94:	440b      	add	r3, r1
 8004c96:	3384      	adds	r3, #132	; 0x84
 8004c98:	4619      	mov	r1, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	01db      	lsls	r3, r3, #7
 8004caa:	4413      	add	r3, r2
 8004cac:	3384      	adds	r3, #132	; 0x84
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	01d2      	lsls	r2, r2, #7
 8004cba:	440a      	add	r2, r1
 8004cbc:	3284      	adds	r2, #132	; 0x84
 8004cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cc2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	01db      	lsls	r3, r3, #7
 8004cce:	4413      	add	r3, r2
 8004cd0:	3384      	adds	r3, #132	; 0x84
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	01db      	lsls	r3, r3, #7
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3384      	adds	r3, #132	; 0x84
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	01db      	lsls	r3, r3, #7
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3384      	adds	r3, #132	; 0x84
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4b58      	ldr	r3, [pc, #352]	; (8004e5c <LTDC_SetConfig+0x32c>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	6809      	ldr	r1, [r1, #0]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	01c9      	lsls	r1, r1, #7
 8004d12:	4401      	add	r1, r0
 8004d14:	3184      	adds	r1, #132	; 0x84
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	01db      	lsls	r3, r3, #7
 8004d24:	4413      	add	r3, r2
 8004d26:	3384      	adds	r3, #132	; 0x84
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	01db      	lsls	r3, r3, #7
 8004d34:	4413      	add	r3, r2
 8004d36:	3384      	adds	r3, #132	; 0x84
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	01db      	lsls	r3, r3, #7
 8004d48:	4413      	add	r3, r2
 8004d4a:	3384      	adds	r3, #132	; 0x84
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e01b      	b.n	8004d9a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d102      	bne.n	8004d70 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e014      	b.n	8004d9a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d00b      	beq.n	8004d90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d007      	beq.n	8004d90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d003      	beq.n	8004d90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d8c:	2b07      	cmp	r3, #7
 8004d8e:	d102      	bne.n	8004d96 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004d90:	2302      	movs	r3, #2
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e001      	b.n	8004d9a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004d96:	2301      	movs	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	01db      	lsls	r3, r3, #7
 8004da4:	4413      	add	r3, r2
 8004da6:	3384      	adds	r3, #132	; 0x84
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	4611      	mov	r1, r2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	01d2      	lsls	r2, r2, #7
 8004db4:	440a      	add	r2, r1
 8004db6:	3284      	adds	r2, #132	; 0x84
 8004db8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	fb02 f303 	mul.w	r3, r2, r3
 8004dc8:	041a      	lsls	r2, r3, #16
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6859      	ldr	r1, [r3, #4]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	3307      	adds	r3, #7
 8004ddc:	68f9      	ldr	r1, [r7, #12]
 8004dde:	6809      	ldr	r1, [r1, #0]
 8004de0:	4608      	mov	r0, r1
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	01c9      	lsls	r1, r1, #7
 8004de6:	4401      	add	r1, r0
 8004de8:	3184      	adds	r1, #132	; 0x84
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	01db      	lsls	r3, r3, #7
 8004df8:	4413      	add	r3, r2
 8004dfa:	3384      	adds	r3, #132	; 0x84
 8004dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	01db      	lsls	r3, r3, #7
 8004e08:	440b      	add	r3, r1
 8004e0a:	3384      	adds	r3, #132	; 0x84
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <LTDC_SetConfig+0x330>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	4413      	add	r3, r2
 8004e20:	3384      	adds	r3, #132	; 0x84
 8004e22:	461a      	mov	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	01db      	lsls	r3, r3, #7
 8004e34:	4413      	add	r3, r2
 8004e36:	3384      	adds	r3, #132	; 0x84
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	4611      	mov	r1, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	01d2      	lsls	r2, r2, #7
 8004e44:	440a      	add	r2, r1
 8004e46:	3284      	adds	r2, #132	; 0x84
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	fffff8f8 	.word	0xfffff8f8
 8004e60:	fffff800 	.word	0xfffff800

08004e64 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e096      	b.n	8004fac <HAL_NOR_Init+0x148>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7fd f8ea 	bl	800206c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f005 fcd2 	bl	800a84c <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	f005 fd5a 	bl	800a96c <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6858      	ldr	r0, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	f005 fda1 	bl	800aa0c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6892      	ldr	r2, [r2, #8]
 8004ed2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	f041 0101 	orr.w	r1, r1, #1
 8004ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <HAL_NOR_Init+0x150>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_NOR_Init+0x150>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004efc:	4b2e      	ldr	r3, [pc, #184]	; (8004fb8 <HAL_NOR_Init+0x154>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2d      	ldr	r2, [pc, #180]	; (8004fb8 <HAL_NOR_Init+0x154>)
 8004f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <HAL_NOR_Init+0xbc>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8004f18:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e012      	b.n	8004f46 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d103      	bne.n	8004f30 <HAL_NOR_Init+0xcc>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8004f28:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e00a      	b.n	8004f46 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d103      	bne.n	8004f40 <HAL_NOR_Init+0xdc>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8004f38:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e002      	b.n	8004f46 <HAL_NOR_Init+0xe2>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8004f40:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8004f44:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_NOR_Init+0x104>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f005 fd8f 	bl	800aa7c <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2204      	movs	r2, #4
 8004f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f66:	e020      	b.n	8004faa <HAL_NOR_Init+0x146>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_NOR_Init+0x150>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_NOR_Init+0x112>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	33aa      	adds	r3, #170	; 0xaa
 8004f74:	e001      	b.n	8004f7a <HAL_NOR_Init+0x116>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3355      	adds	r3, #85	; 0x55
 8004f7a:	2298      	movs	r2, #152	; 0x98
 8004f7c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f7e:	f3bf 8f4f 	dsb	sy
}
 8004f82:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_NOR_Init+0x150>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_NOR_Init+0x12e>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3326      	adds	r3, #38	; 0x26
 8004f90:	e001      	b.n	8004f96 <HAL_NOR_Init+0x132>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	3313      	adds	r3, #19
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f80b 	bl	8004fbc <HAL_NOR_ReturnToReadMode>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2400109c 	.word	0x2400109c
 8004fb8:	52004000 	.word	0x52004000

08004fbc <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fce:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8004fd0:	7abb      	ldrb	r3, [r7, #10]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d101      	bne.n	8004fda <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e052      	b.n	8005080 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 8004fda:	7abb      	ldrb	r3, [r7, #10]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d101      	bne.n	8004fe4 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e04d      	b.n	8005080 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8004fe4:	7abb      	ldrb	r3, [r7, #10]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d149      	bne.n	800507e <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_NOR_ReturnToReadMode+0x3c>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e043      	b.n	8005080 <HAL_NOR_ReturnToReadMode+0xc4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d103      	bne.n	8005018 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8005010:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e012      	b.n	800503e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d103      	bne.n	8005028 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8005020:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e00a      	b.n	800503e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d103      	bne.n	8005038 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8005030:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e002      	b.n	800503e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8005038:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800503c:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	2b02      	cmp	r3, #2
 8005044:	d105      	bne.n	8005052 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	22f0      	movs	r2, #240	; 0xf0
 800504a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800504c:	f3bf 8f4f 	dsb	sy
}
 8005050:	e00b      	b.n	800506a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005060:	f3bf 8f4f 	dsb	sy
}
 8005064:	e001      	b.n	800506a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7aba      	ldrb	r2, [r7, #10]
 800506e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	e000      	b.n	8005080 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	b08f      	sub	sp, #60	; 0x3c
 8005090:	af0a      	add	r7, sp, #40	; 0x28
 8005092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e116      	b.n	80052cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fc fd8f 	bl	8001bdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2203      	movs	r2, #3
 80050c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f005 fe17 	bl	800ad10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	687e      	ldr	r6, [r7, #4]
 80050ea:	466d      	mov	r5, sp
 80050ec:	f106 0410 	add.w	r4, r6, #16
 80050f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005100:	1d33      	adds	r3, r6, #4
 8005102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005104:	6838      	ldr	r0, [r7, #0]
 8005106:	f005 fd95 	bl	800ac34 <USB_CoreInit>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0d7      	b.n	80052cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f005 fe05 	bl	800ad32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
 800512c:	e04a      	b.n	80051c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800512e:	7bfa      	ldrb	r2, [r7, #15]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	333d      	adds	r3, #61	; 0x3d
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	333c      	adds	r3, #60	; 0x3c
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	b298      	uxth	r0, r3
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3356      	adds	r3, #86	; 0x56
 800516a:	4602      	mov	r2, r0
 800516c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3340      	adds	r3, #64	; 0x40
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	3344      	adds	r3, #68	; 0x44
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3348      	adds	r3, #72	; 0x48
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051aa:	7bfa      	ldrb	r2, [r7, #15]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	334c      	adds	r3, #76	; 0x4c
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	3301      	adds	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	7bfa      	ldrb	r2, [r7, #15]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3af      	bcc.n	800512e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	e044      	b.n	800525e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051d4:	7bfa      	ldrb	r2, [r7, #15]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051ea:	7bfa      	ldrb	r2, [r7, #15]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005200:	7bfa      	ldrb	r2, [r7, #15]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005216:	7bfa      	ldrb	r2, [r7, #15]
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800522c:	7bfa      	ldrb	r2, [r7, #15]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	3301      	adds	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d3b5      	bcc.n	80051d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	687e      	ldr	r6, [r7, #4]
 8005270:	466d      	mov	r5, sp
 8005272:	f106 0410 	add.w	r4, r6, #16
 8005276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800527c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005282:	e885 0003 	stmia.w	r5, {r0, r1}
 8005286:	1d33      	adds	r3, r6, #4
 8005288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800528a:	6838      	ldr	r0, [r7, #0]
 800528c:	f005 fd9e 	bl	800adcc <USB_DevInit>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e014      	b.n	80052cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f80a 	bl	80052d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f005 ff5c 	bl	800b182 <USB_DevDisconnect>

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_PCDEx_ActivateLPM+0x44>)
 8005304:	4313      	orrs	r3, r2
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	10000003 	.word	0x10000003

0800531c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_PWREx_ConfigSupply+0x70>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b04      	cmp	r3, #4
 800532e:	d00a      	beq.n	8005346 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005330:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_PWREx_ConfigSupply+0x70>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e01f      	b.n	8005382 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	e01d      	b.n	8005382 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005346:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_PWREx_ConfigSupply+0x70>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f023 0207 	bic.w	r2, r3, #7
 800534e:	490f      	ldr	r1, [pc, #60]	; (800538c <HAL_PWREx_ConfigSupply+0x70>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4313      	orrs	r3, r2
 8005354:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005356:	f7fd f8c1 	bl	80024dc <HAL_GetTick>
 800535a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800535c:	e009      	b.n	8005372 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800535e:	f7fd f8bd 	bl	80024dc <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536c:	d901      	bls.n	8005372 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e007      	b.n	8005382 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_PWREx_ConfigSupply+0x70>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537e:	d1ee      	bne.n	800535e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58024800 	.word	0x58024800

08005390 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539e:	60d3      	str	r3, [r2, #12]
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	58024800 	.word	0x58024800

080053b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053b8:	f7fd f890 	bl	80024dc <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e05f      	b.n	8005488 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fc fa91 	bl	80018fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80053da:	f241 3188 	movw	r1, #5000	; 0x1388
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f85a 	bl	8005498 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	2120      	movs	r1, #32
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f852 	bl	80054b4 <QSPI_WaitFlagStateUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d135      	bne.n	8005486 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_QSPI_Init+0xe0>)
 8005422:	4013      	ands	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6852      	ldr	r2, [r2, #4]
 8005428:	0611      	lsls	r1, r2, #24
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68d2      	ldr	r2, [r2, #12]
 800542e:	4311      	orrs	r1, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	69d2      	ldr	r2, [r2, #28]
 8005434:	4311      	orrs	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6a12      	ldr	r2, [r2, #32]
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	430b      	orrs	r3, r1
 8005442:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_QSPI_Init+0xe4>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6912      	ldr	r2, [r2, #16]
 8005452:	0411      	lsls	r1, r2, #16
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6952      	ldr	r2, [r2, #20]
 8005458:	4311      	orrs	r1, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6992      	ldr	r2, [r2, #24]
 800545e:	4311      	orrs	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	430b      	orrs	r3, r1
 8005466:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005486:	7afb      	ldrb	r3, [r7, #11]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00ffff2f 	.word	0x00ffff2f
 8005494:	ffe0f8fe 	.word	0xffe0f8fe

08005498 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054c4:	e01a      	b.n	80054fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d016      	beq.n	80054fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fd f805 	bl	80024dc <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2204      	movs	r2, #4
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f0:	f043 0201 	orr.w	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e00e      	b.n	800551a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf14      	ite	ne
 800550a:	2301      	movne	r3, #1
 800550c:	2300      	moveq	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d1d6      	bne.n	80054c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08c      	sub	sp, #48	; 0x30
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f000 bc48 	b.w	8005dc8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8088 	beq.w	8005656 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005546:	4b99      	ldr	r3, [pc, #612]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005550:	4b96      	ldr	r3, [pc, #600]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b10      	cmp	r3, #16
 800555a:	d007      	beq.n	800556c <HAL_RCC_OscConfig+0x48>
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	2b18      	cmp	r3, #24
 8005560:	d111      	bne.n	8005586 <HAL_RCC_OscConfig+0x62>
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d10c      	bne.n	8005586 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556c:	4b8f      	ldr	r3, [pc, #572]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d06d      	beq.n	8005654 <HAL_RCC_OscConfig+0x130>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d169      	bne.n	8005654 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f000 bc21 	b.w	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558e:	d106      	bne.n	800559e <HAL_RCC_OscConfig+0x7a>
 8005590:	4b86      	ldr	r3, [pc, #536]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a85      	ldr	r2, [pc, #532]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e02e      	b.n	80055fc <HAL_RCC_OscConfig+0xd8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x9c>
 80055a6:	4b81      	ldr	r3, [pc, #516]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a80      	ldr	r2, [pc, #512]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	4b7e      	ldr	r3, [pc, #504]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a7d      	ldr	r2, [pc, #500]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e01d      	b.n	80055fc <HAL_RCC_OscConfig+0xd8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCC_OscConfig+0xc0>
 80055ca:	4b78      	ldr	r3, [pc, #480]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a77      	ldr	r2, [pc, #476]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b75      	ldr	r3, [pc, #468]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a74      	ldr	r2, [pc, #464]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e00b      	b.n	80055fc <HAL_RCC_OscConfig+0xd8>
 80055e4:	4b71      	ldr	r3, [pc, #452]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a70      	ldr	r2, [pc, #448]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	4b6e      	ldr	r3, [pc, #440]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6d      	ldr	r2, [pc, #436]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d013      	beq.n	800562c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc ff6a 	bl	80024dc <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560c:	f7fc ff66 	bl	80024dc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e3d4      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800561e:	4b63      	ldr	r3, [pc, #396]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0xe8>
 800562a:	e014      	b.n	8005656 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc ff56 	bl	80024dc <HAL_GetTick>
 8005630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fc ff52 	bl	80024dc <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e3c0      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005646:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x110>
 8005652:	e000      	b.n	8005656 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80ca 	beq.w	80057f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005664:	4b51      	ldr	r3, [pc, #324]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800566c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800566e:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_RCC_OscConfig+0x166>
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2b18      	cmp	r3, #24
 800567e:	d156      	bne.n	800572e <HAL_RCC_OscConfig+0x20a>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d151      	bne.n	800572e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800568a:	4b48      	ldr	r3, [pc, #288]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_RCC_OscConfig+0x17e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e392      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056a2:	4b42      	ldr	r3, [pc, #264]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 0219 	bic.w	r2, r3, #25
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	493f      	ldr	r1, [pc, #252]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fc ff12 	bl	80024dc <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056bc:	f7fc ff0e 	bl	80024dc <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e37c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056da:	f7fc ff2f 	bl	800253c <HAL_GetREVID>
 80056de:	4603      	mov	r3, r0
 80056e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d817      	bhi.n	8005718 <HAL_RCC_OscConfig+0x1f4>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d108      	bne.n	8005702 <HAL_RCC_OscConfig+0x1de>
 80056f0:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80056f8:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005700:	e07a      	b.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005702:	4b2a      	ldr	r3, [pc, #168]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	031b      	lsls	r3, r3, #12
 8005710:	4926      	ldr	r1, [pc, #152]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005712:	4313      	orrs	r3, r2
 8005714:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005716:	e06f      	b.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005718:	4b24      	ldr	r3, [pc, #144]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	061b      	lsls	r3, r3, #24
 8005726:	4921      	ldr	r1, [pc, #132]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800572c:	e064      	b.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d047      	beq.n	80057c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 0219 	bic.w	r2, r3, #25
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	491a      	ldr	r1, [pc, #104]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fc fec8 	bl	80024dc <HAL_GetTick>
 800574c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005750:	f7fc fec4 	bl	80024dc <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e332      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f0      	beq.n	8005750 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576e:	f7fc fee5 	bl	800253c <HAL_GetREVID>
 8005772:	4603      	mov	r3, r0
 8005774:	f241 0203 	movw	r2, #4099	; 0x1003
 8005778:	4293      	cmp	r3, r2
 800577a:	d819      	bhi.n	80057b0 <HAL_RCC_OscConfig+0x28c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d108      	bne.n	8005796 <HAL_RCC_OscConfig+0x272>
 8005784:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800578c:	4a07      	ldr	r2, [pc, #28]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005792:	6053      	str	r3, [r2, #4]
 8005794:	e030      	b.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	031b      	lsls	r3, r3, #12
 80057a4:	4901      	ldr	r1, [pc, #4]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	604b      	str	r3, [r1, #4]
 80057aa:	e025      	b.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
 80057ac:	58024400 	.word	0x58024400
 80057b0:	4b9a      	ldr	r3, [pc, #616]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	4997      	ldr	r1, [pc, #604]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
 80057c4:	e018      	b.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c6:	4b95      	ldr	r3, [pc, #596]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a94      	ldr	r2, [pc, #592]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fc fe83 	bl	80024dc <HAL_GetTick>
 80057d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057da:	f7fc fe7f 	bl	80024dc <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e2ed      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057ec:	4b8b      	ldr	r3, [pc, #556]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80a9 	beq.w	8005958 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005806:	4b85      	ldr	r3, [pc, #532]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800580e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005810:	4b82      	ldr	r3, [pc, #520]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d007      	beq.n	800582c <HAL_RCC_OscConfig+0x308>
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b18      	cmp	r3, #24
 8005820:	d13a      	bne.n	8005898 <HAL_RCC_OscConfig+0x374>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d135      	bne.n	8005898 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800582c:	4b7b      	ldr	r3, [pc, #492]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_OscConfig+0x320>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e2c1      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005844:	f7fc fe7a 	bl	800253c <HAL_GetREVID>
 8005848:	4603      	mov	r3, r0
 800584a:	f241 0203 	movw	r2, #4099	; 0x1003
 800584e:	4293      	cmp	r3, r2
 8005850:	d817      	bhi.n	8005882 <HAL_RCC_OscConfig+0x35e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	2b20      	cmp	r3, #32
 8005858:	d108      	bne.n	800586c <HAL_RCC_OscConfig+0x348>
 800585a:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005862:	4a6e      	ldr	r2, [pc, #440]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005868:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800586a:	e075      	b.n	8005958 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800586c:	4b6b      	ldr	r3, [pc, #428]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	069b      	lsls	r3, r3, #26
 800587a:	4968      	ldr	r1, [pc, #416]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005880:	e06a      	b.n	8005958 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005882:	4b66      	ldr	r3, [pc, #408]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	4962      	ldr	r1, [pc, #392]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005896:	e05f      	b.n	8005958 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d042      	beq.n	8005926 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058a0:	4b5e      	ldr	r3, [pc, #376]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5d      	ldr	r2, [pc, #372]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fc fe16 	bl	80024dc <HAL_GetTick>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058b4:	f7fc fe12 	bl	80024dc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e280      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058c6:	4b55      	ldr	r3, [pc, #340]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058d2:	f7fc fe33 	bl	800253c <HAL_GetREVID>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80058dc:	4293      	cmp	r3, r2
 80058de:	d817      	bhi.n	8005910 <HAL_RCC_OscConfig+0x3ec>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d108      	bne.n	80058fa <HAL_RCC_OscConfig+0x3d6>
 80058e8:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058f0:	4a4a      	ldr	r2, [pc, #296]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80058f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f6:	6053      	str	r3, [r2, #4]
 80058f8:	e02e      	b.n	8005958 <HAL_RCC_OscConfig+0x434>
 80058fa:	4b48      	ldr	r3, [pc, #288]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	069b      	lsls	r3, r3, #26
 8005908:	4944      	ldr	r1, [pc, #272]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800590a:	4313      	orrs	r3, r2
 800590c:	604b      	str	r3, [r1, #4]
 800590e:	e023      	b.n	8005958 <HAL_RCC_OscConfig+0x434>
 8005910:	4b42      	ldr	r3, [pc, #264]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	493f      	ldr	r1, [pc, #252]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
 8005924:	e018      	b.n	8005958 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005926:	4b3d      	ldr	r3, [pc, #244]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3c      	ldr	r2, [pc, #240]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800592c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fc fdd3 	bl	80024dc <HAL_GetTick>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800593a:	f7fc fdcf 	bl	80024dc <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e23d      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800594c:	4b33      	ldr	r3, [pc, #204]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d036      	beq.n	80059d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d019      	beq.n	80059a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 800596e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fc fdb0 	bl	80024dc <HAL_GetTick>
 800597c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fc fdac 	bl	80024dc <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e21a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005992:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x45c>
 800599e:	e018      	b.n	80059d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a0:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fc fd96 	bl	80024dc <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fc fd92 	bl	80024dc <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e200      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80059c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d039      	beq.n	8005a52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059e6:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 80059ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059f2:	f7fc fd73 	bl	80024dc <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059fa:	f7fc fd6f 	bl	80024dc <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e1dd      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a0c:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <HAL_RCC_OscConfig+0x4f8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x4d6>
 8005a18:	e01b      	b.n	8005a52 <HAL_RCC_OscConfig+0x52e>
 8005a1a:	bf00      	nop
 8005a1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a20:	4b9b      	ldr	r3, [pc, #620]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a9a      	ldr	r2, [pc, #616]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a2c:	f7fc fd56 	bl	80024dc <HAL_GetTick>
 8005a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a34:	f7fc fd52 	bl	80024dc <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e1c0      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a46:	4b92      	ldr	r3, [pc, #584]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8081 	beq.w	8005b62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a60:	4b8c      	ldr	r3, [pc, #560]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a8b      	ldr	r2, [pc, #556]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a6c:	f7fc fd36 	bl	80024dc <HAL_GetTick>
 8005a70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a74:	f7fc fd32 	bl	80024dc <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e1a0      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a86:	4b83      	ldr	r3, [pc, #524]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x584>
 8005a9a:	4b7d      	ldr	r3, [pc, #500]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	4a7c      	ldr	r2, [pc, #496]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa6:	e02d      	b.n	8005b04 <HAL_RCC_OscConfig+0x5e0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10c      	bne.n	8005aca <HAL_RCC_OscConfig+0x5a6>
 8005ab0:	4b77      	ldr	r3, [pc, #476]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	4a76      	ldr	r2, [pc, #472]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	6713      	str	r3, [r2, #112]	; 0x70
 8005abc:	4b74      	ldr	r3, [pc, #464]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	4a73      	ldr	r2, [pc, #460]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ac2:	f023 0304 	bic.w	r3, r3, #4
 8005ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac8:	e01c      	b.n	8005b04 <HAL_RCC_OscConfig+0x5e0>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d10c      	bne.n	8005aec <HAL_RCC_OscConfig+0x5c8>
 8005ad2:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4a6e      	ldr	r2, [pc, #440]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ade:	4b6c      	ldr	r3, [pc, #432]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a6b      	ldr	r2, [pc, #428]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0x5e0>
 8005aec:	4b68      	ldr	r3, [pc, #416]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a67      	ldr	r2, [pc, #412]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	4b65      	ldr	r3, [pc, #404]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a64      	ldr	r2, [pc, #400]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005afe:	f023 0304 	bic.w	r3, r3, #4
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d015      	beq.n	8005b38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fce6 	bl	80024dc <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fc fce2 	bl	80024dc <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e14e      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b2a:	4b59      	ldr	r3, [pc, #356]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ee      	beq.n	8005b14 <HAL_RCC_OscConfig+0x5f0>
 8005b36:	e014      	b.n	8005b62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fc fcd0 	bl	80024dc <HAL_GetTick>
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fc fccc 	bl	80024dc <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e138      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b56:	4b4e      	ldr	r3, [pc, #312]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1ee      	bne.n	8005b40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 812d 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b6c:	4b48      	ldr	r3, [pc, #288]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b74:	2b18      	cmp	r3, #24
 8005b76:	f000 80bd 	beq.w	8005cf4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	f040 809e 	bne.w	8005cc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b84:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a41      	ldr	r2, [pc, #260]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc fca4 	bl	80024dc <HAL_GetTick>
 8005b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fc fca0 	bl	80024dc <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e10e      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bba:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <HAL_RCC_OscConfig+0x774>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bc6:	0112      	lsls	r2, r2, #4
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	4931      	ldr	r1, [pc, #196]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	628b      	str	r3, [r1, #40]	; 0x28
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bde:	3b01      	subs	r3, #1
 8005be0:	025b      	lsls	r3, r3, #9
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	3b01      	subs	r3, #1
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	061b      	lsls	r3, r3, #24
 8005bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c00:	4923      	ldr	r1, [pc, #140]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c06:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	4a21      	ldr	r2, [pc, #132]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c12:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c16:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c1e:	00d2      	lsls	r2, r2, #3
 8005c20:	491b      	ldr	r1, [pc, #108]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f023 020c 	bic.w	r2, r3, #12
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	4917      	ldr	r1, [pc, #92]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	f023 0202 	bic.w	r2, r3, #2
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	4912      	ldr	r1, [pc, #72]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	4a10      	ldr	r2, [pc, #64]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	4a0a      	ldr	r2, [pc, #40]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <HAL_RCC_OscConfig+0x76c>)
 8005c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fc fc29 	bl	80024dc <HAL_GetTick>
 8005c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c8c:	e011      	b.n	8005cb2 <HAL_RCC_OscConfig+0x78e>
 8005c8e:	bf00      	nop
 8005c90:	58024400 	.word	0x58024400
 8005c94:	58024800 	.word	0x58024800
 8005c98:	fffffc0c 	.word	0xfffffc0c
 8005c9c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fc fc1c 	bl	80024dc <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e08a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cb2:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x77c>
 8005cbe:	e082      	b.n	8005dc6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc0:	4b43      	ldr	r3, [pc, #268]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fc06 	bl	80024dc <HAL_GetTick>
 8005cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fc02 	bl	80024dc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e070      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ce6:	4b3a      	ldr	r3, [pc, #232]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x7b0>
 8005cf2:	e068      	b.n	8005dc6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005cf4:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d031      	beq.n	8005d6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f003 0203 	and.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d12a      	bne.n	8005d6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d122      	bne.n	8005d6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d11a      	bne.n	8005d6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	0a5b      	lsrs	r3, r3, #9
 8005d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d111      	bne.n	8005d6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d108      	bne.n	8005d6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	0e1b      	lsrs	r3, r3, #24
 8005d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e02b      	b.n	8005dc8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	08db      	lsrs	r3, r3, #3
 8005d76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d01f      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	4a11      	ldr	r2, [pc, #68]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d92:	f7fc fba3 	bl	80024dc <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d98:	bf00      	nop
 8005d9a:	f7fc fb9f 	bl	80024dc <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d0f9      	beq.n	8005d9a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <HAL_RCC_OscConfig+0x8b0>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005db2:	00d2      	lsls	r2, r2, #3
 8005db4:	4906      	ldr	r1, [pc, #24]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_RCC_OscConfig+0x8ac>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3730      	adds	r7, #48	; 0x30
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	ffff0007 	.word	0xffff0007

08005dd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e19c      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dec:	4b8a      	ldr	r3, [pc, #552]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d910      	bls.n	8005e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfa:	4b87      	ldr	r3, [pc, #540]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 020f 	bic.w	r2, r3, #15
 8005e02:	4985      	ldr	r1, [pc, #532]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0a:	4b83      	ldr	r3, [pc, #524]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d001      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e184      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d010      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	4b7b      	ldr	r3, [pc, #492]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d908      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e38:	4b78      	ldr	r3, [pc, #480]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	4975      	ldr	r1, [pc, #468]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d010      	beq.n	8005e78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	4b70      	ldr	r3, [pc, #448]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d908      	bls.n	8005e78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e66:	4b6d      	ldr	r3, [pc, #436]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	496a      	ldr	r1, [pc, #424]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	4b64      	ldr	r3, [pc, #400]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d908      	bls.n	8005ea6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e94:	4b61      	ldr	r3, [pc, #388]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	495e      	ldr	r1, [pc, #376]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d010      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	4b59      	ldr	r3, [pc, #356]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d908      	bls.n	8005ed4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ec2:	4b56      	ldr	r3, [pc, #344]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4953      	ldr	r1, [pc, #332]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	4b4d      	ldr	r3, [pc, #308]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d908      	bls.n	8005f02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef0:	4b4a      	ldr	r3, [pc, #296]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f023 020f 	bic.w	r2, r3, #15
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4947      	ldr	r1, [pc, #284]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d055      	beq.n	8005fba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f0e:	4b43      	ldr	r3, [pc, #268]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4940      	ldr	r1, [pc, #256]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d107      	bne.n	8005f38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f28:	4b3c      	ldr	r3, [pc, #240]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d121      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0f6      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f40:	4b36      	ldr	r3, [pc, #216]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d115      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0ea      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d107      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f58:	4b30      	ldr	r3, [pc, #192]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0de      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f68:	4b2c      	ldr	r3, [pc, #176]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0d6      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f78:	4b28      	ldr	r3, [pc, #160]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f023 0207 	bic.w	r2, r3, #7
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4925      	ldr	r1, [pc, #148]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f8a:	f7fc faa7 	bl	80024dc <HAL_GetTick>
 8005f8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f92:	f7fc faa3 	bl	80024dc <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e0be      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa8:	4b1c      	ldr	r3, [pc, #112]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d1eb      	bne.n	8005f92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d208      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f023 020f 	bic.w	r2, r3, #15
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	490e      	ldr	r1, [pc, #56]	; (800601c <HAL_RCC_ClockConfig+0x244>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d214      	bcs.n	8006020 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 020f 	bic.w	r2, r3, #15
 8005ffe:	4906      	ldr	r1, [pc, #24]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b04      	ldr	r3, [pc, #16]	; (8006018 <HAL_RCC_ClockConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d005      	beq.n	8006020 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e086      	b.n	8006126 <HAL_RCC_ClockConfig+0x34e>
 8006018:	52002000 	.word	0x52002000
 800601c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	4b3f      	ldr	r3, [pc, #252]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006038:	429a      	cmp	r2, r3
 800603a:	d208      	bcs.n	800604e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800603c:	4b3c      	ldr	r3, [pc, #240]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	4939      	ldr	r1, [pc, #228]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 800604a:	4313      	orrs	r3, r2
 800604c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d010      	beq.n	800607c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	4b34      	ldr	r3, [pc, #208]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006066:	429a      	cmp	r2, r3
 8006068:	d208      	bcs.n	800607c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800606a:	4b31      	ldr	r3, [pc, #196]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	492e      	ldr	r1, [pc, #184]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 8006078:	4313      	orrs	r3, r2
 800607a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	4b28      	ldr	r3, [pc, #160]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006094:	429a      	cmp	r2, r3
 8006096:	d208      	bcs.n	80060aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	4922      	ldr	r1, [pc, #136]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d208      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	4917      	ldr	r1, [pc, #92]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060d8:	f000 f89e 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	4912      	ldr	r1, [pc, #72]	; (8006134 <HAL_RCC_ClockConfig+0x35c>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <HAL_RCC_ClockConfig+0x358>)
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	4a0d      	ldr	r2, [pc, #52]	; (8006134 <HAL_RCC_ClockConfig+0x35c>)
 8006100:	5cd3      	ldrb	r3, [r2, r3]
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
 800610c:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <HAL_RCC_ClockConfig+0x360>)
 800610e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006110:	4a0a      	ldr	r2, [pc, #40]	; (800613c <HAL_RCC_ClockConfig+0x364>)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_RCC_ClockConfig+0x368>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc f994 	bl	8002448 <HAL_InitTick>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	58024400 	.word	0x58024400
 8006134:	0800b2b8 	.word	0x0800b2b8
 8006138:	24000004 	.word	0x24000004
 800613c:	24000000 	.word	0x24000000
 8006140:	24000008 	.word	0x24000008

08006144 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d12a      	bne.n	80061ac <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006156:	4b2d      	ldr	r3, [pc, #180]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 8006158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800615c:	4a2b      	ldr	r2, [pc, #172]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006166:	4b29      	ldr	r3, [pc, #164]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 8006168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617a:	2302      	movs	r3, #2
 800617c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800617e:	2303      	movs	r3, #3
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006186:	2300      	movs	r3, #0
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800618a:	f107 031c 	add.w	r3, r7, #28
 800618e:	4619      	mov	r1, r3
 8006190:	481f      	ldr	r0, [pc, #124]	; (8006210 <HAL_RCC_MCOConfig+0xcc>)
 8006192:	f7fe f8b3 	bl	80042fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	430b      	orrs	r3, r1
 80061a4:	4919      	ldr	r1, [pc, #100]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80061aa:	e02a      	b.n	8006202 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80061ac:	4b17      	ldr	r3, [pc, #92]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 80061ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061b2:	4a16      	ldr	r2, [pc, #88]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 80061b4:	f043 0304 	orr.w	r3, r3, #4
 80061b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061bc:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 80061be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80061ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d0:	2302      	movs	r3, #2
 80061d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d4:	2303      	movs	r3, #3
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80061dc:	2300      	movs	r3, #0
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80061e0:	f107 031c 	add.w	r3, r7, #28
 80061e4:	4619      	mov	r1, r3
 80061e6:	480b      	ldr	r0, [pc, #44]	; (8006214 <HAL_RCC_MCOConfig+0xd0>)
 80061e8:	f7fe f888 	bl	80042fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	01d9      	lsls	r1, r3, #7
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	430b      	orrs	r3, r1
 80061fc:	4903      	ldr	r1, [pc, #12]	; (800620c <HAL_RCC_MCOConfig+0xc8>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	610b      	str	r3, [r1, #16]
}
 8006202:	bf00      	nop
 8006204:	3730      	adds	r7, #48	; 0x30
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	58024400 	.word	0x58024400
 8006210:	58020000 	.word	0x58020000
 8006214:	58020800 	.word	0x58020800

08006218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800621e:	4bb3      	ldr	r3, [pc, #716]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006226:	2b18      	cmp	r3, #24
 8006228:	f200 8155 	bhi.w	80064d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <HAL_RCC_GetSysClockFreq+0x1c>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006299 	.word	0x08006299
 8006238:	080064d7 	.word	0x080064d7
 800623c:	080064d7 	.word	0x080064d7
 8006240:	080064d7 	.word	0x080064d7
 8006244:	080064d7 	.word	0x080064d7
 8006248:	080064d7 	.word	0x080064d7
 800624c:	080064d7 	.word	0x080064d7
 8006250:	080064d7 	.word	0x080064d7
 8006254:	080062bf 	.word	0x080062bf
 8006258:	080064d7 	.word	0x080064d7
 800625c:	080064d7 	.word	0x080064d7
 8006260:	080064d7 	.word	0x080064d7
 8006264:	080064d7 	.word	0x080064d7
 8006268:	080064d7 	.word	0x080064d7
 800626c:	080064d7 	.word	0x080064d7
 8006270:	080064d7 	.word	0x080064d7
 8006274:	080062c5 	.word	0x080062c5
 8006278:	080064d7 	.word	0x080064d7
 800627c:	080064d7 	.word	0x080064d7
 8006280:	080064d7 	.word	0x080064d7
 8006284:	080064d7 	.word	0x080064d7
 8006288:	080064d7 	.word	0x080064d7
 800628c:	080064d7 	.word	0x080064d7
 8006290:	080064d7 	.word	0x080064d7
 8006294:	080062cb 	.word	0x080062cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006298:	4b94      	ldr	r3, [pc, #592]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062a4:	4b91      	ldr	r3, [pc, #580]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	4a90      	ldr	r2, [pc, #576]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062b6:	e111      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062b8:	4b8d      	ldr	r3, [pc, #564]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062ba:	61bb      	str	r3, [r7, #24]
      break;
 80062bc:	e10e      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062be:	4b8d      	ldr	r3, [pc, #564]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062c0:	61bb      	str	r3, [r7, #24]
      break;
 80062c2:	e10b      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80062c4:	4b8c      	ldr	r3, [pc, #560]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062c6:	61bb      	str	r3, [r7, #24]
      break;
 80062c8:	e108      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ca:	4b88      	ldr	r3, [pc, #544]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062d4:	4b85      	ldr	r3, [pc, #532]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062e0:	4b82      	ldr	r3, [pc, #520]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062ea:	4b80      	ldr	r3, [pc, #512]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	08db      	lsrs	r3, r3, #3
 80062f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80e1 	beq.w	80064d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b02      	cmp	r3, #2
 8006312:	f000 8083 	beq.w	800641c <HAL_RCC_GetSysClockFreq+0x204>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b02      	cmp	r3, #2
 800631a:	f200 80a1 	bhi.w	8006460 <HAL_RCC_GetSysClockFreq+0x248>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x114>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d056      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800632a:	e099      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632c:	4b6f      	ldr	r3, [pc, #444]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d02d      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006338:	4b6c      	ldr	r3, [pc, #432]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	4a6b      	ldr	r2, [pc, #428]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006362:	4b62      	ldr	r3, [pc, #392]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a02 	vldr	s12, [r7, #8]
 8006376:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006392:	e087      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006500 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a6:	4b51      	ldr	r3, [pc, #324]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80063be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063d6:	e065      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006504 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b40      	ldr	r3, [pc, #256]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800641a:	e043      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006508 <HAL_RCC_GetSysClockFreq+0x2f0>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006442:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645e:	e021      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006504 <HAL_RCC_GetSysClockFreq+0x2ec>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a02 	vldr	s12, [r7, #8]
 8006486:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064a4:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	0a5b      	lsrs	r3, r3, #9
 80064aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ae:	3301      	adds	r3, #1
 80064b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c8:	ee17 3a90 	vmov	r3, s15
 80064cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064ce:	e005      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
      break;
 80064d4:	e002      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064d8:	61bb      	str	r3, [r7, #24]
      break;
 80064da:	bf00      	nop
  }

  return sysclockfreq;
 80064dc:	69bb      	ldr	r3, [r7, #24]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3724      	adds	r7, #36	; 0x24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
 80064f0:	03d09000 	.word	0x03d09000
 80064f4:	003d0900 	.word	0x003d0900
 80064f8:	017d7840 	.word	0x017d7840
 80064fc:	46000000 	.word	0x46000000
 8006500:	4c742400 	.word	0x4c742400
 8006504:	4a742400 	.word	0x4a742400
 8006508:	4bbebc20 	.word	0x4bbebc20

0800650c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006512:	f7ff fe81 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_RCC_GetHCLKFreq+0x50>)
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490f      	ldr	r1, [pc, #60]	; (8006560 <HAL_RCC_GetHCLKFreq+0x54>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	fa22 f303 	lsr.w	r3, r2, r3
 800652e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_RCC_GetHCLKFreq+0x50>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <HAL_RCC_GetHCLKFreq+0x54>)
 800653a:	5cd3      	ldrb	r3, [r2, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	4a07      	ldr	r2, [pc, #28]	; (8006564 <HAL_RCC_GetHCLKFreq+0x58>)
 8006548:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800654a:	4a07      	ldr	r2, [pc, #28]	; (8006568 <HAL_RCC_GetHCLKFreq+0x5c>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006550:	4b04      	ldr	r3, [pc, #16]	; (8006564 <HAL_RCC_GetHCLKFreq+0x58>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	58024400 	.word	0x58024400
 8006560:	0800b2b8 	.word	0x0800b2b8
 8006564:	24000004 	.word	0x24000004
 8006568:	24000000 	.word	0x24000000

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006570:	f7ff ffcc 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4904      	ldr	r1, [pc, #16]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	58024400 	.word	0x58024400
 8006594:	0800b2b8 	.word	0x0800b2b8

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800659c:	f7ff ffb6 	bl	800650c <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4904      	ldr	r1, [pc, #16]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	58024400 	.word	0x58024400
 80065c0:	0800b2b8 	.word	0x0800b2b8

080065c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c8:	b0ca      	sub	sp, #296	; 0x128
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80065e8:	2500      	movs	r5, #0
 80065ea:	ea54 0305 	orrs.w	r3, r4, r5
 80065ee:	d049      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065fa:	d02f      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80065fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006600:	d828      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006606:	d01a      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800660c:	d822      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006616:	d007      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006618:	e01c      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661a:	4bb8      	ldr	r3, [pc, #736]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4ab7      	ldr	r2, [pc, #732]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006624:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006626:	e01a      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662c:	3308      	adds	r3, #8
 800662e:	2102      	movs	r1, #2
 8006630:	4618      	mov	r0, r3
 8006632:	f002 fb61 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800663c:	e00f      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006642:	3328      	adds	r3, #40	; 0x28
 8006644:	2102      	movs	r1, #2
 8006646:	4618      	mov	r0, r3
 8006648:	f002 fc08 	bl	8008e5c <RCCEx_PLL3_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006652:	e004      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800665c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006666:	4ba5      	ldr	r3, [pc, #660]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006674:	4aa1      	ldr	r2, [pc, #644]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6513      	str	r3, [r2, #80]	; 0x50
 800667a:	e003      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006690:	f04f 0900 	mov.w	r9, #0
 8006694:	ea58 0309 	orrs.w	r3, r8, r9
 8006698:	d047      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d82a      	bhi.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066c1 	.word	0x080066c1
 80066b0:	080066cf 	.word	0x080066cf
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	08006703 	.word	0x08006703
 80066bc:	08006703 	.word	0x08006703
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c0:	4b8e      	ldr	r3, [pc, #568]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	4a8d      	ldr	r2, [pc, #564]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066cc:	e01a      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d2:	3308      	adds	r3, #8
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f002 fb0e 	bl	8008cf8 <RCCEx_PLL2_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066e2:	e00f      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e8:	3328      	adds	r3, #40	; 0x28
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f002 fbb5 	bl	8008e5c <RCCEx_PLL3_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066f8:	e004      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800670c:	4b7b      	ldr	r3, [pc, #492]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	f023 0107 	bic.w	r1, r3, #7
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4a78      	ldr	r2, [pc, #480]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800671c:	430b      	orrs	r3, r1
 800671e:	6513      	str	r3, [r2, #80]	; 0x50
 8006720:	e003      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006736:	f04f 0b00 	mov.w	fp, #0
 800673a:	ea5a 030b 	orrs.w	r3, sl, fp
 800673e:	d04c      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674a:	d030      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800674c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006750:	d829      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006752:	2bc0      	cmp	r3, #192	; 0xc0
 8006754:	d02d      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006756:	2bc0      	cmp	r3, #192	; 0xc0
 8006758:	d825      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d018      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d821      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d007      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800676a:	e01c      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800676c:	4b63      	ldr	r3, [pc, #396]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a62      	ldr	r2, [pc, #392]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006778:	e01c      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800677e:	3308      	adds	r3, #8
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f002 fab8 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800678e:	e011      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006794:	3328      	adds	r3, #40	; 0x28
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f002 fb5f 	bl	8008e5c <RCCEx_PLL3_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80067a4:	e006      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80067b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80067bc:	4b4f      	ldr	r3, [pc, #316]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ca:	4a4c      	ldr	r2, [pc, #304]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6513      	str	r3, [r2, #80]	; 0x50
 80067d0:	e003      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80067e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067ea:	2300      	movs	r3, #0
 80067ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80067f4:	460b      	mov	r3, r1
 80067f6:	4313      	orrs	r3, r2
 80067f8:	d053      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006806:	d035      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800680c:	d82e      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800680e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006812:	d031      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006814:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006818:	d828      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800681a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681e:	d01a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006824:	d822      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800682a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800682e:	d007      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006830:	e01c      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006832:	4b32      	ldr	r3, [pc, #200]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	4a31      	ldr	r2, [pc, #196]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800683e:	e01c      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006844:	3308      	adds	r3, #8
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f002 fa55 	bl	8008cf8 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006854:	e011      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685a:	3328      	adds	r3, #40	; 0x28
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f002 fafc 	bl	8008e5c <RCCEx_PLL3_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800686a:	e006      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006882:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006886:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006892:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6593      	str	r3, [r2, #88]	; 0x58
 8006898:	e003      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80068ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d056      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ce:	d038      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80068d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068d4:	d831      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068da:	d034      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80068dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068e0:	d82b      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e6:	d01d      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80068e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ec:	d825      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d006      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80068f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068f6:	d00a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068f8:	e01f      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068fa:	bf00      	nop
 80068fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006900:	4ba2      	ldr	r3, [pc, #648]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	4aa1      	ldr	r2, [pc, #644]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800690c:	e01c      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006912:	3308      	adds	r3, #8
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f002 f9ee 	bl	8008cf8 <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006922:	e011      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006928:	3328      	adds	r3, #40	; 0x28
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f002 fa95 	bl	8008e5c <RCCEx_PLL3_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006938:	e006      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006950:	4b8e      	ldr	r3, [pc, #568]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006960:	4a8a      	ldr	r2, [pc, #552]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006962:	430b      	orrs	r3, r1
 8006964:	6593      	str	r3, [r2, #88]	; 0x58
 8006966:	e003      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800696c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800697c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006980:	2300      	movs	r3, #0
 8006982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006986:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d03a      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	2b30      	cmp	r3, #48	; 0x30
 8006998:	d01f      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800699a:	2b30      	cmp	r3, #48	; 0x30
 800699c:	d819      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d00c      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d815      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d019      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d111      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ae:	4b77      	ldr	r3, [pc, #476]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	4a76      	ldr	r2, [pc, #472]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80069ba:	e011      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	3308      	adds	r3, #8
 80069c2:	2102      	movs	r1, #2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f002 f997 	bl	8008cf8 <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80069d0:	e006      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069d8:	e002      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80069de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069e8:	4b68      	ldr	r3, [pc, #416]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f6:	4a65      	ldr	r2, [pc, #404]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006a12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a16:	2300      	movs	r3, #0
 8006a18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a1c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d051      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a30:	d035      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a36:	d82e      	bhi.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a3c:	d031      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a42:	d828      	bhi.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a48:	d01a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4e:	d822      	bhi.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a58:	d007      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006a5a:	e01c      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a5c:	4b4b      	ldr	r3, [pc, #300]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a4a      	ldr	r2, [pc, #296]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a68:	e01c      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6e:	3308      	adds	r3, #8
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f002 f940 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a7e:	e011      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a84:	3328      	adds	r3, #40	; 0x28
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 f9e7 	bl	8008e5c <RCCEx_PLL3_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a94:	e006      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a9c:	e002      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006aac:	4b37      	ldr	r3, [pc, #220]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aba:	4a34      	ldr	r2, [pc, #208]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6513      	str	r3, [r2, #80]	; 0x50
 8006ac0:	e003      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ae0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	d056      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af4:	d033      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006afa:	d82c      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b00:	d02f      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006b02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b06:	d826      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b0c:	d02b      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b12:	d820      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b18:	d012      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b1e:	d81a      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d022      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b28:	d115      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b2e:	3308      	adds	r3, #8
 8006b30:	2101      	movs	r1, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f002 f8e0 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b3e:	e015      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b44:	3328      	adds	r3, #40	; 0x28
 8006b46:	2101      	movs	r1, #1
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f002 f987 	bl	8008e5c <RCCEx_PLL3_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b54:	e00a      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b5c:	e006      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b5e:	bf00      	nop
 8006b60:	e004      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b62:	bf00      	nop
 8006b64:	e002      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b66:	bf00      	nop
 8006b68:	e000      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10d      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b82:	4a02      	ldr	r2, [pc, #8]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6513      	str	r3, [r2, #80]	; 0x50
 8006b88:	e006      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b8a:	bf00      	nop
 8006b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d055      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bc4:	d033      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bca:	d82c      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd0:	d02f      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd6:	d826      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bdc:	d02b      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006bde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006be2:	d820      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be8:	d012      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bee:	d81a      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d022      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf8:	d115      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bfe:	3308      	adds	r3, #8
 8006c00:	2101      	movs	r1, #1
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 f878 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c0e:	e015      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c14:	3328      	adds	r3, #40	; 0x28
 8006c16:	2101      	movs	r1, #1
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f002 f91f 	bl	8008e5c <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c24:	e00a      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c2c:	e006      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c2e:	bf00      	nop
 8006c30:	e004      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c44:	4ba3      	ldr	r3, [pc, #652]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c54:	4a9f      	ldr	r2, [pc, #636]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5a:	e003      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d037      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c8e:	d00e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c94:	d816      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d018      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c9e:	d111      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca0:	4b8c      	ldr	r3, [pc, #560]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4a8b      	ldr	r2, [pc, #556]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006cac:	e00f      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f002 f81e 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cd6:	4b7f      	ldr	r3, [pc, #508]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce4:	4a7b      	ldr	r2, [pc, #492]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	6513      	str	r3, [r2, #80]	; 0x50
 8006cea:	e003      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d04:	2300      	movs	r3, #0
 8006d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4313      	orrs	r3, r2
 8006d12:	d039      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d81c      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006d1e:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d61 	.word	0x08006d61
 8006d28:	08006d35 	.word	0x08006d35
 8006d2c:	08006d43 	.word	0x08006d43
 8006d30:	08006d61 	.word	0x08006d61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d34:	4b67      	ldr	r3, [pc, #412]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	4a66      	ldr	r2, [pc, #408]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d40:	e00f      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d46:	3308      	adds	r3, #8
 8006d48:	2102      	movs	r1, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 ffd4 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d56:	e004      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d6a:	4b5a      	ldr	r3, [pc, #360]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6e:	f023 0103 	bic.w	r1, r3, #3
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d78:	4a56      	ldr	r2, [pc, #344]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d7e:	e003      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006d94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006da2:	460b      	mov	r3, r1
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f000 809f 	beq.w	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006daa:	4b4b      	ldr	r3, [pc, #300]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4a      	ldr	r2, [pc, #296]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006db6:	f7fb fb91 	bl	80024dc <HAL_GetTick>
 8006dba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dbe:	e00b      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc0:	f7fb fb8c 	bl	80024dc <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b64      	cmp	r3, #100	; 0x64
 8006dce:	d903      	bls.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dd6:	e005      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dd8:	4b3f      	ldr	r3, [pc, #252]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0ed      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d179      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006dec:	4b39      	ldr	r3, [pc, #228]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df8:	4053      	eors	r3, r2
 8006dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d015      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e02:	4b34      	ldr	r3, [pc, #208]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e0e:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a30      	ldr	r2, [pc, #192]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a2d      	ldr	r2, [pc, #180]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e26:	4a2b      	ldr	r2, [pc, #172]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d118      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fb fb4e 	bl	80024dc <HAL_GetTick>
 8006e40:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e44:	e00d      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e46:	f7fb fb49 	bl	80024dc <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d903      	bls.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006e60:	e005      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0eb      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d129      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e86:	d10e      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006e88:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e98:	091a      	lsrs	r2, r3, #4
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	4a0d      	ldr	r2, [pc, #52]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6113      	str	r3, [r2, #16]
 8006ea4:	e005      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006eb0:	6113      	str	r3, [r2, #16]
 8006eb2:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec2:	4a04      	ldr	r2, [pc, #16]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec8:	e00e      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ece:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006ed2:	e009      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	58024800 	.word	0x58024800
 8006edc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f002 0301 	and.w	r3, r2, #1
 8006ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006efe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f000 8089 	beq.w	800701c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f10:	2b28      	cmp	r3, #40	; 0x28
 8006f12:	d86b      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006ff5 	.word	0x08006ff5
 8006f20:	08006fed 	.word	0x08006fed
 8006f24:	08006fed 	.word	0x08006fed
 8006f28:	08006fed 	.word	0x08006fed
 8006f2c:	08006fed 	.word	0x08006fed
 8006f30:	08006fed 	.word	0x08006fed
 8006f34:	08006fed 	.word	0x08006fed
 8006f38:	08006fed 	.word	0x08006fed
 8006f3c:	08006fc1 	.word	0x08006fc1
 8006f40:	08006fed 	.word	0x08006fed
 8006f44:	08006fed 	.word	0x08006fed
 8006f48:	08006fed 	.word	0x08006fed
 8006f4c:	08006fed 	.word	0x08006fed
 8006f50:	08006fed 	.word	0x08006fed
 8006f54:	08006fed 	.word	0x08006fed
 8006f58:	08006fed 	.word	0x08006fed
 8006f5c:	08006fd7 	.word	0x08006fd7
 8006f60:	08006fed 	.word	0x08006fed
 8006f64:	08006fed 	.word	0x08006fed
 8006f68:	08006fed 	.word	0x08006fed
 8006f6c:	08006fed 	.word	0x08006fed
 8006f70:	08006fed 	.word	0x08006fed
 8006f74:	08006fed 	.word	0x08006fed
 8006f78:	08006fed 	.word	0x08006fed
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08006fed 	.word	0x08006fed
 8006f84:	08006fed 	.word	0x08006fed
 8006f88:	08006fed 	.word	0x08006fed
 8006f8c:	08006fed 	.word	0x08006fed
 8006f90:	08006fed 	.word	0x08006fed
 8006f94:	08006fed 	.word	0x08006fed
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006ff5 	.word	0x08006ff5
 8006fa0:	08006fed 	.word	0x08006fed
 8006fa4:	08006fed 	.word	0x08006fed
 8006fa8:	08006fed 	.word	0x08006fed
 8006fac:	08006fed 	.word	0x08006fed
 8006fb0:	08006fed 	.word	0x08006fed
 8006fb4:	08006fed 	.word	0x08006fed
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	08006ff5 	.word	0x08006ff5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fe95 	bl	8008cf8 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	3328      	adds	r3, #40	; 0x28
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 ff3c 	bl	8008e5c <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ffe:	4bbf      	ldr	r3, [pc, #764]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700c:	4abb      	ldr	r2, [pc, #748]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800700e:	430b      	orrs	r3, r1
 8007010:	6553      	str	r3, [r2, #84]	; 0x54
 8007012:	e003      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f002 0302 	and.w	r3, r2, #2
 8007028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007032:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d041      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007042:	2b05      	cmp	r3, #5
 8007044:	d824      	bhi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007099 	.word	0x08007099
 8007050:	08007065 	.word	0x08007065
 8007054:	0800707b 	.word	0x0800707b
 8007058:	08007099 	.word	0x08007099
 800705c:	08007099 	.word	0x08007099
 8007060:	08007099 	.word	0x08007099
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007068:	3308      	adds	r3, #8
 800706a:	2101      	movs	r1, #1
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fe43 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007078:	e00f      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707e:	3328      	adds	r3, #40	; 0x28
 8007080:	2101      	movs	r1, #1
 8007082:	4618      	mov	r0, r3
 8007084:	f001 feea 	bl	8008e5c <RCCEx_PLL3_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800708e:	e004      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007096:	e000      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070a2:	4b96      	ldr	r3, [pc, #600]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	f023 0107 	bic.w	r1, r3, #7
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070b0:	4a92      	ldr	r2, [pc, #584]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070b2:	430b      	orrs	r3, r1
 80070b4:	6553      	str	r3, [r2, #84]	; 0x54
 80070b6:	e003      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f002 0304 	and.w	r3, r2, #4
 80070cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d0:	2300      	movs	r3, #0
 80070d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80070da:	460b      	mov	r3, r1
 80070dc:	4313      	orrs	r3, r2
 80070de:	d044      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80070e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e8:	2b05      	cmp	r3, #5
 80070ea:	d825      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007141 	.word	0x08007141
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	08007123 	.word	0x08007123
 8007100:	08007141 	.word	0x08007141
 8007104:	08007141 	.word	0x08007141
 8007108:	08007141 	.word	0x08007141
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007110:	3308      	adds	r3, #8
 8007112:	2101      	movs	r1, #1
 8007114:	4618      	mov	r0, r3
 8007116:	f001 fdef 	bl	8008cf8 <RCCEx_PLL2_Config>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007120:	e00f      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007126:	3328      	adds	r3, #40	; 0x28
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f001 fe96 	bl	8008e5c <RCCEx_PLL3_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007136:	e004      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800713e:	e000      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800714a:	4b6c      	ldr	r3, [pc, #432]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f023 0107 	bic.w	r1, r3, #7
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800715a:	4a68      	ldr	r2, [pc, #416]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800715c:	430b      	orrs	r3, r1
 800715e:	6593      	str	r3, [r2, #88]	; 0x58
 8007160:	e003      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f002 0320 	and.w	r3, r2, #32
 8007176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800717a:	2300      	movs	r3, #0
 800717c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d055      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007196:	d033      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800719c:	d82c      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800719e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a2:	d02f      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a8:	d826      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ae:	d02b      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80071b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071b4:	d820      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ba:	d012      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80071bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071c0:	d81a      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d022      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80071c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ca:	d115      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d0:	3308      	adds	r3, #8
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 fd8f 	bl	8008cf8 <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80071e0:	e015      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e6:	3328      	adds	r3, #40	; 0x28
 80071e8:	2102      	movs	r1, #2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fe36 	bl	8008e5c <RCCEx_PLL3_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80071f6:	e00a      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071fe:	e006      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007200:	bf00      	nop
 8007202:	e004      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007204:	bf00      	nop
 8007206:	e002      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800720c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007216:	4b39      	ldr	r3, [pc, #228]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	4a35      	ldr	r2, [pc, #212]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007228:	430b      	orrs	r3, r1
 800722a:	6553      	str	r3, [r2, #84]	; 0x54
 800722c:	e003      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007246:	2300      	movs	r3, #0
 8007248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800724c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d058      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800725e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007262:	d033      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007264:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007268:	d82c      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800726a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726e:	d02f      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007274:	d826      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007276:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800727a:	d02b      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800727c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007280:	d820      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007286:	d012      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728c:	d81a      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d022      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007296:	d115      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729c:	3308      	adds	r3, #8
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 fd29 	bl	8008cf8 <RCCEx_PLL2_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80072ac:	e015      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b2:	3328      	adds	r3, #40	; 0x28
 80072b4:	2102      	movs	r1, #2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 fdd0 	bl	8008e5c <RCCEx_PLL3_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80072c2:	e00a      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072ca:	e006      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072cc:	bf00      	nop
 80072ce:	e004      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072d0:	bf00      	nop
 80072d2:	e002      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10e      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072f2:	4a02      	ldr	r2, [pc, #8]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6593      	str	r3, [r2, #88]	; 0x58
 80072f8:	e006      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80072fa:	bf00      	nop
 80072fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007304:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800731e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d055      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007330:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007334:	d033      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007336:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800733a:	d82c      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007340:	d02f      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007346:	d826      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007348:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800734c:	d02b      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800734e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007352:	d820      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007358:	d012      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800735a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735e:	d81a      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d022      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007368:	d115      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736e:	3308      	adds	r3, #8
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fcc0 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800737e:	e015      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	3328      	adds	r3, #40	; 0x28
 8007386:	2102      	movs	r1, #2
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fd67 	bl	8008e5c <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007394:	e00a      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800739c:	e006      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800739e:	bf00      	nop
 80073a0:	e004      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073a2:	bf00      	nop
 80073a4:	e002      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80073aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10b      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073b4:	4ba1      	ldr	r3, [pc, #644]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073c4:	4a9d      	ldr	r2, [pc, #628]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073c6:	430b      	orrs	r3, r1
 80073c8:	6593      	str	r3, [r2, #88]	; 0x58
 80073ca:	e003      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f002 0308 	and.w	r3, r2, #8
 80073e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80073ee:	460b      	mov	r3, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	d01e      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007400:	d10c      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007406:	3328      	adds	r3, #40	; 0x28
 8007408:	2102      	movs	r1, #2
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fd26 	bl	8008e5c <RCCEx_PLL3_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800741c:	4b87      	ldr	r3, [pc, #540]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800742c:	4a83      	ldr	r2, [pc, #524]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800742e:	430b      	orrs	r3, r1
 8007430:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f002 0310 	and.w	r3, r2, #16
 800743e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007442:	2300      	movs	r3, #0
 8007444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007448:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800744c:	460b      	mov	r3, r1
 800744e:	4313      	orrs	r3, r2
 8007450:	d01e      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800745a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745e:	d10c      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007464:	3328      	adds	r3, #40	; 0x28
 8007466:	2102      	movs	r1, #2
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fcf7 	bl	8008e5c <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800747a:	4b70      	ldr	r3, [pc, #448]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800748a:	4a6c      	ldr	r2, [pc, #432]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800748c:	430b      	orrs	r3, r1
 800748e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800749c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80074aa:	460b      	mov	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	d03e      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074bc:	d022      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80074be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074c2:	d81b      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d00b      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80074ce:	e015      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d4:	3308      	adds	r3, #8
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fc0d 	bl	8008cf8 <RCCEx_PLL2_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074e4:	e00f      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ea:	3328      	adds	r3, #40	; 0x28
 80074ec:	2102      	movs	r1, #2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fcb4 	bl	8008e5c <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074fa:	e004      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007502:	e000      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800750e:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007512:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800751e:	4a47      	ldr	r2, [pc, #284]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007520:	430b      	orrs	r3, r1
 8007522:	6593      	str	r3, [r2, #88]	; 0x58
 8007524:	e003      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800753a:	67bb      	str	r3, [r7, #120]	; 0x78
 800753c:	2300      	movs	r3, #0
 800753e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007540:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007544:	460b      	mov	r3, r1
 8007546:	4313      	orrs	r3, r2
 8007548:	d03b      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007556:	d01f      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800755c:	d818      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007562:	d003      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007568:	d007      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800756a:	e011      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756c:	4b33      	ldr	r3, [pc, #204]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007578:	e00f      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800757e:	3328      	adds	r3, #40	; 0x28
 8007580:	2101      	movs	r1, #1
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fc6a 	bl	8008e5c <RCCEx_PLL3_Config>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800758e:	e004      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007596:	e000      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075a2:	4b26      	ldr	r3, [pc, #152]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	4a22      	ldr	r2, [pc, #136]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6553      	str	r3, [r2, #84]	; 0x54
 80075b8:	e003      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80075ce:	673b      	str	r3, [r7, #112]	; 0x70
 80075d0:	2300      	movs	r3, #0
 80075d2:	677b      	str	r3, [r7, #116]	; 0x74
 80075d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80075d8:	460b      	mov	r3, r1
 80075da:	4313      	orrs	r3, r2
 80075dc:	d034      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d007      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80075ee:	e011      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f0:	4b12      	ldr	r3, [pc, #72]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a11      	ldr	r2, [pc, #68]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075fc:	e00e      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007602:	3308      	adds	r3, #8
 8007604:	2102      	movs	r1, #2
 8007606:	4618      	mov	r0, r3
 8007608:	f001 fb76 	bl	8008cf8 <RCCEx_PLL2_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007612:	e003      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800761a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10d      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007624:	4b05      	ldr	r3, [pc, #20]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800762c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	4a02      	ldr	r2, [pc, #8]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007634:	430b      	orrs	r3, r1
 8007636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007638:	e006      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800763a:	bf00      	nop
 800763c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007644:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007654:	66bb      	str	r3, [r7, #104]	; 0x68
 8007656:	2300      	movs	r3, #0
 8007658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800765a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800765e:	460b      	mov	r3, r1
 8007660:	4313      	orrs	r3, r2
 8007662:	d00c      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007668:	3328      	adds	r3, #40	; 0x28
 800766a:	2102      	movs	r1, #2
 800766c:	4618      	mov	r0, r3
 800766e:	f001 fbf5 	bl	8008e5c <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800768a:	663b      	str	r3, [r7, #96]	; 0x60
 800768c:	2300      	movs	r3, #0
 800768e:	667b      	str	r3, [r7, #100]	; 0x64
 8007690:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007694:	460b      	mov	r3, r1
 8007696:	4313      	orrs	r3, r2
 8007698:	d038      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076a6:	d018      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80076a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ac:	d811      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80076ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b2:	d014      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80076b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b8:	d80b      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80076be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c2:	d106      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	4bc3      	ldr	r3, [pc, #780]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4ac2      	ldr	r2, [pc, #776]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80076d0:	e008      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076d8:	e004      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80076da:	bf00      	nop
 80076dc:	e002      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80076de:	bf00      	nop
 80076e0:	e000      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80076e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ec:	4bb9      	ldr	r3, [pc, #740]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fc:	4ab5      	ldr	r2, [pc, #724]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076fe:	430b      	orrs	r3, r1
 8007700:	6553      	str	r3, [r2, #84]	; 0x54
 8007702:	e003      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007718:	65bb      	str	r3, [r7, #88]	; 0x58
 800771a:	2300      	movs	r3, #0
 800771c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800771e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007722:	460b      	mov	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	d009      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007728:	4baa      	ldr	r3, [pc, #680]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	4aa7      	ldr	r2, [pc, #668]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007738:	430b      	orrs	r3, r1
 800773a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007748:	653b      	str	r3, [r7, #80]	; 0x50
 800774a:	2300      	movs	r3, #0
 800774c:	657b      	str	r3, [r7, #84]	; 0x54
 800774e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007752:	460b      	mov	r3, r1
 8007754:	4313      	orrs	r3, r2
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007758:	4b9e      	ldr	r3, [pc, #632]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007764:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007768:	4a9a      	ldr	r2, [pc, #616]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800776a:	430b      	orrs	r3, r1
 800776c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800777a:	64bb      	str	r3, [r7, #72]	; 0x48
 800777c:	2300      	movs	r3, #0
 800777e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007780:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007784:	460b      	mov	r3, r1
 8007786:	4313      	orrs	r3, r2
 8007788:	d009      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800778a:	4b92      	ldr	r3, [pc, #584]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800778c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007798:	4a8e      	ldr	r2, [pc, #568]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800779a:	430b      	orrs	r3, r1
 800779c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80077aa:	643b      	str	r3, [r7, #64]	; 0x40
 80077ac:	2300      	movs	r3, #0
 80077ae:	647b      	str	r3, [r7, #68]	; 0x44
 80077b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077ba:	4b86      	ldr	r3, [pc, #536]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	4a85      	ldr	r2, [pc, #532]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077c4:	6113      	str	r3, [r2, #16]
 80077c6:	4b83      	ldr	r3, [pc, #524]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077c8:	6919      	ldr	r1, [r3, #16]
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077d2:	4a80      	ldr	r2, [pc, #512]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80077e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80077e6:	2300      	movs	r3, #0
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80077ee:	460b      	mov	r3, r1
 80077f0:	4313      	orrs	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077f4:	4b77      	ldr	r3, [pc, #476]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	4a74      	ldr	r2, [pc, #464]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007804:	430b      	orrs	r3, r1
 8007806:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007814:	633b      	str	r3, [r7, #48]	; 0x30
 8007816:	2300      	movs	r3, #0
 8007818:	637b      	str	r3, [r7, #52]	; 0x34
 800781a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800781e:	460b      	mov	r3, r1
 8007820:	4313      	orrs	r3, r2
 8007822:	d00a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007824:	4b6b      	ldr	r3, [pc, #428]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007834:	4a67      	ldr	r2, [pc, #412]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007836:	430b      	orrs	r3, r1
 8007838:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	2100      	movs	r1, #0
 8007844:	62b9      	str	r1, [r7, #40]	; 0x28
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007850:	460b      	mov	r3, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	d011      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785a:	3308      	adds	r3, #8
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fa4a 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800786a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	2100      	movs	r1, #0
 8007884:	6239      	str	r1, [r7, #32]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
 800788c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007890:	460b      	mov	r3, r1
 8007892:	4313      	orrs	r3, r2
 8007894:	d011      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789a:	3308      	adds	r3, #8
 800789c:	2101      	movs	r1, #1
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 fa2a 	bl	8008cf8 <RCCEx_PLL2_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80078aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	2100      	movs	r1, #0
 80078c4:	61b9      	str	r1, [r7, #24]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80078d0:	460b      	mov	r3, r1
 80078d2:	4313      	orrs	r3, r2
 80078d4:	d011      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078da:	3308      	adds	r3, #8
 80078dc:	2102      	movs	r1, #2
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 fa0a 	bl	8008cf8 <RCCEx_PLL2_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80078ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	2100      	movs	r1, #0
 8007904:	6139      	str	r1, [r7, #16]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007910:	460b      	mov	r3, r1
 8007912:	4313      	orrs	r3, r2
 8007914:	d011      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791a:	3328      	adds	r3, #40	; 0x28
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fa9c 	bl	8008e5c <RCCEx_PLL3_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800792a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	2100      	movs	r1, #0
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007950:	460b      	mov	r3, r1
 8007952:	4313      	orrs	r3, r2
 8007954:	d011      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795a:	3328      	adds	r3, #40	; 0x28
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fa7c 	bl	8008e5c <RCCEx_PLL3_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	2100      	movs	r1, #0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	607b      	str	r3, [r7, #4]
 800798c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007990:	460b      	mov	r3, r1
 8007992:	4313      	orrs	r3, r2
 8007994:	d011      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799a:	3328      	adds	r3, #40	; 0x28
 800799c:	2102      	movs	r1, #2
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fa5c 	bl	8008e5c <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80079aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80079ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80079ce:	46bd      	mov	sp, r7
 80079d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079d4:	58024400 	.word	0x58024400

080079d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b090      	sub	sp, #64	; 0x40
 80079dc:	af00      	add	r7, sp, #0
 80079de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80079ea:	430b      	orrs	r3, r1
 80079ec:	f040 8094 	bne.w	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80079f0:	4b9e      	ldr	r3, [pc, #632]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	f200 8087 	bhi.w	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a1d 	.word	0x08007a1d
 8007a0c:	08007a45 	.word	0x08007a45
 8007a10:	08007a6d 	.word	0x08007a6d
 8007a14:	08007b09 	.word	0x08007b09
 8007a18:	08007a95 	.word	0x08007a95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a1c:	4b93      	ldr	r3, [pc, #588]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a28:	d108      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 f810 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a38:	f000 bd45 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a40:	f000 bd41 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a44:	4b89      	ldr	r3, [pc, #548]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a50:	d108      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a52:	f107 0318 	add.w	r3, r7, #24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fd54 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a60:	f000 bd31 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a68:	f000 bd2d 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a6c:	4b7f      	ldr	r3, [pc, #508]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a78:	d108      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7a:	f107 030c 	add.w	r3, r7, #12
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fe94 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a88:	f000 bd1d 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a90:	f000 bd19 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a94:	4b75      	ldr	r3, [pc, #468]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a9e:	4b73      	ldr	r3, [pc, #460]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d10c      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ab0:	4b6e      	ldr	r3, [pc, #440]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	08db      	lsrs	r3, r3, #3
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	4a6d      	ldr	r2, [pc, #436]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac2:	e01f      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ac4:	4b69      	ldr	r3, [pc, #420]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad0:	d106      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ad8:	d102      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ada:	4b66      	ldr	r3, [pc, #408]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ade:	e011      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ae0:	4b62      	ldr	r3, [pc, #392]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aec:	d106      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af4:	d102      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007af6:	4b60      	ldr	r3, [pc, #384]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007afa:	e003      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b00:	f000 bce1 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b04:	f000 bcdf 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b08:	4b5c      	ldr	r3, [pc, #368]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0c:	f000 bcdb 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b14:	f000 bcd7 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007b20:	430b      	orrs	r3, r1
 8007b22:	f040 80ad 	bne.w	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007b26:	4b51      	ldr	r3, [pc, #324]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007b2e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b36:	d056      	beq.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3e:	f200 8090 	bhi.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2bc0      	cmp	r3, #192	; 0xc0
 8007b46:	f000 8088 	beq.w	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	2bc0      	cmp	r3, #192	; 0xc0
 8007b4e:	f200 8088 	bhi.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d032      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	2b80      	cmp	r3, #128	; 0x80
 8007b5c:	f200 8081 	bhi.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	2b40      	cmp	r3, #64	; 0x40
 8007b6a:	d014      	beq.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007b6c:	e079      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b6e:	4b3f      	ldr	r3, [pc, #252]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b7a:	d108      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 ff67 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b8a:	f000 bc9c 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b92:	f000 bc98 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b96:	4b35      	ldr	r3, [pc, #212]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ba2:	d108      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba4:	f107 0318 	add.w	r3, r7, #24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fcab 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bb2:	f000 bc88 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bba:	f000 bc84 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bbe:	4b2b      	ldr	r3, [pc, #172]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bca:	d108      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bcc:	f107 030c 	add.w	r3, r7, #12
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fdeb 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bda:	f000 bc74 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be2:	f000 bc70 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007be6:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bf0:	4b1e      	ldr	r3, [pc, #120]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d10c      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	08db      	lsrs	r3, r3, #3
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c14:	e01f      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c16:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c22:	d106      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c2a:	d102      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c30:	e011      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c32:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c46:	d102      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4c:	e003      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c52:	f000 bc38 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c56:	f000 bc36 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c5a:	4b08      	ldr	r3, [pc, #32]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c5e:	f000 bc32 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c66:	f000 bc2e 	b.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	03d09000 	.word	0x03d09000
 8007c74:	003d0900 	.word	0x003d0900
 8007c78:	017d7840 	.word	0x017d7840
 8007c7c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c84:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	f040 809c 	bne.w	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007c8e:	4b9e      	ldr	r3, [pc, #632]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007c96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c9e:	d054      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ca6:	f200 808b 	bhi.w	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cb0:	f000 8083 	beq.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cba:	f200 8081 	bhi.w	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc4:	d02f      	beq.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ccc:	d878      	bhi.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cda:	d012      	beq.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007cdc:	e070      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cde:	4b8a      	ldr	r3, [pc, #552]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cea:	d107      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 feaf 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfa:	e3e4      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d00:	e3e1      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d02:	4b81      	ldr	r3, [pc, #516]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d0e:	d107      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d10:	f107 0318 	add.w	r3, r7, #24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fbf5 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1e:	e3d2      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d24:	e3cf      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d26:	4b78      	ldr	r3, [pc, #480]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d32:	d107      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fd37 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d42:	e3c0      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d48:	e3bd      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4a:	4b6f      	ldr	r3, [pc, #444]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d54:	4b6c      	ldr	r3, [pc, #432]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d10c      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d66:	4b68      	ldr	r3, [pc, #416]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	4a66      	ldr	r2, [pc, #408]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d78:	e01e      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d7a:	4b63      	ldr	r3, [pc, #396]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d86:	d106      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d8e:	d102      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d90:	4b5f      	ldr	r3, [pc, #380]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	e010      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d96:	4b5c      	ldr	r3, [pc, #368]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da2:	d106      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007daa:	d102      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dac:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db0:	e002      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007db6:	e386      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007db8:	e385      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dba:	4b57      	ldr	r3, [pc, #348]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dbe:	e382      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc4:	e37f      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dca:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	f040 80a7 	bne.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007dd4:	4b4c      	ldr	r3, [pc, #304]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007ddc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007de4:	d055      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dec:	f200 8096 	bhi.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007df6:	f000 8084 	beq.w	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e00:	f200 808c 	bhi.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e0a:	d030      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e12:	f200 8083 	bhi.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e22:	d012      	beq.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007e24:	e07a      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e26:	4b38      	ldr	r3, [pc, #224]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e32:	d107      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fe0b 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e42:	e340      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e48:	e33d      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e4a:	4b2f      	ldr	r3, [pc, #188]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e56:	d107      	bne.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e58:	f107 0318 	add.w	r3, r7, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fb51 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e66:	e32e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6c:	e32b      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e6e:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fc93 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8a:	e31c      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e90:	e319      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e92:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d10c      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	4a14      	ldr	r2, [pc, #80]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec0:	e01e      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ece:	d106      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ed6:	d102      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007edc:	e010      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ede:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007efe:	e2e2      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f00:	e2e1      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f06:	e2de      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	03d09000 	.word	0x03d09000
 8007f10:	003d0900 	.word	0x003d0900
 8007f14:	017d7840 	.word	0x017d7840
 8007f18:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f20:	e2d1      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f26:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	f040 809c 	bne.w	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007f30:	4b93      	ldr	r3, [pc, #588]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007f38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f40:	d054      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f48:	f200 808b 	bhi.w	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f52:	f000 8083 	beq.w	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f5c:	f200 8081 	bhi.w	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f66:	d02f      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f6e:	d878      	bhi.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d004      	beq.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d012      	beq.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007f7e:	e070      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f80:	4b7f      	ldr	r3, [pc, #508]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f8c:	d107      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fd5e 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f9c:	e293      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa2:	e290      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fa4:	4b76      	ldr	r3, [pc, #472]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb2:	f107 0318 	add.w	r3, r7, #24
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 faa4 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fc0:	e281      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc6:	e27e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc8:	4b6d      	ldr	r3, [pc, #436]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd4:	d107      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fbe6 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe4:	e26f      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fea:	e26c      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fec:	4b64      	ldr	r3, [pc, #400]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ff6:	4b62      	ldr	r3, [pc, #392]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d10c      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008008:	4b5d      	ldr	r3, [pc, #372]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	08db      	lsrs	r3, r3, #3
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	4a5c      	ldr	r2, [pc, #368]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800801a:	e01e      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800801c:	4b58      	ldr	r3, [pc, #352]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008028:	d106      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008030:	d102      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008032:	4b55      	ldr	r3, [pc, #340]	; (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008036:	e010      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008038:	4b51      	ldr	r3, [pc, #324]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008044:	d106      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800804c:	d102      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800804e:	4b4f      	ldr	r3, [pc, #316]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008052:	e002      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008058:	e235      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800805a:	e234      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800805c:	4b4c      	ldr	r3, [pc, #304]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008060:	e231      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008066:	e22e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008070:	430b      	orrs	r3, r1
 8008072:	f040 808f 	bne.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008076:	4b42      	ldr	r3, [pc, #264]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800807e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008086:	d06b      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800808e:	d874      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008096:	d056      	beq.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800809e:	d86c      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a6:	d03b      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ae:	d864      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b6:	d021      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080be:	d85c      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	d004      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80080ce:	e054      	b.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fe fa4c 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80080d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080d6:	e1f6      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080d8:	4b29      	ldr	r3, [pc, #164]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080e4:	d107      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e6:	f107 0318 	add.w	r3, r7, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fa0a 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f4:	e1e7      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fa:	e1e4      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008108:	d107      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800810a:	f107 030c 	add.w	r3, r7, #12
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fb4c 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008118:	e1d5      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811e:	e1d2      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008120:	4b17      	ldr	r3, [pc, #92]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b04      	cmp	r3, #4
 800812a:	d109      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800812c:	4b14      	ldr	r3, [pc, #80]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	08db      	lsrs	r3, r3, #3
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	4a13      	ldr	r2, [pc, #76]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800813e:	e1c2      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008144:	e1bf      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008146:	4b0e      	ldr	r3, [pc, #56]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008152:	d102      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008154:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008158:	e1b5      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815e:	e1b2      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800816c:	d102      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008172:	e1a8      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008178:	e1a5      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817e:	e1a2      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008180:	58024400 	.word	0x58024400
 8008184:	03d09000 	.word	0x03d09000
 8008188:	003d0900 	.word	0x003d0900
 800818c:	017d7840 	.word	0x017d7840
 8008190:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008198:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800819c:	430b      	orrs	r3, r1
 800819e:	d173      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80081a0:	4b9c      	ldr	r3, [pc, #624]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b0:	d02f      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b8:	d863      	bhi.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c6:	d012      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80081c8:	e05b      	b.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081ca:	4b92      	ldr	r3, [pc, #584]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d6:	d107      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d8:	f107 0318 	add.w	r3, r7, #24
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f991 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e6:	e16e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ec:	e16b      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081ee:	4b89      	ldr	r3, [pc, #548]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fa:	d107      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fad3 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800820a:	e15c      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008210:	e159      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008212:	4b80      	ldr	r3, [pc, #512]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800821a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800821c:	4b7d      	ldr	r3, [pc, #500]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b04      	cmp	r3, #4
 8008226:	d10c      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800822e:	4b79      	ldr	r3, [pc, #484]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	08db      	lsrs	r3, r3, #3
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	4a77      	ldr	r2, [pc, #476]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800823a:	fa22 f303 	lsr.w	r3, r2, r3
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008240:	e01e      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008242:	4b74      	ldr	r3, [pc, #464]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824e:	d106      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008256:	d102      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008258:	4b70      	ldr	r3, [pc, #448]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800825c:	e010      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800825e:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800826a:	d106      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008272:	d102      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008274:	4b6a      	ldr	r3, [pc, #424]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800827e:	e122      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008280:	e121      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008286:	e11e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008290:	430b      	orrs	r3, r1
 8008292:	d133      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008294:	4b5f      	ldr	r3, [pc, #380]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800829c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082aa:	d012      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80082ac:	e023      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082ae:	4b59      	ldr	r3, [pc, #356]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ba:	d107      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fbc7 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ca:	e0fc      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d0:	e0f9      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d2:	4b50      	ldr	r3, [pc, #320]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082de:	d107      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e0:	f107 0318 	add.w	r3, r7, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f90d 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ee:	e0ea      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f4:	e0e7      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082fa:	e0e4      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80082fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008300:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008304:	430b      	orrs	r3, r1
 8008306:	f040 808d 	bne.w	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800830a:	4b42      	ldr	r3, [pc, #264]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008312:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800831a:	d06b      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008322:	d874      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832a:	d056      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008332:	d86c      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800833a:	d03b      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008342:	d864      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800834a:	d021      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008352:	d85c      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008360:	d004      	beq.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008362:	e054      	b.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008364:	f000 f8b8 	bl	80084d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008368:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800836a:	e0ac      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800836c:	4b29      	ldr	r3, [pc, #164]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008378:	d107      	bne.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800837a:	f107 0318 	add.w	r3, r7, #24
 800837e:	4618      	mov	r0, r3
 8008380:	f000 f8c0 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008388:	e09d      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838e:	e09a      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008390:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800839c:	d107      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fa02 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ac:	e08b      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b2:	e088      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083b4:	4b17      	ldr	r3, [pc, #92]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d109      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	08db      	lsrs	r3, r3, #3
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	4a13      	ldr	r2, [pc, #76]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d2:	e078      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d8:	e075      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083da:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e6:	d102      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ec:	e06b      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f2:	e068      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083f4:	4b07      	ldr	r3, [pc, #28]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008400:	d102      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008402:	4b07      	ldr	r3, [pc, #28]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008406:	e05e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800840c:	e05b      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008412:	e058      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008428:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800842c:	430b      	orrs	r3, r1
 800842e:	d148      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008430:	4b27      	ldr	r3, [pc, #156]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008438:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008440:	d02a      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d838      	bhi.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	d004      	beq.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008456:	d00d      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008458:	e030      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800845a:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008466:	d102      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008468:	4b1a      	ldr	r3, [pc, #104]	; (80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800846c:	e02b      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008472:	e028      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008474:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008480:	d107      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fae4 	bl	8008a54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008490:	e019      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008496:	e016      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084a4:	d107      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a6:	f107 0318 	add.w	r3, r7, #24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f82a 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b4:	e007      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ba:	e004      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c0:	e001      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3740      	adds	r7, #64	; 0x40
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	58024400 	.word	0x58024400
 80084d4:	017d7840 	.word	0x017d7840

080084d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084dc:	f7fe f816 	bl	800650c <HAL_RCC_GetHCLKFreq>
 80084e0:	4602      	mov	r2, r0
 80084e2:	4b06      	ldr	r3, [pc, #24]	; (80084fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	091b      	lsrs	r3, r3, #4
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	4904      	ldr	r1, [pc, #16]	; (8008500 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084ee:	5ccb      	ldrb	r3, [r1, r3]
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	58024400 	.word	0x58024400
 8008500:	0800b2b8 	.word	0x0800b2b8

08008504 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008504:	b480      	push	{r7}
 8008506:	b089      	sub	sp, #36	; 0x24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800850c:	4ba1      	ldr	r3, [pc, #644]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f003 0303 	and.w	r3, r3, #3
 8008514:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008516:	4b9f      	ldr	r3, [pc, #636]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	0b1b      	lsrs	r3, r3, #12
 800851c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008520:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008522:	4b9c      	ldr	r3, [pc, #624]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	091b      	lsrs	r3, r3, #4
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800852e:	4b99      	ldr	r3, [pc, #612]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8111 	beq.w	8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b02      	cmp	r3, #2
 8008556:	f000 8083 	beq.w	8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b02      	cmp	r3, #2
 800855e:	f200 80a1 	bhi.w	80086a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d056      	beq.n	800861c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800856e:	e099      	b.n	80086a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008570:	4b88      	ldr	r3, [pc, #544]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02d      	beq.n	80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800857c:	4b85      	ldr	r3, [pc, #532]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	08db      	lsrs	r3, r3, #3
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	4a84      	ldr	r2, [pc, #528]	; (8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b7b      	ldr	r3, [pc, #492]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800879c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085d6:	e087      	b.n	80086e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ea:	4b6a      	ldr	r3, [pc, #424]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800879c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800861a:	e065      	b.n	80086e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b59      	ldr	r3, [pc, #356]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800879c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800865e:	e043      	b.n	80086e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b48      	ldr	r3, [pc, #288]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a03 	vldr	s12, [r7, #12]
 8008686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800879c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086a2:	e021      	b.n	80086e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b37      	ldr	r3, [pc, #220]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800879c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80086e8:	4b2a      	ldr	r3, [pc, #168]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	0a5b      	lsrs	r3, r3, #9
 80086ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008702:	edd7 6a07 	vldr	s13, [r7, #28]
 8008706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870e:	ee17 2a90 	vmov	r2, s15
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008716:	4b1f      	ldr	r3, [pc, #124]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800872c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008730:	edd7 6a07 	vldr	s13, [r7, #28]
 8008734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873c:	ee17 2a90 	vmov	r2, s15
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008744:	4b13      	ldr	r3, [pc, #76]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	0e1b      	lsrs	r3, r3, #24
 800874a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800875a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800876a:	ee17 2a90 	vmov	r2, s15
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008772:	e008      	b.n	8008786 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	609a      	str	r2, [r3, #8]
}
 8008786:	bf00      	nop
 8008788:	3724      	adds	r7, #36	; 0x24
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	58024400 	.word	0x58024400
 8008798:	03d09000 	.word	0x03d09000
 800879c:	46000000 	.word	0x46000000
 80087a0:	4c742400 	.word	0x4c742400
 80087a4:	4a742400 	.word	0x4a742400
 80087a8:	4bbebc20 	.word	0x4bbebc20

080087ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b089      	sub	sp, #36	; 0x24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087b4:	4ba1      	ldr	r3, [pc, #644]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80087be:	4b9f      	ldr	r3, [pc, #636]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	0d1b      	lsrs	r3, r3, #20
 80087c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087ca:	4b9c      	ldr	r3, [pc, #624]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80087d6:	4b99      	ldr	r3, [pc, #612]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	08db      	lsrs	r3, r3, #3
 80087dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8111 	beq.w	8008a1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	f000 8083 	beq.w	8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b02      	cmp	r3, #2
 8008806:	f200 80a1 	bhi.w	800894c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d056      	beq.n	80088c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008816:	e099      	b.n	800894c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008818:	4b88      	ldr	r3, [pc, #544]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	d02d      	beq.n	8008880 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008824:	4b85      	ldr	r3, [pc, #532]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	4a84      	ldr	r2, [pc, #528]	; (8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
 8008834:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	ee07 3a90 	vmov	s15, r3
 800883c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b7b      	ldr	r3, [pc, #492]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800887e:	e087      	b.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800888e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008892:	4b6a      	ldr	r3, [pc, #424]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088c2:	e065      	b.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d6:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008906:	e043      	b.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891a:	4b48      	ldr	r3, [pc, #288]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892a:	ed97 6a03 	vldr	s12, [r7, #12]
 800892e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800894a:	e021      	b.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800895a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895e:	4b37      	ldr	r3, [pc, #220]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800898e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008990:	4b2a      	ldr	r3, [pc, #168]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	0a5b      	lsrs	r3, r3, #9
 8008996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b6:	ee17 2a90 	vmov	r2, s15
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80089be:	4b1f      	ldr	r3, [pc, #124]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089e4:	ee17 2a90 	vmov	r2, s15
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	0e1b      	lsrs	r3, r3, #24
 80089f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a12:	ee17 2a90 	vmov	r2, s15
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a1a:	e008      	b.n	8008a2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	609a      	str	r2, [r3, #8]
}
 8008a2e:	bf00      	nop
 8008a30:	3724      	adds	r7, #36	; 0x24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	58024400 	.word	0x58024400
 8008a40:	03d09000 	.word	0x03d09000
 8008a44:	46000000 	.word	0x46000000
 8008a48:	4c742400 	.word	0x4c742400
 8008a4c:	4a742400 	.word	0x4a742400
 8008a50:	4bbebc20 	.word	0x4bbebc20

08008a54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b089      	sub	sp, #36	; 0x24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a5c:	4ba0      	ldr	r3, [pc, #640]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008a66:	4b9e      	ldr	r3, [pc, #632]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6a:	091b      	lsrs	r3, r3, #4
 8008a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a72:	4b9b      	ldr	r3, [pc, #620]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a7c:	4b98      	ldr	r3, [pc, #608]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	08db      	lsrs	r3, r3, #3
 8008a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	fb02 f303 	mul.w	r3, r2, r3
 8008a8c:	ee07 3a90 	vmov	s15, r3
 8008a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8111 	beq.w	8008cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	f000 8083 	beq.w	8008bae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	f200 80a1 	bhi.w	8008bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d056      	beq.n	8008b6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008abc:	e099      	b.n	8008bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008abe:	4b88      	ldr	r3, [pc, #544]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d02d      	beq.n	8008b26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aca:	4b85      	ldr	r3, [pc, #532]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	08db      	lsrs	r3, r3, #3
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	4a83      	ldr	r2, [pc, #524]	; (8008ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ada:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	ee07 3a90 	vmov	s15, r3
 8008aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af4:	4b7a      	ldr	r3, [pc, #488]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b24:	e087      	b.n	8008c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	ee07 3a90 	vmov	s15, r3
 8008b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008cec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b38:	4b69      	ldr	r3, [pc, #420]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b40:	ee07 3a90 	vmov	s15, r3
 8008b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b68:	e065      	b.n	8008c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7c:	4b58      	ldr	r3, [pc, #352]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b84:	ee07 3a90 	vmov	s15, r3
 8008b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bac:	e043      	b.n	8008c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	ee07 3a90 	vmov	s15, r3
 8008bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc0:	4b47      	ldr	r3, [pc, #284]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bf0:	e021      	b.n	8008c36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	ee07 3a90 	vmov	s15, r3
 8008bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008cec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c04:	4b36      	ldr	r3, [pc, #216]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0c:	ee07 3a90 	vmov	s15, r3
 8008c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008c36:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	0a5b      	lsrs	r3, r3, #9
 8008c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c40:	ee07 3a90 	vmov	s15, r3
 8008c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c5c:	ee17 2a90 	vmov	r2, s15
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008c64:	4b1e      	ldr	r3, [pc, #120]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c68:	0c1b      	lsrs	r3, r3, #16
 8008c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c8a:	ee17 2a90 	vmov	r2, s15
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008c92:	4b13      	ldr	r3, [pc, #76]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	0e1b      	lsrs	r3, r3, #24
 8008c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb8:	ee17 2a90 	vmov	r2, s15
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	609a      	str	r2, [r3, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	3724      	adds	r7, #36	; 0x24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	03d09000 	.word	0x03d09000
 8008ce8:	46000000 	.word	0x46000000
 8008cec:	4c742400 	.word	0x4c742400
 8008cf0:	4a742400 	.word	0x4a742400
 8008cf4:	4bbebc20 	.word	0x4bbebc20

08008cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d06:	4b53      	ldr	r3, [pc, #332]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d101      	bne.n	8008d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e099      	b.n	8008e4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d16:	4b4f      	ldr	r3, [pc, #316]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a4e      	ldr	r2, [pc, #312]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d22:	f7f9 fbdb 	bl	80024dc <HAL_GetTick>
 8008d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d28:	e008      	b.n	8008d3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d2a:	f7f9 fbd7 	bl	80024dc <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d901      	bls.n	8008d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e086      	b.n	8008e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d3c:	4b45      	ldr	r3, [pc, #276]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f0      	bne.n	8008d2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d48:	4b42      	ldr	r3, [pc, #264]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	031b      	lsls	r3, r3, #12
 8008d56:	493f      	ldr	r1, [pc, #252]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	025b      	lsls	r3, r3, #9
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	431a      	orrs	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	041b      	lsls	r3, r3, #16
 8008d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	061b      	lsls	r3, r3, #24
 8008d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d8c:	4931      	ldr	r1, [pc, #196]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d92:	4b30      	ldr	r3, [pc, #192]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	492d      	ldr	r1, [pc, #180]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008da4:	4b2b      	ldr	r3, [pc, #172]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	f023 0220 	bic.w	r2, r3, #32
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	4928      	ldr	r1, [pc, #160]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008db6:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	4a26      	ldr	r2, [pc, #152]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dbc:	f023 0310 	bic.w	r3, r3, #16
 8008dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc6:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <RCCEx_PLL2_Config+0x160>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	69d2      	ldr	r2, [r2, #28]
 8008dce:	00d2      	lsls	r2, r2, #3
 8008dd0:	4920      	ldr	r1, [pc, #128]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008ddc:	f043 0310 	orr.w	r3, r3, #16
 8008de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008de8:	4b1a      	ldr	r3, [pc, #104]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008df4:	e00f      	b.n	8008e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d106      	bne.n	8008e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008dfc:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	4a14      	ldr	r2, [pc, #80]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e08:	e005      	b.n	8008e16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	4a11      	ldr	r2, [pc, #68]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e16:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a0e      	ldr	r2, [pc, #56]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e22:	f7f9 fb5b 	bl	80024dc <HAL_GetTick>
 8008e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e28:	e008      	b.n	8008e3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e2a:	f7f9 fb57 	bl	80024dc <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d901      	bls.n	8008e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e006      	b.n	8008e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0f0      	beq.n	8008e2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	58024400 	.word	0x58024400
 8008e58:	ffff0007 	.word	0xffff0007

08008e5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e6a:	4b53      	ldr	r3, [pc, #332]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d101      	bne.n	8008e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e099      	b.n	8008fae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e7a:	4b4f      	ldr	r3, [pc, #316]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a4e      	ldr	r2, [pc, #312]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e86:	f7f9 fb29 	bl	80024dc <HAL_GetTick>
 8008e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e8c:	e008      	b.n	8008ea0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e8e:	f7f9 fb25 	bl	80024dc <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e086      	b.n	8008fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ea0:	4b45      	ldr	r3, [pc, #276]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f0      	bne.n	8008e8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008eac:	4b42      	ldr	r3, [pc, #264]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	051b      	lsls	r3, r3, #20
 8008eba:	493f      	ldr	r1, [pc, #252]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	628b      	str	r3, [r1, #40]	; 0x28
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	025b      	lsls	r3, r3, #9
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	041b      	lsls	r3, r3, #16
 8008ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	061b      	lsls	r3, r3, #24
 8008eec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ef0:	4931      	ldr	r1, [pc, #196]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ef6:	4b30      	ldr	r3, [pc, #192]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	492d      	ldr	r1, [pc, #180]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f08:	4b2b      	ldr	r3, [pc, #172]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4928      	ldr	r1, [pc, #160]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f1a:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	4a26      	ldr	r2, [pc, #152]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f26:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <RCCEx_PLL3_Config+0x160>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	69d2      	ldr	r2, [r2, #28]
 8008f32:	00d2      	lsls	r2, r2, #3
 8008f34:	4920      	ldr	r1, [pc, #128]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	4a1e      	ldr	r2, [pc, #120]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a19      	ldr	r2, [pc, #100]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f58:	e00f      	b.n	8008f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d106      	bne.n	8008f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f60:	4b15      	ldr	r3, [pc, #84]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	4a14      	ldr	r2, [pc, #80]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f6c:	e005      	b.n	8008f7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	4a11      	ldr	r2, [pc, #68]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a0e      	ldr	r2, [pc, #56]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f86:	f7f9 faa9 	bl	80024dc <HAL_GetTick>
 8008f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f8c:	e008      	b.n	8008fa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f8e:	f7f9 faa5 	bl	80024dc <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	ffff0007 	.word	0xffff0007

08008fc0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e28e      	b.n	80094f0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008fd2:	f7f9 fab3 	bl	800253c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d113      	bne.n	8009008 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a96      	ldr	r2, [pc, #600]	; (8009240 <HAL_SAI_Init+0x280>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d004      	beq.n	8008ff4 <HAL_SAI_Init+0x34>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a95      	ldr	r2, [pc, #596]	; (8009244 <HAL_SAI_Init+0x284>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d107      	bne.n	8009004 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d103      	bne.n	8009004 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e273      	b.n	80094f0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a8c      	ldr	r2, [pc, #560]	; (8009240 <HAL_SAI_Init+0x280>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d004      	beq.n	800901c <HAL_SAI_Init+0x5c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a8c      	ldr	r2, [pc, #560]	; (8009248 <HAL_SAI_Init+0x288>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d102      	bne.n	8009022 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800901c:	4b8b      	ldr	r3, [pc, #556]	; (800924c <HAL_SAI_Init+0x28c>)
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	e028      	b.n	8009074 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a8a      	ldr	r2, [pc, #552]	; (8009250 <HAL_SAI_Init+0x290>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d004      	beq.n	8009036 <HAL_SAI_Init+0x76>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a88      	ldr	r2, [pc, #544]	; (8009254 <HAL_SAI_Init+0x294>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d102      	bne.n	800903c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009036:	4b88      	ldr	r3, [pc, #544]	; (8009258 <HAL_SAI_Init+0x298>)
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e01b      	b.n	8009074 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a86      	ldr	r2, [pc, #536]	; (800925c <HAL_SAI_Init+0x29c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d004      	beq.n	8009050 <HAL_SAI_Init+0x90>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a85      	ldr	r2, [pc, #532]	; (8009260 <HAL_SAI_Init+0x2a0>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d102      	bne.n	8009056 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009050:	4b84      	ldr	r3, [pc, #528]	; (8009264 <HAL_SAI_Init+0x2a4>)
 8009052:	61bb      	str	r3, [r7, #24]
 8009054:	e00e      	b.n	8009074 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a7a      	ldr	r2, [pc, #488]	; (8009244 <HAL_SAI_Init+0x284>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_SAI_Init+0xaa>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a80      	ldr	r2, [pc, #512]	; (8009268 <HAL_SAI_Init+0x2a8>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d102      	bne.n	8009070 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800906a:	4b80      	ldr	r3, [pc, #512]	; (800926c <HAL_SAI_Init+0x2ac>)
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e001      	b.n	8009074 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e23d      	b.n	80094f0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7f9 f80d 	bl	80020a8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa40 	bl	8009514 <SAI_Disable>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e228      	b.n	80094f0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d00c      	beq.n	80090c8 <HAL_SAI_Init+0x108>
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d80d      	bhi.n	80090ce <HAL_SAI_Init+0x10e>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <HAL_SAI_Init+0xfc>
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d003      	beq.n	80090c2 <HAL_SAI_Init+0x102>
 80090ba:	e008      	b.n	80090ce <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80090c0:	e008      	b.n	80090d4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80090c2:	2310      	movs	r3, #16
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80090c6:	e005      	b.n	80090d4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80090c8:	2320      	movs	r3, #32
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80090cc:	e002      	b.n	80090d4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80090d2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b05      	cmp	r3, #5
 80090da:	d832      	bhi.n	8009142 <HAL_SAI_Init+0x182>
 80090dc:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <HAL_SAI_Init+0x124>)
 80090de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	080090fd 	.word	0x080090fd
 80090e8:	08009103 	.word	0x08009103
 80090ec:	0800910b 	.word	0x0800910b
 80090f0:	08009113 	.word	0x08009113
 80090f4:	08009123 	.word	0x08009123
 80090f8:	08009133 	.word	0x08009133
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61fb      	str	r3, [r7, #28]
      break;
 8009100:	e022      	b.n	8009148 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009106:	61fb      	str	r3, [r7, #28]
      break;
 8009108:	e01e      	b.n	8009148 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800910a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800910e:	61fb      	str	r3, [r7, #28]
      break;
 8009110:	e01a      	b.n	8009148 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009116:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009120:	e012      	b.n	8009148 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009126:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	f043 0302 	orr.w	r3, r3, #2
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009130:	e00a      	b.n	8009148 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009136:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	f043 0303 	orr.w	r3, r3, #3
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009140:	e002      	b.n	8009148 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	61fb      	str	r3, [r7, #28]
      break;
 8009146:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 80c5 	beq.w	80092e2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a37      	ldr	r2, [pc, #220]	; (8009240 <HAL_SAI_Init+0x280>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d004      	beq.n	8009170 <HAL_SAI_Init+0x1b0>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a37      	ldr	r2, [pc, #220]	; (8009248 <HAL_SAI_Init+0x288>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d106      	bne.n	800917e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009170:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009174:	f04f 0100 	mov.w	r1, #0
 8009178:	f7fe fc2e 	bl	80079d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800917c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a33      	ldr	r2, [pc, #204]	; (8009250 <HAL_SAI_Init+0x290>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d004      	beq.n	8009192 <HAL_SAI_Init+0x1d2>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a31      	ldr	r2, [pc, #196]	; (8009254 <HAL_SAI_Init+0x294>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d106      	bne.n	80091a0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009196:	f04f 0100 	mov.w	r1, #0
 800919a:	f7fe fc1d 	bl	80079d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800919e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a2d      	ldr	r2, [pc, #180]	; (800925c <HAL_SAI_Init+0x29c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_SAI_Init+0x1f4>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a2c      	ldr	r2, [pc, #176]	; (8009260 <HAL_SAI_Init+0x2a0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d106      	bne.n	80091c2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80091b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091b8:	f04f 0100 	mov.w	r1, #0
 80091bc:	f7fe fc0c 	bl	80079d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80091c0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <HAL_SAI_Init+0x284>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d106      	bne.n	80091da <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80091cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80091d0:	f04f 0100 	mov.w	r1, #0
 80091d4:	f7fe fc00 	bl	80079d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80091d8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a22      	ldr	r2, [pc, #136]	; (8009268 <HAL_SAI_Init+0x2a8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d106      	bne.n	80091f2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80091e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80091e8:	f04f 0100 	mov.w	r1, #0
 80091ec:	f7fe fbf4 	bl	80079d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80091f0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091fa:	d139      	bne.n	8009270 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009200:	2b04      	cmp	r3, #4
 8009202:	d102      	bne.n	800920a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009204:	2340      	movs	r3, #64	; 0x40
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	e00a      	b.n	8009220 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	2b08      	cmp	r3, #8
 8009210:	d103      	bne.n	800921a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e002      	b.n	8009220 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	4619      	mov	r1, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	fb02 f303 	mul.w	r3, r2, r3
 8009236:	fbb1 f3f3 	udiv	r3, r1, r3
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	e030      	b.n	80092a0 <HAL_SAI_Init+0x2e0>
 800923e:	bf00      	nop
 8009240:	40015804 	.word	0x40015804
 8009244:	58005404 	.word	0x58005404
 8009248:	40015824 	.word	0x40015824
 800924c:	40015800 	.word	0x40015800
 8009250:	40015c04 	.word	0x40015c04
 8009254:	40015c24 	.word	0x40015c24
 8009258:	40015c00 	.word	0x40015c00
 800925c:	40016004 	.word	0x40016004
 8009260:	40016024 	.word	0x40016024
 8009264:	40016000 	.word	0x40016000
 8009268:	58005424 	.word	0x58005424
 800926c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009278:	d101      	bne.n	800927e <HAL_SAI_Init+0x2be>
 800927a:	2302      	movs	r3, #2
 800927c:	e000      	b.n	8009280 <HAL_SAI_Init+0x2c0>
 800927e:	2301      	movs	r3, #1
 8009280:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	4619      	mov	r1, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	fb02 f303 	mul.w	r3, r2, r3
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	fbb1 f3f3 	udiv	r3, r1, r3
 800929e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	4a95      	ldr	r2, [pc, #596]	; (80094f8 <HAL_SAI_Init+0x538>)
 80092a4:	fba2 2303 	umull	r2, r3, r2, r3
 80092a8:	08da      	lsrs	r2, r3, #3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80092ae:	6939      	ldr	r1, [r7, #16]
 80092b0:	4b91      	ldr	r3, [pc, #580]	; (80094f8 <HAL_SAI_Init+0x538>)
 80092b2:	fba3 2301 	umull	r2, r3, r3, r1
 80092b6:	08da      	lsrs	r2, r3, #3
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	1aca      	subs	r2, r1, r3
 80092c2:	2a08      	cmp	r2, #8
 80092c4:	d904      	bls.n	80092d0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d104      	bne.n	80092e2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	085a      	lsrs	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_SAI_Init+0x332>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d109      	bne.n	8009306 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <HAL_SAI_Init+0x33e>
 80092fa:	2300      	movs	r3, #0
 80092fc:	e001      	b.n	8009302 <HAL_SAI_Init+0x342>
 80092fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009302:	623b      	str	r3, [r7, #32]
 8009304:	e008      	b.n	8009318 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930a:	2b01      	cmp	r3, #1
 800930c:	d102      	bne.n	8009314 <HAL_SAI_Init+0x354>
 800930e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009312:	e000      	b.n	8009316 <HAL_SAI_Init+0x356>
 8009314:	2300      	movs	r3, #0
 8009316:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009318:	f7f9 f910 	bl	800253c <HAL_GetREVID>
 800931c:	4603      	mov	r3, r0
 800931e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009322:	d331      	bcc.n	8009388 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6819      	ldr	r1, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	4b73      	ldr	r3, [pc, #460]	; (80094fc <HAL_SAI_Init+0x53c>)
 8009330:	400b      	ands	r3, r1
 8009332:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6819      	ldr	r1, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009342:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009348:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934e:	431a      	orrs	r2, r3
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800935c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009368:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	051b      	lsls	r3, r3, #20
 8009370:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009376:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	e02d      	b.n	80093e4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6819      	ldr	r1, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b5b      	ldr	r3, [pc, #364]	; (8009500 <HAL_SAI_Init+0x540>)
 8009394:	400b      	ands	r3, r1
 8009396:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6819      	ldr	r1, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80093ac:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093b2:	431a      	orrs	r2, r3
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80093c0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80093cc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	051b      	lsls	r3, r3, #20
 80093d4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80093da:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6859      	ldr	r1, [r3, #4]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b45      	ldr	r3, [pc, #276]	; (8009504 <HAL_SAI_Init+0x544>)
 80093f0:	400b      	ands	r3, r1
 80093f2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6859      	ldr	r1, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69da      	ldr	r2, [r3, #28]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009408:	431a      	orrs	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6899      	ldr	r1, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	4b3a      	ldr	r3, [pc, #232]	; (8009508 <HAL_SAI_Init+0x548>)
 800941e:	400b      	ands	r3, r1
 8009420:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6899      	ldr	r1, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009432:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009438:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800943e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009444:	3b01      	subs	r3, #1
 8009446:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009448:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68d9      	ldr	r1, [r3, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009460:	400b      	ands	r3, r1
 8009462:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68d9      	ldr	r1, [r3, #12]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009472:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009478:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800947a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009480:	3b01      	subs	r3, #1
 8009482:	021b      	lsls	r3, r3, #8
 8009484:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1e      	ldr	r2, [pc, #120]	; (800950c <HAL_SAI_Init+0x54c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d004      	beq.n	80094a2 <HAL_SAI_Init+0x4e2>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1c      	ldr	r2, [pc, #112]	; (8009510 <HAL_SAI_Init+0x550>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d119      	bne.n	80094d6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a6:	f023 0201 	bic.w	r2, r3, #1
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d10e      	bne.n	80094d6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c0:	3b01      	subs	r3, #1
 80094c2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80094c4:	431a      	orrs	r2, r3
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	f043 0201 	orr.w	r2, r3, #1
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3728      	adds	r7, #40	; 0x28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	cccccccd 	.word	0xcccccccd
 80094fc:	f005c010 	.word	0xf005c010
 8009500:	f805c010 	.word	0xf805c010
 8009504:	ffff1ff0 	.word	0xffff1ff0
 8009508:	fff88000 	.word	0xfff88000
 800950c:	40015804 	.word	0x40015804
 8009510:	58005404 	.word	0x58005404

08009514 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800951c:	4b18      	ldr	r3, [pc, #96]	; (8009580 <SAI_Disable+0x6c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a18      	ldr	r2, [pc, #96]	; (8009584 <SAI_Disable+0x70>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	0b1b      	lsrs	r3, r3, #12
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800953e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800954c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	72fb      	strb	r3, [r7, #11]
      break;
 800955a:	e009      	b.n	8009570 <SAI_Disable+0x5c>
    }
    count--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3b01      	subs	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e7      	bne.n	8009540 <SAI_Disable+0x2c>

  return status;
 8009570:	7afb      	ldrb	r3, [r7, #11]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	24000000 	.word	0x24000000
 8009584:	95cbec1b 	.word	0x95cbec1b

08009588 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e02b      	b.n	80095f4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7f8 fd6f 	bl	8002094 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f001 fa6d 	bl	800aaa8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	f001 fac1 	bl	800ab60 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80095de:	4b07      	ldr	r3, [pc, #28]	; (80095fc <HAL_SDRAM_Init+0x74>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a06      	ldr	r2, [pc, #24]	; (80095fc <HAL_SDRAM_Init+0x74>)
 80095e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095e8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	52004000 	.word	0x52004000

08009600 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e03e      	b.n	8009694 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7f8 fd28 	bl	8002080 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3308      	adds	r3, #8
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f001 f906 	bl	800a84c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	461a      	mov	r2, r3
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	f001 f98e 	bl	800a96c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6858      	ldr	r0, [r3, #4]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	f001 f9d5 	bl	800aa0c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	6892      	ldr	r2, [r2, #8]
 800966a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	6892      	ldr	r2, [r2, #8]
 8009676:	f041 0101 	orr.w	r1, r1, #1
 800967a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800967e:	4b07      	ldr	r3, [pc, #28]	; (800969c <HAL_SRAM_Init+0x9c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a06      	ldr	r2, [pc, #24]	; (800969c <HAL_SRAM_Init+0x9c>)
 8009684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009688:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	52004000 	.word	0x52004000

080096a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e042      	b.n	8009738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7f8 fa1f 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2224      	movs	r2, #36	; 0x24
 80096ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0201 	bic.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f82c 	bl	8009740 <UART_SetConfig>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e022      	b.n	8009738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fd88 	bl	800a210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800970e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800971e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0201 	orr.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fe0f 	bl	800a354 <UART_CheckIdleState>
 8009736:	4603      	mov	r3, r0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009744:	b092      	sub	sp, #72	; 0x48
 8009746:	af00      	add	r7, sp, #0
 8009748:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	431a      	orrs	r2, r3
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	431a      	orrs	r2, r3
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	4313      	orrs	r3, r2
 8009766:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	4bbe      	ldr	r3, [pc, #760]	; (8009a68 <UART_SetConfig+0x328>)
 8009770:	4013      	ands	r3, r2
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009778:	430b      	orrs	r3, r1
 800977a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4ab3      	ldr	r2, [pc, #716]	; (8009a6c <UART_SetConfig+0x32c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d004      	beq.n	80097ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097a8:	4313      	orrs	r3, r2
 80097aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	4baf      	ldr	r3, [pc, #700]	; (8009a70 <UART_SetConfig+0x330>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	6812      	ldr	r2, [r2, #0]
 80097ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097bc:	430b      	orrs	r3, r1
 80097be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	f023 010f 	bic.w	r1, r3, #15
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4aa6      	ldr	r2, [pc, #664]	; (8009a74 <UART_SetConfig+0x334>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d177      	bne.n	80098d0 <UART_SetConfig+0x190>
 80097e0:	4ba5      	ldr	r3, [pc, #660]	; (8009a78 <UART_SetConfig+0x338>)
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097e8:	2b28      	cmp	r3, #40	; 0x28
 80097ea:	d86d      	bhi.n	80098c8 <UART_SetConfig+0x188>
 80097ec:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <UART_SetConfig+0xb4>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009899 	.word	0x08009899
 80097f8:	080098c9 	.word	0x080098c9
 80097fc:	080098c9 	.word	0x080098c9
 8009800:	080098c9 	.word	0x080098c9
 8009804:	080098c9 	.word	0x080098c9
 8009808:	080098c9 	.word	0x080098c9
 800980c:	080098c9 	.word	0x080098c9
 8009810:	080098c9 	.word	0x080098c9
 8009814:	080098a1 	.word	0x080098a1
 8009818:	080098c9 	.word	0x080098c9
 800981c:	080098c9 	.word	0x080098c9
 8009820:	080098c9 	.word	0x080098c9
 8009824:	080098c9 	.word	0x080098c9
 8009828:	080098c9 	.word	0x080098c9
 800982c:	080098c9 	.word	0x080098c9
 8009830:	080098c9 	.word	0x080098c9
 8009834:	080098a9 	.word	0x080098a9
 8009838:	080098c9 	.word	0x080098c9
 800983c:	080098c9 	.word	0x080098c9
 8009840:	080098c9 	.word	0x080098c9
 8009844:	080098c9 	.word	0x080098c9
 8009848:	080098c9 	.word	0x080098c9
 800984c:	080098c9 	.word	0x080098c9
 8009850:	080098c9 	.word	0x080098c9
 8009854:	080098b1 	.word	0x080098b1
 8009858:	080098c9 	.word	0x080098c9
 800985c:	080098c9 	.word	0x080098c9
 8009860:	080098c9 	.word	0x080098c9
 8009864:	080098c9 	.word	0x080098c9
 8009868:	080098c9 	.word	0x080098c9
 800986c:	080098c9 	.word	0x080098c9
 8009870:	080098c9 	.word	0x080098c9
 8009874:	080098b9 	.word	0x080098b9
 8009878:	080098c9 	.word	0x080098c9
 800987c:	080098c9 	.word	0x080098c9
 8009880:	080098c9 	.word	0x080098c9
 8009884:	080098c9 	.word	0x080098c9
 8009888:	080098c9 	.word	0x080098c9
 800988c:	080098c9 	.word	0x080098c9
 8009890:	080098c9 	.word	0x080098c9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e222      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098a0:	2304      	movs	r3, #4
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e21e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098a8:	2308      	movs	r3, #8
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ae:	e21a      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098b0:	2310      	movs	r3, #16
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b6:	e216      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098b8:	2320      	movs	r3, #32
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098be:	e212      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c6:	e20e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ce:	e20a      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a69      	ldr	r2, [pc, #420]	; (8009a7c <UART_SetConfig+0x33c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d130      	bne.n	800993c <UART_SetConfig+0x1fc>
 80098da:	4b67      	ldr	r3, [pc, #412]	; (8009a78 <UART_SetConfig+0x338>)
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	d826      	bhi.n	8009934 <UART_SetConfig+0x1f4>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0x1ac>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009905 	.word	0x08009905
 80098f0:	0800990d 	.word	0x0800990d
 80098f4:	08009915 	.word	0x08009915
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	08009925 	.word	0x08009925
 8009900:	0800992d 	.word	0x0800992d
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990a:	e1ec      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 800990c:	2304      	movs	r3, #4
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009912:	e1e8      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009914:	2308      	movs	r3, #8
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991a:	e1e4      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 800991c:	2310      	movs	r3, #16
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009922:	e1e0      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009924:	2320      	movs	r3, #32
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992a:	e1dc      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 800992c:	2340      	movs	r3, #64	; 0x40
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009932:	e1d8      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993a:	e1d4      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a4f      	ldr	r2, [pc, #316]	; (8009a80 <UART_SetConfig+0x340>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d130      	bne.n	80099a8 <UART_SetConfig+0x268>
 8009946:	4b4c      	ldr	r3, [pc, #304]	; (8009a78 <UART_SetConfig+0x338>)
 8009948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	2b05      	cmp	r3, #5
 8009950:	d826      	bhi.n	80099a0 <UART_SetConfig+0x260>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <UART_SetConfig+0x218>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	08009971 	.word	0x08009971
 800995c:	08009979 	.word	0x08009979
 8009960:	08009981 	.word	0x08009981
 8009964:	08009989 	.word	0x08009989
 8009968:	08009991 	.word	0x08009991
 800996c:	08009999 	.word	0x08009999
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e1b6      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e1b2      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e1ae      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e1aa      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e1a6      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e1a2      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e19e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a35      	ldr	r2, [pc, #212]	; (8009a84 <UART_SetConfig+0x344>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d130      	bne.n	8009a14 <UART_SetConfig+0x2d4>
 80099b2:	4b31      	ldr	r3, [pc, #196]	; (8009a78 <UART_SetConfig+0x338>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d826      	bhi.n	8009a0c <UART_SetConfig+0x2cc>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x284>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099dd 	.word	0x080099dd
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099ed 	.word	0x080099ed
 80099d0:	080099f5 	.word	0x080099f5
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	08009a05 	.word	0x08009a05
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e180      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e17c      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f2:	e178      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e174      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 80099fc:	2320      	movs	r3, #32
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e170      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e16c      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e168      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1b      	ldr	r2, [pc, #108]	; (8009a88 <UART_SetConfig+0x348>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d142      	bne.n	8009aa4 <UART_SetConfig+0x364>
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <UART_SetConfig+0x338>)
 8009a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d838      	bhi.n	8009a9c <UART_SetConfig+0x35c>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <UART_SetConfig+0x2f0>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a51 	.word	0x08009a51
 8009a38:	08009a59 	.word	0x08009a59
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a8d 	.word	0x08009a8d
 8009a44:	08009a95 	.word	0x08009a95
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e14a      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e146      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e142      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e13e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a68:	cfff69f3 	.word	0xcfff69f3
 8009a6c:	58000c00 	.word	0x58000c00
 8009a70:	11fff4ff 	.word	0x11fff4ff
 8009a74:	40011000 	.word	0x40011000
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	40004400 	.word	0x40004400
 8009a80:	40004800 	.word	0x40004800
 8009a84:	40004c00 	.word	0x40004c00
 8009a88:	40005000 	.word	0x40005000
 8009a8c:	2320      	movs	r3, #32
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a92:	e128      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9a:	e124      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa2:	e120      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4acb      	ldr	r2, [pc, #812]	; (8009dd8 <UART_SetConfig+0x698>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d176      	bne.n	8009b9c <UART_SetConfig+0x45c>
 8009aae:	4bcb      	ldr	r3, [pc, #812]	; (8009ddc <UART_SetConfig+0x69c>)
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ab6:	2b28      	cmp	r3, #40	; 0x28
 8009ab8:	d86c      	bhi.n	8009b94 <UART_SetConfig+0x454>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <UART_SetConfig+0x380>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009b65 	.word	0x08009b65
 8009ac4:	08009b95 	.word	0x08009b95
 8009ac8:	08009b95 	.word	0x08009b95
 8009acc:	08009b95 	.word	0x08009b95
 8009ad0:	08009b95 	.word	0x08009b95
 8009ad4:	08009b95 	.word	0x08009b95
 8009ad8:	08009b95 	.word	0x08009b95
 8009adc:	08009b95 	.word	0x08009b95
 8009ae0:	08009b6d 	.word	0x08009b6d
 8009ae4:	08009b95 	.word	0x08009b95
 8009ae8:	08009b95 	.word	0x08009b95
 8009aec:	08009b95 	.word	0x08009b95
 8009af0:	08009b95 	.word	0x08009b95
 8009af4:	08009b95 	.word	0x08009b95
 8009af8:	08009b95 	.word	0x08009b95
 8009afc:	08009b95 	.word	0x08009b95
 8009b00:	08009b75 	.word	0x08009b75
 8009b04:	08009b95 	.word	0x08009b95
 8009b08:	08009b95 	.word	0x08009b95
 8009b0c:	08009b95 	.word	0x08009b95
 8009b10:	08009b95 	.word	0x08009b95
 8009b14:	08009b95 	.word	0x08009b95
 8009b18:	08009b95 	.word	0x08009b95
 8009b1c:	08009b95 	.word	0x08009b95
 8009b20:	08009b7d 	.word	0x08009b7d
 8009b24:	08009b95 	.word	0x08009b95
 8009b28:	08009b95 	.word	0x08009b95
 8009b2c:	08009b95 	.word	0x08009b95
 8009b30:	08009b95 	.word	0x08009b95
 8009b34:	08009b95 	.word	0x08009b95
 8009b38:	08009b95 	.word	0x08009b95
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	08009b85 	.word	0x08009b85
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	08009b95 	.word	0x08009b95
 8009b4c:	08009b95 	.word	0x08009b95
 8009b50:	08009b95 	.word	0x08009b95
 8009b54:	08009b95 	.word	0x08009b95
 8009b58:	08009b95 	.word	0x08009b95
 8009b5c:	08009b95 	.word	0x08009b95
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e0bc      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e0b8      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7a:	e0b4      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e0b0      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b84:	2320      	movs	r3, #32
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e0ac      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e0a8      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e0a4      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a8f      	ldr	r2, [pc, #572]	; (8009de0 <UART_SetConfig+0x6a0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d130      	bne.n	8009c08 <UART_SetConfig+0x4c8>
 8009ba6:	4b8d      	ldr	r3, [pc, #564]	; (8009ddc <UART_SetConfig+0x69c>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d826      	bhi.n	8009c00 <UART_SetConfig+0x4c0>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x478>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bd1 	.word	0x08009bd1
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009be9 	.word	0x08009be9
 8009bc8:	08009bf1 	.word	0x08009bf1
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e086      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bde:	e082      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be6:	e07e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e07a      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e076      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e072      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e06e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a75      	ldr	r2, [pc, #468]	; (8009de4 <UART_SetConfig+0x6a4>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d130      	bne.n	8009c74 <UART_SetConfig+0x534>
 8009c12:	4b72      	ldr	r3, [pc, #456]	; (8009ddc <UART_SetConfig+0x69c>)
 8009c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d826      	bhi.n	8009c6c <UART_SetConfig+0x52c>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x4e4>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e050      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e04c      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c52:	e048      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e044      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e040      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e03c      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e038      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a5b      	ldr	r2, [pc, #364]	; (8009de8 <UART_SetConfig+0x6a8>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d130      	bne.n	8009ce0 <UART_SetConfig+0x5a0>
 8009c7e:	4b57      	ldr	r3, [pc, #348]	; (8009ddc <UART_SetConfig+0x69c>)
 8009c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	d826      	bhi.n	8009cd8 <UART_SetConfig+0x598>
 8009c8a:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <UART_SetConfig+0x550>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009ca9 	.word	0x08009ca9
 8009c94:	08009cb1 	.word	0x08009cb1
 8009c98:	08009cb9 	.word	0x08009cb9
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cc9 	.word	0x08009cc9
 8009ca4:	08009cd1 	.word	0x08009cd1
 8009ca8:	2302      	movs	r3, #2
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cae:	e01a      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009cb0:	2304      	movs	r3, #4
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	e016      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cbe:	e012      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e00e      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009cc8:	2320      	movs	r3, #32
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e00a      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009cd0:	2340      	movs	r3, #64	; 0x40
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e006      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009cd8:	2380      	movs	r3, #128	; 0x80
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e002      	b.n	8009ce6 <UART_SetConfig+0x5a6>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a3f      	ldr	r2, [pc, #252]	; (8009de8 <UART_SetConfig+0x6a8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	f040 80f8 	bne.w	8009ee2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cf6:	2b20      	cmp	r3, #32
 8009cf8:	dc46      	bgt.n	8009d88 <UART_SetConfig+0x648>
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	f2c0 8082 	blt.w	8009e04 <UART_SetConfig+0x6c4>
 8009d00:	3b02      	subs	r3, #2
 8009d02:	2b1e      	cmp	r3, #30
 8009d04:	d87e      	bhi.n	8009e04 <UART_SetConfig+0x6c4>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <UART_SetConfig+0x5cc>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d8f 	.word	0x08009d8f
 8009d10:	08009e05 	.word	0x08009e05
 8009d14:	08009d97 	.word	0x08009d97
 8009d18:	08009e05 	.word	0x08009e05
 8009d1c:	08009e05 	.word	0x08009e05
 8009d20:	08009e05 	.word	0x08009e05
 8009d24:	08009da7 	.word	0x08009da7
 8009d28:	08009e05 	.word	0x08009e05
 8009d2c:	08009e05 	.word	0x08009e05
 8009d30:	08009e05 	.word	0x08009e05
 8009d34:	08009e05 	.word	0x08009e05
 8009d38:	08009e05 	.word	0x08009e05
 8009d3c:	08009e05 	.word	0x08009e05
 8009d40:	08009e05 	.word	0x08009e05
 8009d44:	08009db7 	.word	0x08009db7
 8009d48:	08009e05 	.word	0x08009e05
 8009d4c:	08009e05 	.word	0x08009e05
 8009d50:	08009e05 	.word	0x08009e05
 8009d54:	08009e05 	.word	0x08009e05
 8009d58:	08009e05 	.word	0x08009e05
 8009d5c:	08009e05 	.word	0x08009e05
 8009d60:	08009e05 	.word	0x08009e05
 8009d64:	08009e05 	.word	0x08009e05
 8009d68:	08009e05 	.word	0x08009e05
 8009d6c:	08009e05 	.word	0x08009e05
 8009d70:	08009e05 	.word	0x08009e05
 8009d74:	08009e05 	.word	0x08009e05
 8009d78:	08009e05 	.word	0x08009e05
 8009d7c:	08009e05 	.word	0x08009e05
 8009d80:	08009e05 	.word	0x08009e05
 8009d84:	08009df7 	.word	0x08009df7
 8009d88:	2b40      	cmp	r3, #64	; 0x40
 8009d8a:	d037      	beq.n	8009dfc <UART_SetConfig+0x6bc>
 8009d8c:	e03a      	b.n	8009e04 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d8e:	f7fe fba3 	bl	80084d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d94:	e03c      	b.n	8009e10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fbb2 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da4:	e034      	b.n	8009e10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da6:	f107 0318 	add.w	r3, r7, #24
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fcfe 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db4:	e02c      	b.n	8009e10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009db6:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <UART_SetConfig+0x69c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d016      	beq.n	8009df0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dc2:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <UART_SetConfig+0x69c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	08db      	lsrs	r3, r3, #3
 8009dc8:	f003 0303 	and.w	r3, r3, #3
 8009dcc:	4a07      	ldr	r2, [pc, #28]	; (8009dec <UART_SetConfig+0x6ac>)
 8009dce:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dd4:	e01c      	b.n	8009e10 <UART_SetConfig+0x6d0>
 8009dd6:	bf00      	nop
 8009dd8:	40011400 	.word	0x40011400
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	40007800 	.word	0x40007800
 8009de4:	40007c00 	.word	0x40007c00
 8009de8:	58000c00 	.word	0x58000c00
 8009dec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009df0:	4b9d      	ldr	r3, [pc, #628]	; (800a068 <UART_SetConfig+0x928>)
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df4:	e00c      	b.n	8009e10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df6:	4b9d      	ldr	r3, [pc, #628]	; (800a06c <UART_SetConfig+0x92c>)
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfa:	e009      	b.n	8009e10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e02:	e005      	b.n	8009e10 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 81de 	beq.w	800a1d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	4a94      	ldr	r2, [pc, #592]	; (800a070 <UART_SetConfig+0x930>)
 8009e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	4613      	mov	r3, r2
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	4413      	add	r3, r2
 8009e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d305      	bcc.n	8009e48 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d903      	bls.n	8009e50 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e4e:	e1c1      	b.n	800a1d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	2200      	movs	r2, #0
 8009e54:	60bb      	str	r3, [r7, #8]
 8009e56:	60fa      	str	r2, [r7, #12]
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	4a84      	ldr	r2, [pc, #528]	; (800a070 <UART_SetConfig+0x930>)
 8009e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	2200      	movs	r2, #0
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e72:	f7f6 fa31 	bl	80002d8 <__aeabi_uldivmod>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	020b      	lsls	r3, r1, #8
 8009e88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e8c:	0202      	lsls	r2, r0, #8
 8009e8e:	6979      	ldr	r1, [r7, #20]
 8009e90:	6849      	ldr	r1, [r1, #4]
 8009e92:	0849      	lsrs	r1, r1, #1
 8009e94:	2000      	movs	r0, #0
 8009e96:	460c      	mov	r4, r1
 8009e98:	4605      	mov	r5, r0
 8009e9a:	eb12 0804 	adds.w	r8, r2, r4
 8009e9e:	eb43 0905 	adc.w	r9, r3, r5
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	469a      	mov	sl, r3
 8009eaa:	4693      	mov	fp, r2
 8009eac:	4652      	mov	r2, sl
 8009eae:	465b      	mov	r3, fp
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fa10 	bl	80002d8 <__aeabi_uldivmod>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ec6:	d308      	bcc.n	8009eda <UART_SetConfig+0x79a>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ece:	d204      	bcs.n	8009eda <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ed6:	60da      	str	r2, [r3, #12]
 8009ed8:	e17c      	b.n	800a1d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ee0:	e178      	b.n	800a1d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eea:	f040 80c5 	bne.w	800a078 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009eee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ef2:	2b20      	cmp	r3, #32
 8009ef4:	dc48      	bgt.n	8009f88 <UART_SetConfig+0x848>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	db7b      	blt.n	8009ff2 <UART_SetConfig+0x8b2>
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	d879      	bhi.n	8009ff2 <UART_SetConfig+0x8b2>
 8009efe:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <UART_SetConfig+0x7c4>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f8f 	.word	0x08009f8f
 8009f08:	08009f97 	.word	0x08009f97
 8009f0c:	08009ff3 	.word	0x08009ff3
 8009f10:	08009ff3 	.word	0x08009ff3
 8009f14:	08009f9f 	.word	0x08009f9f
 8009f18:	08009ff3 	.word	0x08009ff3
 8009f1c:	08009ff3 	.word	0x08009ff3
 8009f20:	08009ff3 	.word	0x08009ff3
 8009f24:	08009faf 	.word	0x08009faf
 8009f28:	08009ff3 	.word	0x08009ff3
 8009f2c:	08009ff3 	.word	0x08009ff3
 8009f30:	08009ff3 	.word	0x08009ff3
 8009f34:	08009ff3 	.word	0x08009ff3
 8009f38:	08009ff3 	.word	0x08009ff3
 8009f3c:	08009ff3 	.word	0x08009ff3
 8009f40:	08009ff3 	.word	0x08009ff3
 8009f44:	08009fbf 	.word	0x08009fbf
 8009f48:	08009ff3 	.word	0x08009ff3
 8009f4c:	08009ff3 	.word	0x08009ff3
 8009f50:	08009ff3 	.word	0x08009ff3
 8009f54:	08009ff3 	.word	0x08009ff3
 8009f58:	08009ff3 	.word	0x08009ff3
 8009f5c:	08009ff3 	.word	0x08009ff3
 8009f60:	08009ff3 	.word	0x08009ff3
 8009f64:	08009ff3 	.word	0x08009ff3
 8009f68:	08009ff3 	.word	0x08009ff3
 8009f6c:	08009ff3 	.word	0x08009ff3
 8009f70:	08009ff3 	.word	0x08009ff3
 8009f74:	08009ff3 	.word	0x08009ff3
 8009f78:	08009ff3 	.word	0x08009ff3
 8009f7c:	08009ff3 	.word	0x08009ff3
 8009f80:	08009ff3 	.word	0x08009ff3
 8009f84:	08009fe5 	.word	0x08009fe5
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d02e      	beq.n	8009fea <UART_SetConfig+0x8aa>
 8009f8c:	e031      	b.n	8009ff2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f8e:	f7fc faed 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8009f92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f94:	e033      	b.n	8009ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f96:	f7fc faff 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8009f9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f9c:	e02f      	b.n	8009ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe faae 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fac:	e027      	b.n	8009ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fae:	f107 0318 	add.w	r3, r7, #24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fbfa 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fbc:	e01f      	b.n	8009ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fbe:	4b2d      	ldr	r3, [pc, #180]	; (800a074 <UART_SetConfig+0x934>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <UART_SetConfig+0x934>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	f003 0303 	and.w	r3, r3, #3
 8009fd4:	4a24      	ldr	r2, [pc, #144]	; (800a068 <UART_SetConfig+0x928>)
 8009fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fdc:	e00f      	b.n	8009ffe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009fde:	4b22      	ldr	r3, [pc, #136]	; (800a068 <UART_SetConfig+0x928>)
 8009fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe2:	e00c      	b.n	8009ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fe4:	4b21      	ldr	r3, [pc, #132]	; (800a06c <UART_SetConfig+0x92c>)
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe8:	e009      	b.n	8009ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff0:	e005      	b.n	8009ffe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 80e7 	beq.w	800a1d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	4a19      	ldr	r2, [pc, #100]	; (800a070 <UART_SetConfig+0x930>)
 800a00c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a010:	461a      	mov	r2, r3
 800a012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a014:	fbb3 f3f2 	udiv	r3, r3, r2
 800a018:	005a      	lsls	r2, r3, #1
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	441a      	add	r2, r3
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	2b0f      	cmp	r3, #15
 800a030:	d916      	bls.n	800a060 <UART_SetConfig+0x920>
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a038:	d212      	bcs.n	800a060 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f023 030f 	bic.w	r3, r3, #15
 800a042:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f003 0307 	and.w	r3, r3, #7
 800a04e:	b29a      	uxth	r2, r3
 800a050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a052:	4313      	orrs	r3, r2
 800a054:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a05c:	60da      	str	r2, [r3, #12]
 800a05e:	e0b9      	b.n	800a1d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a066:	e0b5      	b.n	800a1d4 <UART_SetConfig+0xa94>
 800a068:	03d09000 	.word	0x03d09000
 800a06c:	003d0900 	.word	0x003d0900
 800a070:	0800b2c8 	.word	0x0800b2c8
 800a074:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a078:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	dc49      	bgt.n	800a114 <UART_SetConfig+0x9d4>
 800a080:	2b00      	cmp	r3, #0
 800a082:	db7c      	blt.n	800a17e <UART_SetConfig+0xa3e>
 800a084:	2b20      	cmp	r3, #32
 800a086:	d87a      	bhi.n	800a17e <UART_SetConfig+0xa3e>
 800a088:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <UART_SetConfig+0x950>)
 800a08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08e:	bf00      	nop
 800a090:	0800a11b 	.word	0x0800a11b
 800a094:	0800a123 	.word	0x0800a123
 800a098:	0800a17f 	.word	0x0800a17f
 800a09c:	0800a17f 	.word	0x0800a17f
 800a0a0:	0800a12b 	.word	0x0800a12b
 800a0a4:	0800a17f 	.word	0x0800a17f
 800a0a8:	0800a17f 	.word	0x0800a17f
 800a0ac:	0800a17f 	.word	0x0800a17f
 800a0b0:	0800a13b 	.word	0x0800a13b
 800a0b4:	0800a17f 	.word	0x0800a17f
 800a0b8:	0800a17f 	.word	0x0800a17f
 800a0bc:	0800a17f 	.word	0x0800a17f
 800a0c0:	0800a17f 	.word	0x0800a17f
 800a0c4:	0800a17f 	.word	0x0800a17f
 800a0c8:	0800a17f 	.word	0x0800a17f
 800a0cc:	0800a17f 	.word	0x0800a17f
 800a0d0:	0800a14b 	.word	0x0800a14b
 800a0d4:	0800a17f 	.word	0x0800a17f
 800a0d8:	0800a17f 	.word	0x0800a17f
 800a0dc:	0800a17f 	.word	0x0800a17f
 800a0e0:	0800a17f 	.word	0x0800a17f
 800a0e4:	0800a17f 	.word	0x0800a17f
 800a0e8:	0800a17f 	.word	0x0800a17f
 800a0ec:	0800a17f 	.word	0x0800a17f
 800a0f0:	0800a17f 	.word	0x0800a17f
 800a0f4:	0800a17f 	.word	0x0800a17f
 800a0f8:	0800a17f 	.word	0x0800a17f
 800a0fc:	0800a17f 	.word	0x0800a17f
 800a100:	0800a17f 	.word	0x0800a17f
 800a104:	0800a17f 	.word	0x0800a17f
 800a108:	0800a17f 	.word	0x0800a17f
 800a10c:	0800a17f 	.word	0x0800a17f
 800a110:	0800a171 	.word	0x0800a171
 800a114:	2b40      	cmp	r3, #64	; 0x40
 800a116:	d02e      	beq.n	800a176 <UART_SetConfig+0xa36>
 800a118:	e031      	b.n	800a17e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a11a:	f7fc fa27 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800a11e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a120:	e033      	b.n	800a18a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a122:	f7fc fa39 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 800a126:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a128:	e02f      	b.n	800a18a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a12a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe f9e8 	bl	8008504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a138:	e027      	b.n	800a18a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a13a:	f107 0318 	add.w	r3, r7, #24
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fb34 	bl	80087ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a148:	e01f      	b.n	800a18a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a14a:	4b2d      	ldr	r3, [pc, #180]	; (800a200 <UART_SetConfig+0xac0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0320 	and.w	r3, r3, #32
 800a152:	2b00      	cmp	r3, #0
 800a154:	d009      	beq.n	800a16a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a156:	4b2a      	ldr	r3, [pc, #168]	; (800a200 <UART_SetConfig+0xac0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	08db      	lsrs	r3, r3, #3
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	4a28      	ldr	r2, [pc, #160]	; (800a204 <UART_SetConfig+0xac4>)
 800a162:	fa22 f303 	lsr.w	r3, r2, r3
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a168:	e00f      	b.n	800a18a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a16a:	4b26      	ldr	r3, [pc, #152]	; (800a204 <UART_SetConfig+0xac4>)
 800a16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a16e:	e00c      	b.n	800a18a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a170:	4b25      	ldr	r3, [pc, #148]	; (800a208 <UART_SetConfig+0xac8>)
 800a172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a174:	e009      	b.n	800a18a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a17c:	e005      	b.n	800a18a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a188:	bf00      	nop
    }

    if (pclk != 0U)
 800a18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d021      	beq.n	800a1d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	4a1d      	ldr	r2, [pc, #116]	; (800a20c <UART_SetConfig+0xacc>)
 800a196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a19a:	461a      	mov	r2, r3
 800a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	441a      	add	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d909      	bls.n	800a1ce <UART_SetConfig+0xa8e>
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c0:	d205      	bcs.n	800a1ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60da      	str	r2, [r3, #12]
 800a1cc:	e002      	b.n	800a1d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a1f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3748      	adds	r7, #72	; 0x48
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1fe:	bf00      	nop
 800a200:	58024400 	.word	0x58024400
 800a204:	03d09000 	.word	0x03d09000
 800a208:	003d0900 	.word	0x003d0900
 800a20c:	0800b2c8 	.word	0x0800b2c8

0800a210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f003 0302 	and.w	r3, r3, #2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01a      	beq.n	800a326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30e:	d10a      	bne.n	800a326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
  }
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b098      	sub	sp, #96	; 0x60
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a364:	f7f8 f8ba 	bl	80024dc <HAL_GetTick>
 800a368:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b08      	cmp	r3, #8
 800a376:	d12f      	bne.n	800a3d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a380:	2200      	movs	r2, #0
 800a382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f88e 	bl	800a4a8 <UART_WaitOnFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d022      	beq.n	800a3d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e6      	bne.n	800a392 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e063      	b.n	800a4a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d149      	bne.n	800a47a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f857 	bl	800a4a8 <UART_WaitOnFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d03c      	beq.n	800a47a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	623b      	str	r3, [r7, #32]
   return(result);
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a414:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a41e:	633b      	str	r3, [r7, #48]	; 0x30
 800a420:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e6      	bne.n	800a400 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3308      	adds	r3, #8
 800a438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	60fb      	str	r3, [r7, #12]
   return(result);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f023 0301 	bic.w	r3, r3, #1
 800a448:	64bb      	str	r3, [r7, #72]	; 0x48
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3308      	adds	r3, #8
 800a450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a452:	61fa      	str	r2, [r7, #28]
 800a454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	69b9      	ldr	r1, [r7, #24]
 800a458:	69fa      	ldr	r2, [r7, #28]
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	617b      	str	r3, [r7, #20]
   return(result);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e5      	bne.n	800a432 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e012      	b.n	800a4a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2220      	movs	r2, #32
 800a486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3758      	adds	r7, #88	; 0x58
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b8:	e049      	b.n	800a54e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c0:	d045      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4c2:	f7f8 f80b 	bl	80024dc <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d302      	bcc.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e048      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0304 	and.w	r3, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d031      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d110      	bne.n	800a51a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 f839 	bl	800a578 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2208      	movs	r2, #8
 800a50a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e029      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a528:	d111      	bne.n	800a54e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 f81f 	bl	800a578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e00f      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	bf0c      	ite	eq
 800a55e:	2301      	moveq	r3, #1
 800a560:	2300      	movne	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	461a      	mov	r2, r3
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d0a6      	beq.n	800a4ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b095      	sub	sp, #84	; 0x54
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a588:	e853 3f00 	ldrex	r3, [r3]
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a594:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a59e:	643b      	str	r3, [r7, #64]	; 0x40
 800a5a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e6      	bne.n	800a580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <UART_EndRxTransfer+0xc8>)
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e5      	bne.n	800a5b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d118      	bne.n	800a620 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f023 0310 	bic.w	r3, r3, #16
 800a602:	647b      	str	r3, [r7, #68]	; 0x44
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	461a      	mov	r2, r3
 800a60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a60c:	61bb      	str	r3, [r7, #24]
 800a60e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	6979      	ldr	r1, [r7, #20]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	e841 2300 	strex	r3, r2, [r1]
 800a618:	613b      	str	r3, [r7, #16]
   return(result);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1e6      	bne.n	800a5ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2220      	movs	r2, #32
 800a624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a634:	bf00      	nop
 800a636:	3754      	adds	r7, #84	; 0x54
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	effffffe 	.word	0xeffffffe

0800a644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a652:	2b01      	cmp	r3, #1
 800a654:	d101      	bne.n	800a65a <HAL_UARTEx_DisableFifoMode+0x16>
 800a656:	2302      	movs	r3, #2
 800a658:	e027      	b.n	800a6aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2224      	movs	r2, #36	; 0x24
 800a666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0201 	bic.w	r2, r2, #1
 800a680:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d101      	bne.n	800a6ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e02d      	b.n	800a72a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2224      	movs	r2, #36	; 0x24
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0201 	bic.w	r2, r2, #1
 800a6f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f850 	bl	800a7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a742:	2b01      	cmp	r3, #1
 800a744:	d101      	bne.n	800a74a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a746:	2302      	movs	r3, #2
 800a748:	e02d      	b.n	800a7a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2224      	movs	r2, #36	; 0x24
 800a756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0201 	bic.w	r2, r2, #1
 800a770:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f812 	bl	800a7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2220      	movs	r2, #32
 800a798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d108      	bne.n	800a7d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7d0:	e031      	b.n	800a836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7d2:	2310      	movs	r3, #16
 800a7d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7d6:	2310      	movs	r3, #16
 800a7d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	0e5b      	lsrs	r3, r3, #25
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	0f5b      	lsrs	r3, r3, #29
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0307 	and.w	r3, r3, #7
 800a7f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
 800a7fc:	7b3a      	ldrb	r2, [r7, #12]
 800a7fe:	4911      	ldr	r1, [pc, #68]	; (800a844 <UARTEx_SetNbDataToProcess+0x94>)
 800a800:	5c8a      	ldrb	r2, [r1, r2]
 800a802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a806:	7b3a      	ldrb	r2, [r7, #12]
 800a808:	490f      	ldr	r1, [pc, #60]	; (800a848 <UARTEx_SetNbDataToProcess+0x98>)
 800a80a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a80c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	7b7a      	ldrb	r2, [r7, #13]
 800a81c:	4909      	ldr	r1, [pc, #36]	; (800a844 <UARTEx_SetNbDataToProcess+0x94>)
 800a81e:	5c8a      	ldrb	r2, [r1, r2]
 800a820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a824:	7b7a      	ldrb	r2, [r7, #13]
 800a826:	4908      	ldr	r1, [pc, #32]	; (800a848 <UARTEx_SetNbDataToProcess+0x98>)
 800a828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a82a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a836:	bf00      	nop
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	0800b2e0 	.word	0x0800b2e0
 800a848:	0800b2e8 	.word	0x0800b2e8

0800a84c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	6812      	ldr	r2, [r2, #0]
 800a864:	f023 0101 	bic.w	r1, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	2b08      	cmp	r3, #8
 800a874:	d102      	bne.n	800a87c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	e001      	b.n	800a880 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a88c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a892:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a898:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a89e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a8a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a8aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a8b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a8b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a8bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a8e4:	4b20      	ldr	r3, [pc, #128]	; (800a968 <FMC_NORSRAM_Init+0x11c>)
 800a8e6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8ee:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8f6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a8fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	43db      	mvns	r3, r3
 800a90e:	ea02 0103 	and.w	r1, r2, r3
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4319      	orrs	r1, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a928:	d10c      	bne.n	800a944 <FMC_NORSRAM_Init+0xf8>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d008      	beq.n	800a944 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93e:	431a      	orrs	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d006      	beq.n	800a95a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a954:	431a      	orrs	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	371c      	adds	r7, #28
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	0008fb7f 	.word	0x0008fb7f

0800a96c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a982:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	431a      	orrs	r2, r3
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	431a      	orrs	r2, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	041b      	lsls	r3, r3, #16
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	051b      	lsls	r3, r3, #20
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	3b02      	subs	r3, #2
 800a9b2:	061b      	lsls	r3, r3, #24
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	3201      	adds	r2, #1
 800a9c0:	4319      	orrs	r1, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9d4:	d113      	bne.n	800a9fe <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9de:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	051b      	lsls	r3, r3, #20
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	371c      	adds	r7, #28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa20:	d11d      	bne.n	800aa5e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa2a:	4b13      	ldr	r3, [pc, #76]	; (800aa78 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	6811      	ldr	r1, [r2, #0]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	6852      	ldr	r2, [r2, #4]
 800aa36:	0112      	lsls	r2, r2, #4
 800aa38:	4311      	orrs	r1, r2
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	6892      	ldr	r2, [r2, #8]
 800aa3e:	0212      	lsls	r2, r2, #8
 800aa40:	4311      	orrs	r1, r2
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	6992      	ldr	r2, [r2, #24]
 800aa46:	4311      	orrs	r1, r2
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	68d2      	ldr	r2, [r2, #12]
 800aa4c:	0412      	lsls	r2, r2, #16
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	ea43 0102 	orr.w	r1, r3, r2
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aa5c:	e005      	b.n	800aa6a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800aa66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	cff00000 	.word	0xcff00000

0800aa7c <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d121      	bne.n	800aafe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4b27      	ldr	r3, [pc, #156]	; (800ab5c <FMC_SDRAM_Init+0xb4>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	6851      	ldr	r1, [r2, #4]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	6892      	ldr	r2, [r2, #8]
 800aaca:	4311      	orrs	r1, r2
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	68d2      	ldr	r2, [r2, #12]
 800aad0:	4311      	orrs	r1, r2
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	6912      	ldr	r2, [r2, #16]
 800aad6:	4311      	orrs	r1, r2
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	6952      	ldr	r2, [r2, #20]
 800aadc:	4311      	orrs	r1, r2
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	6992      	ldr	r2, [r2, #24]
 800aae2:	4311      	orrs	r1, r2
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	69d2      	ldr	r2, [r2, #28]
 800aae8:	4311      	orrs	r1, r2
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	6a12      	ldr	r2, [r2, #32]
 800aaee:	4311      	orrs	r1, r2
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	e026      	b.n	800ab4c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	69d9      	ldr	r1, [r3, #28]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	4319      	orrs	r1, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	430b      	orrs	r3, r1
 800ab16:	431a      	orrs	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <FMC_SDRAM_Init+0xb4>)
 800ab22:	4013      	ands	r3, r2
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	6851      	ldr	r1, [r2, #4]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	6892      	ldr	r2, [r2, #8]
 800ab2c:	4311      	orrs	r1, r2
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	68d2      	ldr	r2, [r2, #12]
 800ab32:	4311      	orrs	r1, r2
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	6912      	ldr	r2, [r2, #16]
 800ab38:	4311      	orrs	r1, r2
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	6952      	ldr	r2, [r2, #20]
 800ab3e:	4311      	orrs	r1, r2
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	6992      	ldr	r2, [r2, #24]
 800ab44:	430a      	orrs	r2, r1
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	ffff8000 	.word	0xffff8000

0800ab60 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d128      	bne.n	800abc4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	1e59      	subs	r1, r3, #1
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	4319      	orrs	r1, r3
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	021b      	lsls	r3, r3, #8
 800ab92:	4319      	orrs	r1, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	031b      	lsls	r3, r3, #12
 800ab9c:	4319      	orrs	r1, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	3b01      	subs	r3, #1
 800aba4:	041b      	lsls	r3, r3, #16
 800aba6:	4319      	orrs	r1, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	3b01      	subs	r3, #1
 800abae:	051b      	lsls	r3, r3, #20
 800abb0:	4319      	orrs	r1, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	061b      	lsls	r3, r3, #24
 800abba:	430b      	orrs	r3, r1
 800abbc:	431a      	orrs	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	609a      	str	r2, [r3, #8]
 800abc2:	e02d      	b.n	800ac20 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <FMC_SDRAM_Timing_Init+0xd0>)
 800abca:	4013      	ands	r3, r2
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	68d2      	ldr	r2, [r2, #12]
 800abd0:	3a01      	subs	r2, #1
 800abd2:	0311      	lsls	r1, r2, #12
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	6952      	ldr	r2, [r2, #20]
 800abd8:	3a01      	subs	r2, #1
 800abda:	0512      	lsls	r2, r2, #20
 800abdc:	430a      	orrs	r2, r1
 800abde:	431a      	orrs	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	1e59      	subs	r1, r3, #1
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	011b      	lsls	r3, r3, #4
 800abfa:	4319      	orrs	r1, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	021b      	lsls	r3, r3, #8
 800ac04:	4319      	orrs	r1, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	041b      	lsls	r3, r3, #16
 800ac0e:	4319      	orrs	r1, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	061b      	lsls	r3, r3, #24
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	431a      	orrs	r2, r3
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	ff0f0fff 	.word	0xff0f0fff

0800ac34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac34:	b084      	sub	sp, #16
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	f107 001c 	add.w	r0, r7, #28
 800ac42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d120      	bne.n	800ac8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <USB_CoreInit+0xd4>)
 800ac5e:	4013      	ands	r3, r2
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d105      	bne.n	800ac82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 faac 	bl	800b1e0 <USB_CoreReset>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]
 800ac8c:	e01a      	b.n	800acc4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 faa0 	bl	800b1e0 <USB_CoreReset>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d106      	bne.n	800acb8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	639a      	str	r2, [r3, #56]	; 0x38
 800acb6:	e005      	b.n	800acc4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d116      	bne.n	800acf8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acce:	b29a      	uxth	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800acd8:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <USB_CoreInit+0xd8>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f043 0206 	orr.w	r2, r3, #6
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f043 0220 	orr.w	r2, r3, #32
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad04:	b004      	add	sp, #16
 800ad06:	4770      	bx	lr
 800ad08:	ffbdffbf 	.word	0xffbdffbf
 800ad0c:	03ee0000 	.word	0x03ee0000

0800ad10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f023 0201 	bic.w	r2, r3, #1
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d115      	bne.n	800ad80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad60:	2001      	movs	r0, #1
 800ad62:	f7f7 fbc7 	bl	80024f4 <HAL_Delay>
      ms++;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa29 	bl	800b1c4 <USB_GetMode>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d01e      	beq.n	800adb6 <USB_SetCurrentMode+0x84>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b31      	cmp	r3, #49	; 0x31
 800ad7c:	d9f0      	bls.n	800ad60 <USB_SetCurrentMode+0x2e>
 800ad7e:	e01a      	b.n	800adb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d115      	bne.n	800adb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad92:	2001      	movs	r0, #1
 800ad94:	f7f7 fbae 	bl	80024f4 <HAL_Delay>
      ms++;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa10 	bl	800b1c4 <USB_GetMode>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <USB_SetCurrentMode+0x84>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b31      	cmp	r3, #49	; 0x31
 800adae:	d9f0      	bls.n	800ad92 <USB_SetCurrentMode+0x60>
 800adb0:	e001      	b.n	800adb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e005      	b.n	800adc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b32      	cmp	r3, #50	; 0x32
 800adba:	d101      	bne.n	800adc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adcc:	b084      	sub	sp, #16
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800adda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ade6:	2300      	movs	r3, #0
 800ade8:	613b      	str	r3, [r7, #16]
 800adea:	e009      	b.n	800ae00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	3340      	adds	r3, #64	; 0x40
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	3301      	adds	r3, #1
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b0e      	cmp	r3, #14
 800ae04:	d9f2      	bls.n	800adec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11c      	bne.n	800ae46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae1a:	f043 0302 	orr.w	r3, r3, #2
 800ae1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	e005      	b.n	800ae52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae58:	461a      	mov	r2, r3
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae64:	4619      	mov	r1, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	680b      	ldr	r3, [r1, #0]
 800ae70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10c      	bne.n	800ae92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d104      	bne.n	800ae88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae7e:	2100      	movs	r1, #0
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f965 	bl	800b150 <USB_SetDevSpeed>
 800ae86:	e008      	b.n	800ae9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae88:	2101      	movs	r1, #1
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f960 	bl	800b150 <USB_SetDevSpeed>
 800ae90:	e003      	b.n	800ae9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae92:	2103      	movs	r1, #3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f95b 	bl	800b150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae9a:	2110      	movs	r1, #16
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f8f3 	bl	800b088 <USB_FlushTxFifo>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f91f 	bl	800b0f0 <USB_FlushRxFifo>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec2:	461a      	mov	r2, r3
 800aec4:	2300      	movs	r3, #0
 800aec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aece:	461a      	mov	r2, r3
 800aed0:	2300      	movs	r3, #0
 800aed2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeda:	461a      	mov	r2, r3
 800aedc:	2300      	movs	r3, #0
 800aede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	e043      	b.n	800af6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	015a      	lsls	r2, r3, #5
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	4413      	add	r3, r2
 800aeee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aefc:	d118      	bne.n	800af30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10a      	bne.n	800af1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af10:	461a      	mov	r2, r3
 800af12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	e013      	b.n	800af42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af26:	461a      	mov	r2, r3
 800af28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	e008      	b.n	800af42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3c:	461a      	mov	r2, r3
 800af3e:	2300      	movs	r3, #0
 800af40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	015a      	lsls	r2, r3, #5
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	4413      	add	r3, r2
 800af4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af4e:	461a      	mov	r2, r3
 800af50:	2300      	movs	r3, #0
 800af52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af60:	461a      	mov	r2, r3
 800af62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	3301      	adds	r3, #1
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	429a      	cmp	r2, r3
 800af74:	d3b7      	bcc.n	800aee6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	e043      	b.n	800b004 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af92:	d118      	bne.n	800afc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa6:	461a      	mov	r2, r3
 800afa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	e013      	b.n	800afd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbc:	461a      	mov	r2, r3
 800afbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	e008      	b.n	800afd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd2:	461a      	mov	r2, r3
 800afd4:	2300      	movs	r3, #0
 800afd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe4:	461a      	mov	r2, r3
 800afe6:	2300      	movs	r3, #0
 800afe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff6:	461a      	mov	r2, r3
 800aff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800affc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	3301      	adds	r3, #1
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d3b7      	bcc.n	800af7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b01a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b01e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b02c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	2b00      	cmp	r3, #0
 800b032:	d105      	bne.n	800b040 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	f043 0210 	orr.w	r2, r3, #16
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	699a      	ldr	r2, [r3, #24]
 800b044:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <USB_DevInit+0x2b4>)
 800b046:	4313      	orrs	r3, r2
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d005      	beq.n	800b05e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	f043 0208 	orr.w	r2, r3, #8
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b060:	2b01      	cmp	r3, #1
 800b062:	d105      	bne.n	800b070 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	699a      	ldr	r2, [r3, #24]
 800b068:	4b06      	ldr	r3, [pc, #24]	; (800b084 <USB_DevInit+0x2b8>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b07c:	b004      	add	sp, #16
 800b07e:	4770      	bx	lr
 800b080:	803c3800 	.word	0x803c3800
 800b084:	40000004 	.word	0x40000004

0800b088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <USB_FlushTxFifo+0x64>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d901      	bls.n	800b0a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e01b      	b.n	800b0e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	daf2      	bge.n	800b096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	019b      	lsls	r3, r3, #6
 800b0b8:	f043 0220 	orr.w	r2, r3, #32
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	4a08      	ldr	r2, [pc, #32]	; (800b0ec <USB_FlushTxFifo+0x64>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d901      	bls.n	800b0d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e006      	b.n	800b0e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d0f0      	beq.n	800b0c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	00030d40 	.word	0x00030d40

0800b0f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3301      	adds	r3, #1
 800b100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	4a11      	ldr	r2, [pc, #68]	; (800b14c <USB_FlushRxFifo+0x5c>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d901      	bls.n	800b10e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e018      	b.n	800b140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	daf2      	bge.n	800b0fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2210      	movs	r2, #16
 800b11e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4a08      	ldr	r2, [pc, #32]	; (800b14c <USB_FlushRxFifo+0x5c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d901      	bls.n	800b132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e006      	b.n	800b140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0310 	and.w	r3, r3, #16
 800b13a:	2b10      	cmp	r3, #16
 800b13c:	d0f0      	beq.n	800b120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3714      	adds	r7, #20
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	00030d40 	.word	0x00030d40

0800b150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	68f9      	ldr	r1, [r7, #12]
 800b16c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b170:	4313      	orrs	r3, r2
 800b172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b182:	b480      	push	{r7}
 800b184:	b085      	sub	sp, #20
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b19c:	f023 0303 	bic.w	r3, r3, #3
 800b1a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1b0:	f043 0302 	orr.w	r3, r3, #2
 800b1b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3714      	adds	r7, #20
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	f003 0301 	and.w	r3, r3, #1
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	4a13      	ldr	r2, [pc, #76]	; (800b244 <USB_CoreReset+0x64>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d901      	bls.n	800b1fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e01b      	b.n	800b236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	daf2      	bge.n	800b1ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	f043 0201 	orr.w	r2, r3, #1
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4a09      	ldr	r2, [pc, #36]	; (800b244 <USB_CoreReset+0x64>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d901      	bls.n	800b228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e006      	b.n	800b236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b01      	cmp	r3, #1
 800b232:	d0f0      	beq.n	800b216 <USB_CoreReset+0x36>

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	00030d40 	.word	0x00030d40

0800b248 <__libc_init_array>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4d0d      	ldr	r5, [pc, #52]	; (800b280 <__libc_init_array+0x38>)
 800b24c:	4c0d      	ldr	r4, [pc, #52]	; (800b284 <__libc_init_array+0x3c>)
 800b24e:	1b64      	subs	r4, r4, r5
 800b250:	10a4      	asrs	r4, r4, #2
 800b252:	2600      	movs	r6, #0
 800b254:	42a6      	cmp	r6, r4
 800b256:	d109      	bne.n	800b26c <__libc_init_array+0x24>
 800b258:	4d0b      	ldr	r5, [pc, #44]	; (800b288 <__libc_init_array+0x40>)
 800b25a:	4c0c      	ldr	r4, [pc, #48]	; (800b28c <__libc_init_array+0x44>)
 800b25c:	f000 f820 	bl	800b2a0 <_init>
 800b260:	1b64      	subs	r4, r4, r5
 800b262:	10a4      	asrs	r4, r4, #2
 800b264:	2600      	movs	r6, #0
 800b266:	42a6      	cmp	r6, r4
 800b268:	d105      	bne.n	800b276 <__libc_init_array+0x2e>
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b270:	4798      	blx	r3
 800b272:	3601      	adds	r6, #1
 800b274:	e7ee      	b.n	800b254 <__libc_init_array+0xc>
 800b276:	f855 3b04 	ldr.w	r3, [r5], #4
 800b27a:	4798      	blx	r3
 800b27c:	3601      	adds	r6, #1
 800b27e:	e7f2      	b.n	800b266 <__libc_init_array+0x1e>
 800b280:	0800b2f8 	.word	0x0800b2f8
 800b284:	0800b2f8 	.word	0x0800b2f8
 800b288:	0800b2f8 	.word	0x0800b2f8
 800b28c:	0800b2fc 	.word	0x0800b2fc

0800b290 <memset>:
 800b290:	4402      	add	r2, r0
 800b292:	4603      	mov	r3, r0
 800b294:	4293      	cmp	r3, r2
 800b296:	d100      	bne.n	800b29a <memset+0xa>
 800b298:	4770      	bx	lr
 800b29a:	f803 1b01 	strb.w	r1, [r3], #1
 800b29e:	e7f9      	b.n	800b294 <memset+0x4>

0800b2a0 <_init>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	bf00      	nop
 800b2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a6:	bc08      	pop	{r3}
 800b2a8:	469e      	mov	lr, r3
 800b2aa:	4770      	bx	lr

0800b2ac <_fini>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	bf00      	nop
 800b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b2:	bc08      	pop	{r3}
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	4770      	bx	lr
