
Idea.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000040e0  24000014  08005f64  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240040f4  08005f64  000240f4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016634  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f34  00000000  00000000  00036676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001368  00000000  00000000  000395b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001210  00000000  00000000  0003a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003819c  00000000  00000000  0003bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000167e8  00000000  00000000  00073cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00165048  00000000  00000000  0008a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ef4f4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000509c  00000000  00000000  001ef544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005e74 	.word	0x08005e74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08005e74 	.word	0x08005e74

080002e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <vApplicationGetIdleTaskMemory+0x2c>)
 80002f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <vApplicationGetIdleTaskMemory+0x30>)
 80002f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2280      	movs	r2, #128	; 0x80
 80002fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	24000030 	.word	0x24000030
 8000310:	24000084 	.word	0x24000084

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b5b0      	push	{r4, r5, r7, lr}
 8000316:	b09c      	sub	sp, #112	; 0x70
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f000 fe53 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f863 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 f9af 	bl	8000684 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000326:	f000 f8e5 	bl	80004f4 <MX_LTDC_Init>
  MX_RNG_Init();
 800032a:	f000 f995 	bl	8000658 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED_1Blinker */
  osThreadDef(LED_1Blinker, StartBlinking1, osPriorityNormal, 0, 128);
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <main+0xb4>)
 8000330:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000334:	461d      	mov	r5, r3
 8000336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_1BlinkerHandle = osThreadCreate(osThread(LED_1Blinker), NULL);
 8000342:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f004 fb3c 	bl	80049c6 <osThreadCreate>
 800034e:	4603      	mov	r3, r0
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <main+0xb8>)
 8000352:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_3Blinker */
  osThreadDef(LED_3Blinker, StartBlinking3, osPriorityNormal, 0, 128);
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <main+0xbc>)
 8000356:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800035a:	461d      	mov	r5, r3
 800035c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_3BlinkerHandle = osThreadCreate(osThread(LED_3Blinker), NULL);
 8000368:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f004 fb29 	bl	80049c6 <osThreadCreate>
 8000374:	4603      	mov	r3, r0
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <main+0xc0>)
 8000378:	6013      	str	r3, [r2, #0]

  /* definition and creation of ResetLED */
  osThreadDef(ResetLED, StartReset, osPriorityBelowNormal, 0, 128);
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <main+0xc4>)
 800037c:	f107 041c 	add.w	r4, r7, #28
 8000380:	461d      	mov	r5, r3
 8000382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800038a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ResetLEDHandle = osThreadCreate(osThread(ResetLED), NULL);
 800038e:	f107 031c 	add.w	r3, r7, #28
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f004 fb16 	bl	80049c6 <osThreadCreate>
 800039a:	4603      	mov	r3, r0
 800039c:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <main+0xc8>)
 800039e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SetLED */
  osThreadDef(SetLED, StartSet, osPriorityBelowNormal, 0, 128);
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <main+0xcc>)
 80003a2:	463c      	mov	r4, r7
 80003a4:	461d      	mov	r5, r3
 80003a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SetLEDHandle = osThreadCreate(osThread(SetLED), NULL);
 80003b2:	463b      	mov	r3, r7
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 fb05 	bl	80049c6 <osThreadCreate>
 80003bc:	4603      	mov	r3, r0
 80003be:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <main+0xd0>)
 80003c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003c2:	f004 faf9 	bl	80049b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <main+0xb2>
 80003c8:	08005ec0 	.word	0x08005ec0
 80003cc:	24000340 	.word	0x24000340
 80003d0:	08005edc 	.word	0x08005edc
 80003d4:	24000344 	.word	0x24000344
 80003d8:	08005ef8 	.word	0x08005ef8
 80003dc:	24000348 	.word	0x24000348
 80003e0:	08005f14 	.word	0x08005f14
 80003e4:	2400034c 	.word	0x2400034c

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b09c      	sub	sp, #112	; 0x70
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	224c      	movs	r2, #76	; 0x4c
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f005 fd34 	bl	8005e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2220      	movs	r2, #32
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f005 fd2e 	bl	8005e64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000408:	2002      	movs	r0, #2
 800040a:	f001 fbc7 	bl	8001b9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800040e:	2300      	movs	r3, #0
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	4b35      	ldr	r3, [pc, #212]	; (80004e8 <SystemClock_Config+0x100>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	4a34      	ldr	r2, [pc, #208]	; (80004e8 <SystemClock_Config+0x100>)
 8000418:	f023 0301 	bic.w	r3, r3, #1
 800041c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800041e:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <SystemClock_Config+0x100>)
 8000420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	4b30      	ldr	r3, [pc, #192]	; (80004ec <SystemClock_Config+0x104>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a2f      	ldr	r2, [pc, #188]	; (80004ec <SystemClock_Config+0x104>)
 800042e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <SystemClock_Config+0x104>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000440:	bf00      	nop
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <SystemClock_Config+0x104>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800044a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800044e:	d1f8      	bne.n	8000442 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000450:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <SystemClock_Config+0x108>)
 8000452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000454:	4a26      	ldr	r2, [pc, #152]	; (80004f0 <SystemClock_Config+0x108>)
 8000456:	f023 0303 	bic.w	r3, r3, #3
 800045a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800045c:	2322      	movs	r3, #34	; 0x22
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000460:	2301      	movs	r3, #1
 8000462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000464:	2340      	movs	r3, #64	; 0x40
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046c:	2302      	movs	r3, #2
 800046e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	2300      	movs	r3, #0
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000474:	2304      	movs	r3, #4
 8000476:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000478:	2309      	movs	r3, #9
 800047a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047c:	2302      	movs	r3, #2
 800047e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000480:	2301      	movs	r3, #1
 8000482:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000484:	2302      	movs	r3, #2
 8000486:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000488:	230c      	movs	r3, #12
 800048a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800048c:	2302      	movs	r3, #2
 800048e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000490:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000494:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fbb8 	bl	8001c10 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004a6:	f000 fa3d 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	233f      	movs	r3, #63	; 0x3f
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2303      	movs	r3, #3
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80004c2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80004c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2101      	movs	r1, #1
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fff7 	bl	80024c4 <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80004dc:	f000 fa22 	bl	8000924 <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3770      	adds	r7, #112	; 0x70
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	58000400 	.word	0x58000400
 80004ec:	58024800 	.word	0x58024800
 80004f0:	58024400 	.word	0x58024400

080004f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09a      	sub	sp, #104	; 0x68
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80004fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004fe:	2234      	movs	r2, #52	; 0x34
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f005 fcae 	bl	8005e64 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000508:	463b      	mov	r3, r7
 800050a:	2234      	movs	r2, #52	; 0x34
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f005 fca8 	bl	8005e64 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000514:	4b4e      	ldr	r3, [pc, #312]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000516:	4a4f      	ldr	r2, [pc, #316]	; (8000654 <MX_LTDC_Init+0x160>)
 8000518:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800051a:	4b4d      	ldr	r3, [pc, #308]	; (8000650 <MX_LTDC_Init+0x15c>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000520:	4b4b      	ldr	r3, [pc, #300]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000526:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800052c:	4b48      	ldr	r3, [pc, #288]	; (8000650 <MX_LTDC_Init+0x15c>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000532:	4b47      	ldr	r3, [pc, #284]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000534:	2207      	movs	r2, #7
 8000536:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000538:	4b45      	ldr	r3, [pc, #276]	; (8000650 <MX_LTDC_Init+0x15c>)
 800053a:	2203      	movs	r2, #3
 800053c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800053e:	4b44      	ldr	r3, [pc, #272]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000540:	220e      	movs	r2, #14
 8000542:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000544:	4b42      	ldr	r3, [pc, #264]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000546:	2205      	movs	r2, #5
 8000548:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800054a:	4b41      	ldr	r3, [pc, #260]	; (8000650 <MX_LTDC_Init+0x15c>)
 800054c:	f240 228e 	movw	r2, #654	; 0x28e
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000552:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000554:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800055a:	4b3d      	ldr	r3, [pc, #244]	; (8000650 <MX_LTDC_Init+0x15c>)
 800055c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000562:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000564:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800056a:	4b39      	ldr	r3, [pc, #228]	; (8000650 <MX_LTDC_Init+0x15c>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <MX_LTDC_Init+0x15c>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000582:	4833      	ldr	r0, [pc, #204]	; (8000650 <MX_LTDC_Init+0x15c>)
 8000584:	f001 f862 	bl	800164c <HAL_LTDC_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800058e:	f000 f9c9 	bl	8000924 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80005a2:	2300      	movs	r3, #0
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80005ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80005b4:	2305      	movs	r3, #5
 80005b6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80005d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <MX_LTDC_Init+0x15c>)
 80005e0:	f001 f904 	bl	80017ec <HAL_LTDC_ConfigLayer>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80005ea:	f000 f99b 	bl	8000924 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000610:	2305      	movs	r3, #5
 8000612:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_LTDC_Init+0x15c>)
 800063a:	f001 f8d7 	bl	80017ec <HAL_LTDC_ConfigLayer>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000644:	f000 f96e 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3768      	adds	r7, #104	; 0x68
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000284 	.word	0x24000284
 8000654:	50001000 	.word	0x50001000

08000658 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_RNG_Init+0x24>)
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MX_RNG_Init+0x28>)
 8000660:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_RNG_Init+0x24>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_RNG_Init+0x24>)
 800066a:	f003 fe51 	bl	8004310 <HAL_RNG_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000674:	f000 f956 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2400032c 	.word	0x2400032c
 8000680:	48021800 	.word	0x48021800

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b090      	sub	sp, #64	; 0x40
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800069a:	4b61      	ldr	r3, [pc, #388]	; (8000820 <MX_GPIO_Init+0x19c>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a5f      	ldr	r2, [pc, #380]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b5d      	ldr	r3, [pc, #372]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80006b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b8:	4b59      	ldr	r3, [pc, #356]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a58      	ldr	r2, [pc, #352]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b55      	ldr	r3, [pc, #340]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b52      	ldr	r3, [pc, #328]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a50      	ldr	r2, [pc, #320]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b4e      	ldr	r3, [pc, #312]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a49      	ldr	r2, [pc, #292]	; (8000820 <MX_GPIO_Init+0x19c>)
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b46      	ldr	r3, [pc, #280]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a41      	ldr	r2, [pc, #260]	; (8000820 <MX_GPIO_Init+0x19c>)
 800071a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000730:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	4a3a      	ldr	r2, [pc, #232]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	4a32      	ldr	r2, [pc, #200]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <MX_GPIO_Init+0x19c>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_GPIO_Init+0x19c>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_GPIO_Init+0x19c>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a23      	ldr	r2, [pc, #140]	; (8000820 <MX_GPIO_Init+0x19c>)
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_GPIO_Init+0x19c>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0x19c>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_GPIO_Init+0x19c>)
 80007b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0x19c>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <MX_GPIO_Init+0x1a0>)
 80007ce:	f000 ff09 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2110      	movs	r1, #16
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_GPIO_Init+0x1a4>)
 80007d8:	f000 ff04 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0x1a0>)
 80007f6:	f000 fd2d 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 80007fa:	2310      	movs	r3, #16
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_GPIO_Init+0x1a4>)
 8000812:	f000 fd1f 	bl	8001254 <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3740      	adds	r7, #64	; 0x40
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58024400 	.word	0x58024400
 8000824:	58021400 	.word	0x58021400
 8000828:	58020000 	.word	0x58020000

0800082c <StartBlinking1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinking1 */
void StartBlinking1(void const * argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOF,LED_1_Pin);
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <StartBlinking1+0x1c>)
 800083a:	f000 feec 	bl	8001616 <HAL_GPIO_TogglePin>
    osDelay(125);
 800083e:	207d      	movs	r0, #125	; 0x7d
 8000840:	f004 f90d 	bl	8004a5e <osDelay>
	HAL_GPIO_TogglePin(GPIOF,LED_1_Pin);
 8000844:	e7f6      	b.n	8000834 <StartBlinking1+0x8>
 8000846:	bf00      	nop
 8000848:	58021400 	.word	0x58021400

0800084c <StartBlinking3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinking3 */
void StartBlinking3(void const * argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinking3 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA,LED_3_Pin);
 8000854:	2110      	movs	r1, #16
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <StartBlinking3+0x18>)
 8000858:	f000 fedd 	bl	8001616 <HAL_GPIO_TogglePin>
    osDelay(235);
 800085c:	20eb      	movs	r0, #235	; 0xeb
 800085e:	f004 f8fe 	bl	8004a5e <osDelay>
	HAL_GPIO_TogglePin(GPIOA,LED_3_Pin);
 8000862:	e7f7      	b.n	8000854 <StartBlinking3+0x8>
 8000864:	58020000 	.word	0x58020000

08000868 <StartReset>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReset */
void StartReset(void const * argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReset */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOF,LED_1_Pin) != GPIO_PIN_SET){
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <StartReset+0x44>)
 8000876:	f000 fe9d 	bl	80015b4 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d004      	beq.n	800088a <StartReset+0x22>
		HAL_GPIO_TogglePin(GPIOF,LED_1_Pin);
 8000880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <StartReset+0x44>)
 8000886:	f000 fec6 	bl	8001616 <HAL_GPIO_TogglePin>
	}
	if(HAL_GPIO_ReadPin(GPIOA,LED_3_Pin) != GPIO_PIN_SET){
 800088a:	2110      	movs	r1, #16
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <StartReset+0x48>)
 800088e:	f000 fe91 	bl	80015b4 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d003      	beq.n	80008a0 <StartReset+0x38>
			HAL_GPIO_TogglePin(GPIOA,LED_3_Pin);
 8000898:	2110      	movs	r1, #16
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <StartReset+0x48>)
 800089c:	f000 febb 	bl	8001616 <HAL_GPIO_TogglePin>
	}
	//HAL_Delay(5000);
    osDelay(300);
 80008a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008a4:	f004 f8db 	bl	8004a5e <osDelay>
	if(HAL_GPIO_ReadPin(GPIOF,LED_1_Pin) != GPIO_PIN_SET){
 80008a8:	e7e2      	b.n	8000870 <StartReset+0x8>
 80008aa:	bf00      	nop
 80008ac:	58021400 	.word	0x58021400
 80008b0:	58020000 	.word	0x58020000

080008b4 <StartSet>:
  }
  /* USER CODE END StartReset */
}

void StartSet(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReset */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOF,LED_1_Pin) != GPIO_PIN_RESET){
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <StartSet+0x44>)
 80008c2:	f000 fe77 	bl	80015b4 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d004      	beq.n	80008d6 <StartSet+0x22>
		HAL_GPIO_TogglePin(GPIOF,LED_1_Pin);
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <StartSet+0x44>)
 80008d2:	f000 fea0 	bl	8001616 <HAL_GPIO_TogglePin>
	}
	if(HAL_GPIO_ReadPin(GPIOA,LED_3_Pin) != GPIO_PIN_RESET){
 80008d6:	2110      	movs	r1, #16
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <StartSet+0x48>)
 80008da:	f000 fe6b 	bl	80015b4 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d003      	beq.n	80008ec <StartSet+0x38>
			HAL_GPIO_TogglePin(GPIOA,LED_3_Pin);
 80008e4:	2110      	movs	r1, #16
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <StartSet+0x48>)
 80008e8:	f000 fe95 	bl	8001616 <HAL_GPIO_TogglePin>
	}
    osDelay(400);
 80008ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008f0:	f004 f8b5 	bl	8004a5e <osDelay>
	if(HAL_GPIO_ReadPin(GPIOF,LED_1_Pin) != GPIO_PIN_RESET){
 80008f4:	e7e2      	b.n	80008bc <StartSet+0x8>
 80008f6:	bf00      	nop
 80008f8:	58021400 	.word	0x58021400
 80008fc:	58020000 	.word	0x58020000

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 fb93 	bl	800103c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010000 	.word	0x40010000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x38>)
 8000938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_MspInit+0x38>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x38>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	210f      	movs	r1, #15
 8000958:	f06f 0001 	mvn.w	r0, #1
 800095c:	f000 fc52 	bl	8001204 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	58024400 	.word	0x58024400

0800096c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0c2      	sub	sp, #264	; 0x108
 8000970:	af00      	add	r7, sp, #0
 8000972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000990:	22c0      	movs	r2, #192	; 0xc0
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fa65 	bl	8005e64 <memset>
  if(hltdc->Instance==LTDC)
 800099a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800099e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4ac5      	ldr	r2, [pc, #788]	; (8000cbc <HAL_LTDC_MspInit+0x350>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	f040 8181 	bne.w	8000cb0 <HAL_LTDC_MspInit+0x344>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80009ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f927 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_LTDC_MspInit+0x84>
    {
      Error_Handler();
 80009ec:	f7ff ff9a 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80009f0:	4bb3      	ldr	r3, [pc, #716]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 80009f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80009f6:	4ab2      	ldr	r2, [pc, #712]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000a00:	4baf      	ldr	r3, [pc, #700]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a0e:	4bac      	ldr	r3, [pc, #688]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4aaa      	ldr	r2, [pc, #680]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4ba8      	ldr	r3, [pc, #672]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2c:	4ba4      	ldr	r3, [pc, #656]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4aa3      	ldr	r2, [pc, #652]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4ba0      	ldr	r3, [pc, #640]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b9d      	ldr	r3, [pc, #628]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a9b      	ldr	r2, [pc, #620]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b99      	ldr	r3, [pc, #612]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	623b      	str	r3, [r7, #32]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a68:	4b95      	ldr	r3, [pc, #596]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b91      	ldr	r3, [pc, #580]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	4b8e      	ldr	r3, [pc, #568]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a8c      	ldr	r2, [pc, #560]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b8a      	ldr	r3, [pc, #552]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa4:	4b86      	ldr	r3, [pc, #536]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a85      	ldr	r2, [pc, #532]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b82      	ldr	r3, [pc, #520]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ac2:	4b7f      	ldr	r3, [pc, #508]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a7d      	ldr	r2, [pc, #500]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b7b      	ldr	r3, [pc, #492]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b77      	ldr	r3, [pc, #476]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a76      	ldr	r2, [pc, #472]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b73      	ldr	r3, [pc, #460]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000afe:	4b70      	ldr	r3, [pc, #448]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	4a6e      	ldr	r2, [pc, #440]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0e:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <HAL_LTDC_MspInit+0x354>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b2a:	681b      	ldr	r3, [r3, #0]
    PG6     ------> LTDC_R7
    PA2     ------> LTDC_R1
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8000b2c:	f240 63f3 	movw	r3, #1779	; 0x6f3
 8000b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b46:	230e      	movs	r3, #14
 8000b48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000b50:	4619      	mov	r1, r3
 8000b52:	485c      	ldr	r0, [pc, #368]	; (8000cc4 <HAL_LTDC_MspInit+0x358>)
 8000b54:	f000 fb7e 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b58:	f44f 5373 	mov.w	r3, #15552	; 0x3cc0
 8000b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                          |GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b72:	230e      	movs	r3, #14
 8000b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4852      	ldr	r0, [pc, #328]	; (8000cc8 <HAL_LTDC_MspInit+0x35c>)
 8000b80:	f000 fb68 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b9e:	230e      	movs	r3, #14
 8000ba0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4848      	ldr	r0, [pc, #288]	; (8000ccc <HAL_LTDC_MspInit+0x360>)
 8000bac:	f000 fb52 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc8:	230e      	movs	r3, #14
 8000bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483e      	ldr	r0, [pc, #248]	; (8000cd0 <HAL_LTDC_MspInit+0x364>)
 8000bd6:	f000 fb3d 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_9;
 8000bda:	f44f 4362 	mov.w	r3, #57856	; 0xe200
 8000bde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf4:	230e      	movs	r3, #14
 8000bf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bfa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <HAL_LTDC_MspInit+0x368>)
 8000c02:	f000 fb27 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
 8000c06:	2370      	movs	r3, #112	; 0x70
 8000c08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1e:	230e      	movs	r3, #14
 8000c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482b      	ldr	r0, [pc, #172]	; (8000cd8 <HAL_LTDC_MspInit+0x36c>)
 8000c2c:	f000 fb12 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c48:	230e      	movs	r3, #14
 8000c4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c4e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_LTDC_MspInit+0x370>)
 8000c56:	f000 fafd 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_2;
 8000c5a:	f640 2304 	movw	r3, #2564	; 0xa04
 8000c5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c74:	230e      	movs	r3, #14
 8000c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <HAL_LTDC_MspInit+0x374>)
 8000c82:	f000 fae7 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c86:	2320      	movs	r3, #32
 8000c88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c9e:	230e      	movs	r3, #14
 8000ca0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ca4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <HAL_LTDC_MspInit+0x378>)
 8000cac:	f000 fad2 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	50001000 	.word	0x50001000
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58022000 	.word	0x58022000
 8000cc8:	58021800 	.word	0x58021800
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58020c00 	.word	0x58020c00
 8000cd4:	58021c00 	.word	0x58021c00
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	58022800 	.word	0x58022800
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	58022400 	.word	0x58022400

08000ce8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0b4      	sub	sp, #208	; 0xd0
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	22c0      	movs	r2, #192	; 0xc0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 f8b3 	bl	8005e64 <memset>
  if(hrng->Instance==RNG)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_RNG_MspInit+0x6c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d121      	bne.n	8000d4c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000d08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 ff88 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8000d2a:	f7ff fdfb 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_RNG_MspInit+0x70>)
 8000d30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_RNG_MspInit+0x70>)
 8000d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_RNG_MspInit+0x70>)
 8000d40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	37d0      	adds	r7, #208	; 0xd0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	48021800 	.word	0x48021800
 8000d58:	58024400 	.word	0x58024400

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	; 0x38
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d844      	bhi.n	8000df4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	2019      	movs	r0, #25
 8000d70:	f000 fa48 	bl	8001204 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d74:	2019      	movs	r0, #25
 8000d76:	f000 fa5f 	bl	8001238 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d7a:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <HAL_InitTick+0xb0>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_InitTick+0xb4>)
 8000d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_InitTick+0xb4>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <HAL_InitTick+0xb4>)
 8000d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 ff01 	bl	8002bb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000dae:	f001 fee9 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8000db2:	4603      	mov	r3, r0
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <HAL_InitTick+0xb8>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	0c9b      	lsrs	r3, r3, #18
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_InitTick+0xbc>)
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_InitTick+0xc0>)
 8000dca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0xbc>)
 8000dce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dd4:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_InitTick+0xbc>)
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_InitTick+0xbc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_InitTick+0xbc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <HAL_InitTick+0xbc>)
 8000de8:	f003 faf4 	bl	80043d4 <HAL_TIM_Base_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <HAL_InitTick+0xa6>
 8000df2:	e001      	b.n	8000df8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e005      	b.n	8000e04 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <HAL_InitTick+0xbc>)
 8000dfa:	f003 fb4d 	bl	8004498 <HAL_TIM_Base_Start_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3738      	adds	r7, #56	; 0x38
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000008 	.word	0x24000008
 8000e10:	58024400 	.word	0x58024400
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	24000350 	.word	0x24000350
 8000e1c:	40010000 	.word	0x40010000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM1_UP_IRQHandler+0x10>)
 8000e52:	f003 fb99 	bl	8004588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000350 	.word	0x24000350

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e64:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <SystemInit+0xe4>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a36      	ldr	r2, [pc, #216]	; (8000f44 <SystemInit+0xe4>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e74:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <SystemInit+0xe8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 030f 	and.w	r3, r3, #15
 8000e7c:	2b06      	cmp	r3, #6
 8000e7e:	d807      	bhi.n	8000e90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <SystemInit+0xe8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 030f 	bic.w	r3, r3, #15
 8000e88:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <SystemInit+0xe8>)
 8000e8a:	f043 0307 	orr.w	r3, r3, #7
 8000e8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <SystemInit+0xec>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <SystemInit+0xec>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <SystemInit+0xec>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <SystemInit+0xec>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4929      	ldr	r1, [pc, #164]	; (8000f4c <SystemInit+0xec>)
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <SystemInit+0xf0>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <SystemInit+0xe8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <SystemInit+0xe8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 030f 	bic.w	r3, r3, #15
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <SystemInit+0xe8>)
 8000ec4:	f043 0307 	orr.w	r3, r3, #7
 8000ec8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <SystemInit+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <SystemInit+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <SystemInit+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <SystemInit+0xec>)
 8000ede:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <SystemInit+0xf4>)
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <SystemInit+0xec>)
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <SystemInit+0xf8>)
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <SystemInit+0xec>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <SystemInit+0xfc>)
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <SystemInit+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <SystemInit+0xec>)
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <SystemInit+0xfc>)
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <SystemInit+0xec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <SystemInit+0xec>)
 8000f02:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <SystemInit+0xfc>)
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <SystemInit+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <SystemInit+0xec>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <SystemInit+0xec>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <SystemInit+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <SystemInit+0x100>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <SystemInit+0x104>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f2a:	d202      	bcs.n	8000f32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <SystemInit+0x108>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <SystemInit+0x10c>)
 8000f34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	52002000 	.word	0x52002000
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f54:	02020200 	.word	0x02020200
 8000f58:	01ff0000 	.word	0x01ff0000
 8000f5c:	01010280 	.word	0x01010280
 8000f60:	5c001000 	.word	0x5c001000
 8000f64:	ffff0000 	.word	0xffff0000
 8000f68:	51008108 	.word	0x51008108
 8000f6c:	52004000 	.word	0x52004000

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff ff74 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f004 ff3d 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff f9b7 	bl	8000314 <main>
  bx  lr
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000fb4:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 8000fb8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000fbc:	240040f4 	.word	0x240040f4

08000fc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC3_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 f90f 	bl	80011ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd0:	f001 fc2e 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_Init+0x68>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	4913      	ldr	r1, [pc, #76]	; (8001030 <HAL_Init+0x6c>)
 8000fe2:	5ccb      	ldrb	r3, [r1, r3]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_Init+0x68>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_Init+0x6c>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_Init+0x70>)
 8001006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_Init+0x74>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100e:	200f      	movs	r0, #15
 8001010:	f7ff fea4 	bl	8000d5c <HAL_InitTick>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e002      	b.n	8001024 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800101e:	f7ff fc87 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400
 8001030:	08005f38 	.word	0x08005f38
 8001034:	24000004 	.word	0x24000004
 8001038:	24000000 	.word	0x24000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2400000c 	.word	0x2400000c
 8001060:	2400039c 	.word	0x2400039c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2400039c 	.word	0x2400039c

0800107c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetREVID+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	0c1b      	lsrs	r3, r3, #16
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	5c001000 	.word	0x5c001000

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <__NVIC_SetPriorityGrouping+0x40>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x40>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	05fa0000 	.word	0x05fa0000

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff4c 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001212:	f7ff ff63 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001216:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff ffb3 	bl	8001188 <NVIC_EncodePriority>
 8001222:	4602      	mov	r2, r0
 8001224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff82 	bl	8001134 <__NVIC_SetPriority>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff56 	bl	80010f8 <__NVIC_EnableIRQ>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001262:	4b89      	ldr	r3, [pc, #548]	; (8001488 <HAL_GPIO_Init+0x234>)
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001266:	e194      	b.n	8001592 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8186 	beq.w	800158c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d005      	beq.n	8001298 <HAL_GPIO_Init+0x44>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d123      	bne.n	800138a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	69b9      	ldr	r1, [r7, #24]
 8001386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0203 	and.w	r2, r3, #3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80e0 	beq.w	800158c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_GPIO_Init+0x238>)
 80013ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d2:	4a2e      	ldr	r2, [pc, #184]	; (800148c <HAL_GPIO_Init+0x238>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_GPIO_Init+0x238>)
 80013de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_GPIO_Init+0x23c>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_GPIO_Init+0x240>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d052      	beq.n	80014bc <HAL_GPIO_Init+0x268>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <HAL_GPIO_Init+0x244>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_GPIO_Init+0x22e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_GPIO_Init+0x248>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x22a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_GPIO_Init+0x24c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x226>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_GPIO_Init+0x250>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <HAL_GPIO_Init+0x254>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <HAL_GPIO_Init+0x258>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_GPIO_Init+0x25c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x216>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <HAL_GPIO_Init+0x260>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_GPIO_Init+0x264>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x20e>
 800145e:	2309      	movs	r3, #9
 8001460:	e02d      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001462:	230a      	movs	r3, #10
 8001464:	e02b      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001466:	2308      	movs	r3, #8
 8001468:	e029      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800146a:	2307      	movs	r3, #7
 800146c:	e027      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800146e:	2306      	movs	r3, #6
 8001470:	e025      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001472:	2305      	movs	r3, #5
 8001474:	e023      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001476:	2304      	movs	r3, #4
 8001478:	e021      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800147a:	2303      	movs	r3, #3
 800147c:	e01f      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800147e:	2302      	movs	r3, #2
 8001480:	e01d      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001482:	2301      	movs	r3, #1
 8001484:	e01b      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001486:	bf00      	nop
 8001488:	58000080 	.word	0x58000080
 800148c:	58024400 	.word	0x58024400
 8001490:	58000400 	.word	0x58000400
 8001494:	58020000 	.word	0x58020000
 8001498:	58020400 	.word	0x58020400
 800149c:	58020800 	.word	0x58020800
 80014a0:	58020c00 	.word	0x58020c00
 80014a4:	58021000 	.word	0x58021000
 80014a8:	58021400 	.word	0x58021400
 80014ac:	58021800 	.word	0x58021800
 80014b0:	58021c00 	.word	0x58021c00
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58022400 	.word	0x58022400
 80014bc:	2300      	movs	r3, #0
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ce:	4938      	ldr	r1, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x35c>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f ae63 	bne.w	8001268 <HAL_GPIO_Init+0x14>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3724      	adds	r7, #36	; 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	58000400 	.word	0x58000400

080015b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001600:	e003      	b.n	800160a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43d9      	mvns	r1, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	400b      	ands	r3, r1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0bf      	b.n	80017de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff f97a 	bl	800096c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800168e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6999      	ldr	r1, [r3, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_LTDC_Init+0x19c>)
 80016c0:	400b      	ands	r3, r1
 80016c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6899      	ldr	r1, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68d9      	ldr	r1, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_LTDC_Init+0x19c>)
 80016ee:	400b      	ands	r3, r1
 80016f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68d9      	ldr	r1, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6919      	ldr	r1, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <HAL_LTDC_Init+0x19c>)
 800171c:	400b      	ands	r3, r1
 800171e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6959      	ldr	r1, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_LTDC_Init+0x19c>)
 800174a:	400b      	ands	r3, r1
 800174c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6959      	ldr	r1, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0206 	orr.w	r2, r2, #6
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	f000f800 	.word	0xf000f800

080017ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_LTDC_ConfigLayer+0x1a>
 8001802:	2302      	movs	r3, #2
 8001804:	e02c      	b.n	8001860 <HAL_LTDC_ConfigLayer+0x74>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2202      	movs	r2, #2
 8001812:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2134      	movs	r1, #52	; 0x34
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f811 	bl	8001868 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2201      	movs	r2, #1
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bdb0      	pop	{r4, r5, r7, pc}

08001868 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001884:	4413      	add	r3, r2
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	01db      	lsls	r3, r3, #7
 8001894:	4413      	add	r3, r2
 8001896:	3384      	adds	r3, #132	; 0x84
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4611      	mov	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	01d2      	lsls	r2, r2, #7
 80018a4:	440a      	add	r2, r1
 80018a6:	3284      	adds	r2, #132	; 0x84
 80018a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80018ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80018be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	440b      	add	r3, r1
 80018ce:	3384      	adds	r3, #132	; 0x84
 80018d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80018d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e6:	4413      	add	r3, r2
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	01db      	lsls	r3, r3, #7
 80018f6:	4413      	add	r3, r2
 80018f8:	3384      	adds	r3, #132	; 0x84
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4611      	mov	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	01d2      	lsls	r2, r2, #7
 8001906:	440a      	add	r2, r1
 8001908:	3284      	adds	r2, #132	; 0x84
 800190a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800190e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191e:	4413      	add	r3, r2
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	01db      	lsls	r3, r3, #7
 800192c:	440b      	add	r3, r1
 800192e:	3384      	adds	r3, #132	; 0x84
 8001930:	4619      	mov	r1, r3
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	01db      	lsls	r3, r3, #7
 8001942:	4413      	add	r3, r2
 8001944:	3384      	adds	r3, #132	; 0x84
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4611      	mov	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	01d2      	lsls	r2, r2, #7
 8001952:	440a      	add	r2, r1
 8001954:	3284      	adds	r2, #132	; 0x84
 8001956:	f023 0307 	bic.w	r3, r3, #7
 800195a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	01db      	lsls	r3, r3, #7
 8001966:	4413      	add	r3, r2
 8001968:	3384      	adds	r3, #132	; 0x84
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	061b      	lsls	r3, r3, #24
 800198c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	01db      	lsls	r3, r3, #7
 8001998:	4413      	add	r3, r2
 800199a:	3384      	adds	r3, #132	; 0x84
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	4413      	add	r3, r2
 80019aa:	3384      	adds	r3, #132	; 0x84
 80019ac:	461a      	mov	r2, r3
 80019ae:	2300      	movs	r3, #0
 80019b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b8:	461a      	mov	r2, r3
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	431a      	orrs	r2, r3
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	440b      	add	r3, r1
 80019ce:	3384      	adds	r3, #132	; 0x84
 80019d0:	4619      	mov	r1, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	01db      	lsls	r3, r3, #7
 80019e2:	4413      	add	r3, r2
 80019e4:	3384      	adds	r3, #132	; 0x84
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	4611      	mov	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	01d2      	lsls	r2, r2, #7
 80019f2:	440a      	add	r2, r1
 80019f4:	3284      	adds	r2, #132	; 0x84
 80019f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	01db      	lsls	r3, r3, #7
 8001a06:	4413      	add	r3, r2
 8001a08:	3384      	adds	r3, #132	; 0x84
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3384      	adds	r3, #132	; 0x84
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	01db      	lsls	r3, r3, #7
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3384      	adds	r3, #132	; 0x84
 8001a30:	4619      	mov	r1, r3
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <LTDC_SetConfig+0x32c>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	68f9      	ldr	r1, [r7, #12]
 8001a42:	6809      	ldr	r1, [r1, #0]
 8001a44:	4608      	mov	r0, r1
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	01c9      	lsls	r1, r1, #7
 8001a4a:	4401      	add	r1, r0
 8001a4c:	3184      	adds	r1, #132	; 0x84
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3384      	adds	r3, #132	; 0x84
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	01db      	lsls	r3, r3, #7
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3384      	adds	r3, #132	; 0x84
 8001a70:	461a      	mov	r2, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	4413      	add	r3, r2
 8001a82:	3384      	adds	r3, #132	; 0x84
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8001a94:	2304      	movs	r3, #4
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	e01b      	b.n	8001ad2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e014      	b.n	8001ad2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00b      	beq.n	8001ac8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d007      	beq.n	8001ac8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d003      	beq.n	8001ac8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d102      	bne.n	8001ace <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e001      	b.n	8001ad2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	01db      	lsls	r3, r3, #7
 8001adc:	4413      	add	r3, r2
 8001ade:	3384      	adds	r3, #132	; 0x84
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	01d2      	lsls	r2, r2, #7
 8001aec:	440a      	add	r2, r1
 8001aee:	3284      	adds	r2, #132	; 0x84
 8001af0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001af4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	041a      	lsls	r2, r3, #16
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1acb      	subs	r3, r1, r3
 8001b0c:	69f9      	ldr	r1, [r7, #28]
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	3307      	adds	r3, #7
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	6809      	ldr	r1, [r1, #0]
 8001b18:	4608      	mov	r0, r1
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	01c9      	lsls	r1, r1, #7
 8001b1e:	4401      	add	r1, r0
 8001b20:	3184      	adds	r1, #132	; 0x84
 8001b22:	4313      	orrs	r3, r2
 8001b24:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	4413      	add	r3, r2
 8001b32:	3384      	adds	r3, #132	; 0x84
 8001b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	440b      	add	r3, r1
 8001b42:	3384      	adds	r3, #132	; 0x84
 8001b44:	4619      	mov	r1, r3
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <LTDC_SetConfig+0x330>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	01db      	lsls	r3, r3, #7
 8001b56:	4413      	add	r3, r2
 8001b58:	3384      	adds	r3, #132	; 0x84
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	01db      	lsls	r3, r3, #7
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3384      	adds	r3, #132	; 0x84
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4611      	mov	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	01d2      	lsls	r2, r2, #7
 8001b7c:	440a      	add	r2, r1
 8001b7e:	3284      	adds	r2, #132	; 0x84
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	fffff8f8 	.word	0xfffff8f8
 8001b98:	fffff800 	.word	0xfffff800

08001b9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_PWREx_ConfigSupply+0x70>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d00a      	beq.n	8001bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_PWREx_ConfigSupply+0x70>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e01f      	b.n	8001c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e01d      	b.n	8001c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_PWREx_ConfigSupply+0x70>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	490f      	ldr	r1, [pc, #60]	; (8001c0c <HAL_PWREx_ConfigSupply+0x70>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bd6:	f7ff fa45 	bl	8001064 <HAL_GetTick>
 8001bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bdc:	e009      	b.n	8001bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bde:	f7ff fa41 	bl	8001064 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bec:	d901      	bls.n	8001bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e007      	b.n	8001c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_PWREx_ConfigSupply+0x70>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfe:	d1ee      	bne.n	8001bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	58024800 	.word	0x58024800

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f000 bc48 	b.w	80024b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8088 	beq.w	8001d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c32:	4b99      	ldr	r3, [pc, #612]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c3c:	4b96      	ldr	r3, [pc, #600]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d007      	beq.n	8001c58 <HAL_RCC_OscConfig+0x48>
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	2b18      	cmp	r3, #24
 8001c4c:	d111      	bne.n	8001c72 <HAL_RCC_OscConfig+0x62>
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d06d      	beq.n	8001d40 <HAL_RCC_OscConfig+0x130>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d169      	bne.n	8001d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f000 bc21 	b.w	80024b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x7a>
 8001c7c:	4b86      	ldr	r3, [pc, #536]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a85      	ldr	r2, [pc, #532]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x9c>
 8001c92:	4b81      	ldr	r3, [pc, #516]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a80      	ldr	r2, [pc, #512]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b7e      	ldr	r3, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7d      	ldr	r2, [pc, #500]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xc0>
 8001cb6:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a74      	ldr	r2, [pc, #464]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd8>
 8001cd0:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a70      	ldr	r2, [pc, #448]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b6e      	ldr	r3, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6d      	ldr	r2, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f9b8 	bl	8001064 <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f9b4 	bl	8001064 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e3d4      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe8>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f9a4 	bl	8001064 <HAL_GetTick>
 8001d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f9a0 	bl	8001064 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e3c0      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x110>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80ca 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d50:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_RCC_OscConfig+0x166>
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	2b18      	cmp	r3, #24
 8001d6a:	d156      	bne.n	8001e1a <HAL_RCC_OscConfig+0x20a>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d151      	bne.n	8001e1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x17e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e392      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d8e:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0219 	bic.w	r2, r3, #25
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	493f      	ldr	r1, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f960 	bl	8001064 <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff f95c 	bl	8001064 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e37c      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dba:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	f7ff f959 	bl	800107c <HAL_GetREVID>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d817      	bhi.n	8001e04 <HAL_RCC_OscConfig+0x1f4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d108      	bne.n	8001dee <HAL_RCC_OscConfig+0x1de>
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001de4:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	e07a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	031b      	lsls	r3, r3, #12
 8001dfc:	4926      	ldr	r1, [pc, #152]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e02:	e06f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	4921      	ldr	r1, [pc, #132]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e18:	e064      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d047      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0219 	bic.w	r2, r3, #25
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	491a      	ldr	r1, [pc, #104]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f916 	bl	8001064 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f912 	bl	8001064 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e332      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	f7ff f90f 	bl	800107c <HAL_GetREVID>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d819      	bhi.n	8001e9c <HAL_RCC_OscConfig+0x28c>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d108      	bne.n	8001e82 <HAL_RCC_OscConfig+0x272>
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7e:	6053      	str	r3, [r2, #4]
 8001e80:	e030      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	4901      	ldr	r1, [pc, #4]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
 8001e96:	e025      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	4b9a      	ldr	r3, [pc, #616]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	4997      	ldr	r1, [pc, #604]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
 8001eb0:	e018      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b95      	ldr	r3, [pc, #596]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f8d1 	bl	8001064 <HAL_GetTick>
 8001ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff f8cd 	bl	8001064 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e2ed      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ed8:	4b8b      	ldr	r3, [pc, #556]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a9 	beq.w	8002044 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef2:	4b85      	ldr	r3, [pc, #532]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001efa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001efc:	4b82      	ldr	r3, [pc, #520]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d007      	beq.n	8001f18 <HAL_RCC_OscConfig+0x308>
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b18      	cmp	r3, #24
 8001f0c:	d13a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x374>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d135      	bne.n	8001f84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f18:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_OscConfig+0x320>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e2c1      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f30:	f7ff f8a4 	bl	800107c <HAL_GetREVID>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d817      	bhi.n	8001f6e <HAL_RCC_OscConfig+0x35e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d108      	bne.n	8001f58 <HAL_RCC_OscConfig+0x348>
 8001f46:	4b70      	ldr	r3, [pc, #448]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f56:	e075      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f58:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	069b      	lsls	r3, r3, #26
 8001f66:	4968      	ldr	r1, [pc, #416]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f6c:	e06a      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f6e:	4b66      	ldr	r3, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	061b      	lsls	r3, r3, #24
 8001f7c:	4962      	ldr	r1, [pc, #392]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f82:	e05f      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d042      	beq.n	8002012 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f8c:	4b5e      	ldr	r3, [pc, #376]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f864 	bl	8001064 <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f860 	bl	8001064 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e280      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fb2:	4b55      	ldr	r3, [pc, #340]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fbe:	f7ff f85d 	bl	800107c <HAL_GetREVID>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d817      	bhi.n	8001ffc <HAL_RCC_OscConfig+0x3ec>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3d6>
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fe2:	6053      	str	r3, [r2, #4]
 8001fe4:	e02e      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	069b      	lsls	r3, r3, #26
 8001ff4:	4944      	ldr	r1, [pc, #272]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
 8001ffa:	e023      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	493f      	ldr	r1, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	4313      	orrs	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
 8002010:	e018      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8002018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f821 	bl	8001064 <HAL_GetTick>
 8002022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002026:	f7ff f81d 	bl	8001064 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e23d      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d036      	beq.n	80020be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d019      	beq.n	800208c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7fe fffe 	bl	8001064 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe fffa 	bl	8001064 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e21a      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x45c>
 800208a:	e018      	b.n	80020be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe ffe4 	bl	8001064 <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe ffe0 	bl	8001064 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e200      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d039      	beq.n	800213e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01c      	beq.n	800210c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020de:	f7fe ffc1 	bl	8001064 <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020e6:	f7fe ffbd 	bl	8001064 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1dd      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4d6>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x52e>
 8002106:	bf00      	nop
 8002108:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800210c:	4b9b      	ldr	r3, [pc, #620]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a9a      	ldr	r2, [pc, #616]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002116:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002118:	f7fe ffa4 	bl	8001064 <HAL_GetTick>
 800211c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002120:	f7fe ffa0 	bl	8001064 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1c0      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002132:	4b92      	ldr	r3, [pc, #584]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8081 	beq.w	800224e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800214c:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_OscConfig+0x770>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8b      	ldr	r2, [pc, #556]	; (8002380 <HAL_RCC_OscConfig+0x770>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002158:	f7fe ff84 	bl	8001064 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe ff80 	bl	8001064 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1a0      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002172:	4b83      	ldr	r3, [pc, #524]	; (8002380 <HAL_RCC_OscConfig+0x770>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d106      	bne.n	8002194 <HAL_RCC_OscConfig+0x584>
 8002186:	4b7d      	ldr	r3, [pc, #500]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a7c      	ldr	r2, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e02d      	b.n	80021f0 <HAL_RCC_OscConfig+0x5e0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5a6>
 800219c:	4b77      	ldr	r3, [pc, #476]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a76      	ldr	r2, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	4b74      	ldr	r3, [pc, #464]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a73      	ldr	r2, [pc, #460]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021ae:	f023 0304 	bic.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x5e0>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c8>
 80021be:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4b6c      	ldr	r3, [pc, #432]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a6b      	ldr	r2, [pc, #428]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0x5e0>
 80021d8:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a67      	ldr	r2, [pc, #412]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a64      	ldr	r2, [pc, #400]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe ff34 	bl	8001064 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe ff30 	bl	8001064 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e14e      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002216:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0ee      	beq.n	8002200 <HAL_RCC_OscConfig+0x5f0>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe ff1e 	bl	8001064 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7fe ff1a 	bl	8001064 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e138      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002242:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ee      	bne.n	800222c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 812d 	beq.w	80024b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002258:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002260:	2b18      	cmp	r3, #24
 8002262:	f000 80bd 	beq.w	80023e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 809e 	bne.w	80023ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a41      	ldr	r2, [pc, #260]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fef2 	bl	8001064 <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe feee 	bl	8001064 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e10e      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80022a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x774>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	430a      	orrs	r2, r1
 80022b6:	4931      	ldr	r1, [pc, #196]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	628b      	str	r3, [r1, #40]	; 0x28
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	3b01      	subs	r3, #1
 80022c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	3b01      	subs	r3, #1
 80022cc:	025b      	lsls	r3, r3, #9
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	3b01      	subs	r3, #1
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	3b01      	subs	r3, #1
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022ec:	4923      	ldr	r1, [pc, #140]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	4a21      	ldr	r2, [pc, #132]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_OscConfig+0x778>)
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800230a:	00d2      	lsls	r2, r2, #3
 800230c:	491b      	ldr	r1, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800230e:	4313      	orrs	r3, r2
 8002310:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f023 020c 	bic.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4917      	ldr	r1, [pc, #92]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f023 0202 	bic.w	r2, r3, #2
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	4a10      	ldr	r2, [pc, #64]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_RCC_OscConfig+0x76c>)
 800236c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fe77 	bl	8001064 <HAL_GetTick>
 8002376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002378:	e011      	b.n	800239e <HAL_RCC_OscConfig+0x78e>
 800237a:	bf00      	nop
 800237c:	58024400 	.word	0x58024400
 8002380:	58024800 	.word	0x58024800
 8002384:	fffffc0c 	.word	0xfffffc0c
 8002388:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fe6a 	bl	8001064 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e08a      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x77c>
 80023aa:	e082      	b.n	80024b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a42      	ldr	r2, [pc, #264]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fe54 	bl	8001064 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fe50 	bl	8001064 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e070      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023d2:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x7b0>
 80023de:	e068      	b.n	80024b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d031      	beq.n	8002458 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d12a      	bne.n	8002458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d122      	bne.n	8002458 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d11a      	bne.n	8002458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	0a5b      	lsrs	r3, r3, #9
 8002426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d111      	bne.n	8002458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d108      	bne.n	8002458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e02b      	b.n	80024b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002466:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	429a      	cmp	r2, r3
 8002470:	d01f      	beq.n	80024b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800247e:	f7fe fdf1 	bl	8001064 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002484:	bf00      	nop
 8002486:	f7fe fded 	bl	8001064 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	4293      	cmp	r3, r2
 8002490:	d0f9      	beq.n	8002486 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 8002494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_OscConfig+0x8b0>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800249e:	00d2      	lsls	r2, r2, #3
 80024a0:	4906      	ldr	r1, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_RCC_OscConfig+0x8ac>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	58024400 	.word	0x58024400
 80024c0:	ffff0007 	.word	0xffff0007

080024c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e19c      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b8a      	ldr	r3, [pc, #552]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b87      	ldr	r3, [pc, #540]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 020f 	bic.w	r2, r3, #15
 80024ee:	4985      	ldr	r1, [pc, #532]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b83      	ldr	r3, [pc, #524]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e184      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002520:	429a      	cmp	r2, r3
 8002522:	d908      	bls.n	8002536 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002524:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4975      	ldr	r1, [pc, #468]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002532:	4313      	orrs	r3, r2
 8002534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800254e:	429a      	cmp	r2, r3
 8002550:	d908      	bls.n	8002564 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	496a      	ldr	r1, [pc, #424]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002560:	4313      	orrs	r3, r2
 8002562:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	4b64      	ldr	r3, [pc, #400]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800257c:	429a      	cmp	r2, r3
 800257e:	d908      	bls.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002580:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	495e      	ldr	r1, [pc, #376]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 800258e:	4313      	orrs	r3, r2
 8002590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d908      	bls.n	80025c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025ae:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4953      	ldr	r1, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d010      	beq.n	80025ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	429a      	cmp	r2, r3
 80025da:	d908      	bls.n	80025ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f023 020f 	bic.w	r2, r3, #15
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4947      	ldr	r1, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d055      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	4940      	ldr	r1, [pc, #256]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002608:	4313      	orrs	r3, r2
 800260a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d107      	bne.n	8002624 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002614:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d121      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0f6      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d107      	bne.n	800263c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d115      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0ea      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0de      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0d6      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f023 0207 	bic.w	r2, r3, #7
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002672:	4313      	orrs	r3, r2
 8002674:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002676:	f7fe fcf5 	bl	8001064 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267c:	e00a      	b.n	8002694 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fcf1 	bl	8001064 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0be      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d1eb      	bne.n	800267e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	429a      	cmp	r2, r3
 80026c0:	d208      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f023 020f 	bic.w	r2, r3, #15
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x244>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d214      	bcs.n	800270c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 020f 	bic.w	r2, r3, #15
 80026ea:	4906      	ldr	r1, [pc, #24]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <HAL_RCC_ClockConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e086      	b.n	8002812 <HAL_RCC_ClockConfig+0x34e>
 8002704:	52002000 	.word	0x52002000
 8002708:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002724:	429a      	cmp	r2, r3
 8002726:	d208      	bcs.n	800273a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	4939      	ldr	r1, [pc, #228]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 8002736:	4313      	orrs	r3, r2
 8002738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002752:	429a      	cmp	r2, r3
 8002754:	d208      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	492e      	ldr	r1, [pc, #184]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d010      	beq.n	8002796 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002780:	429a      	cmp	r2, r3
 8002782:	d208      	bcs.n	8002796 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4922      	ldr	r1, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 8002792:	4313      	orrs	r3, r2
 8002794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d208      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4917      	ldr	r1, [pc, #92]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027c4:	f000 f834 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	4912      	ldr	r1, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x35c>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_RCC_ClockConfig+0x358>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_RCC_ClockConfig+0x35c>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x360>)
 80027fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x364>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x368>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe faa8 	bl	8000d5c <HAL_InitTick>
 800280c:	4603      	mov	r3, r0
 800280e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	58024400 	.word	0x58024400
 8002820:	08005f38 	.word	0x08005f38
 8002824:	24000004 	.word	0x24000004
 8002828:	24000000 	.word	0x24000000
 800282c:	24000008 	.word	0x24000008

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002836:	4bb3      	ldr	r3, [pc, #716]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283e:	2b18      	cmp	r3, #24
 8002840:	f200 8155 	bhi.w	8002aee <HAL_RCC_GetSysClockFreq+0x2be>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	080028b1 	.word	0x080028b1
 8002850:	08002aef 	.word	0x08002aef
 8002854:	08002aef 	.word	0x08002aef
 8002858:	08002aef 	.word	0x08002aef
 800285c:	08002aef 	.word	0x08002aef
 8002860:	08002aef 	.word	0x08002aef
 8002864:	08002aef 	.word	0x08002aef
 8002868:	08002aef 	.word	0x08002aef
 800286c:	080028d7 	.word	0x080028d7
 8002870:	08002aef 	.word	0x08002aef
 8002874:	08002aef 	.word	0x08002aef
 8002878:	08002aef 	.word	0x08002aef
 800287c:	08002aef 	.word	0x08002aef
 8002880:	08002aef 	.word	0x08002aef
 8002884:	08002aef 	.word	0x08002aef
 8002888:	08002aef 	.word	0x08002aef
 800288c:	080028dd 	.word	0x080028dd
 8002890:	08002aef 	.word	0x08002aef
 8002894:	08002aef 	.word	0x08002aef
 8002898:	08002aef 	.word	0x08002aef
 800289c:	08002aef 	.word	0x08002aef
 80028a0:	08002aef 	.word	0x08002aef
 80028a4:	08002aef 	.word	0x08002aef
 80028a8:	08002aef 	.word	0x08002aef
 80028ac:	080028e3 	.word	0x080028e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028b0:	4b94      	ldr	r3, [pc, #592]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028bc:	4b91      	ldr	r3, [pc, #580]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	4a90      	ldr	r2, [pc, #576]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80028ce:	e111      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028d0:	4b8d      	ldr	r3, [pc, #564]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028d2:	61bb      	str	r3, [r7, #24]
      break;
 80028d4:	e10e      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028d6:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d8:	61bb      	str	r3, [r7, #24]
      break;
 80028da:	e10b      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028dc:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028de:	61bb      	str	r3, [r7, #24]
      break;
 80028e0:	e108      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028e2:	4b88      	ldr	r3, [pc, #544]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028ec:	4b85      	ldr	r3, [pc, #532]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028f8:	4b82      	ldr	r3, [pc, #520]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002902:	4b80      	ldr	r3, [pc, #512]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	08db      	lsrs	r3, r3, #3
 8002908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80e1 	beq.w	8002ae8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	f000 8083 	beq.w	8002a34 <HAL_RCC_GetSysClockFreq+0x204>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b02      	cmp	r3, #2
 8002932:	f200 80a1 	bhi.w	8002a78 <HAL_RCC_GetSysClockFreq+0x248>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x114>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d056      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002942:	e099      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002944:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02d      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002950:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	4a6b      	ldr	r2, [pc, #428]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297a:	4b62      	ldr	r3, [pc, #392]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298a:	ed97 6a02 	vldr	s12, [r7, #8]
 800298e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800299a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800299e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80029aa:	e087      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80029ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029be:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ee:	e065      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80029fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a02:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a32:	e043      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a76:	e021      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	0a5b      	lsrs	r3, r3, #9
 8002ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae0:	ee17 3a90 	vmov	r3, s15
 8002ae4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ae6:	e005      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
      break;
 8002aec:	e002      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002af0:	61bb      	str	r3, [r7, #24]
      break;
 8002af2:	bf00      	nop
  }

  return sysclockfreq;
 8002af4:	69bb      	ldr	r3, [r7, #24]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	58024400 	.word	0x58024400
 8002b08:	03d09000 	.word	0x03d09000
 8002b0c:	003d0900 	.word	0x003d0900
 8002b10:	017d7840 	.word	0x017d7840
 8002b14:	46000000 	.word	0x46000000
 8002b18:	4c742400 	.word	0x4c742400
 8002b1c:	4a742400 	.word	0x4a742400
 8002b20:	4bbebc20 	.word	0x4bbebc20

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b2a:	f7ff fe81 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490f      	ldr	r1, [pc, #60]	; (8002b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002b60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	58024400 	.word	0x58024400
 8002b78:	08005f38 	.word	0x08005f38
 8002b7c:	24000004 	.word	0x24000004
 8002b80:	24000000 	.word	0x24000000

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b88:	f7ff ffcc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4904      	ldr	r1, [pc, #16]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	08005f38 	.word	0x08005f38

08002bb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223f      	movs	r2, #63	; 0x3f
 8002bbe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0207 	and.w	r2, r3, #7
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCC_GetClockConfig+0x7c>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_GetClockConfig+0x80>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	52002000 	.word	0x52002000

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b0ca      	sub	sp, #296	; 0x128
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c58:	2500      	movs	r5, #0
 8002c5a:	ea54 0305 	orrs.w	r3, r4, r5
 8002c5e:	d049      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c6a:	d02f      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c70:	d828      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c76:	d01a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7c:	d822      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c86:	d007      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c88:	e01c      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8a:	4bb8      	ldr	r3, [pc, #736]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	4ab7      	ldr	r2, [pc, #732]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c96:	e01a      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 f9d1 	bl	8004048 <RCCEx_PLL2_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cac:	e00f      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb2:	3328      	adds	r3, #40	; 0x28
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fa78 	bl	80041ac <RCCEx_PLL3_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cc2:	e004      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cca:	e000      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cd6:	4ba5      	ldr	r3, [pc, #660]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce4:	4aa1      	ldr	r2, [pc, #644]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	6513      	str	r3, [r2, #80]	; 0x50
 8002cea:	e003      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002d00:	f04f 0900 	mov.w	r9, #0
 8002d04:	ea58 0309 	orrs.w	r3, r8, r9
 8002d08:	d047      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d82a      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d31 	.word	0x08002d31
 8002d20:	08002d3f 	.word	0x08002d3f
 8002d24:	08002d55 	.word	0x08002d55
 8002d28:	08002d73 	.word	0x08002d73
 8002d2c:	08002d73 	.word	0x08002d73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d30:	4b8e      	ldr	r3, [pc, #568]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4a8d      	ldr	r2, [pc, #564]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d3c:	e01a      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d42:	3308      	adds	r3, #8
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 f97e 	bl	8004048 <RCCEx_PLL2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d52:	e00f      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d58:	3328      	adds	r3, #40	; 0x28
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fa25 	bl	80041ac <RCCEx_PLL3_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d68:	e004      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d7c:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d80:	f023 0107 	bic.w	r1, r3, #7
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	4a78      	ldr	r2, [pc, #480]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002da6:	f04f 0b00 	mov.w	fp, #0
 8002daa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002dae:	d04c      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	d030      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc0:	d829      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc4:	d02d      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc8:	d825      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d018      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	d821      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d007      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002dda:	e01c      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ddc:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	4a62      	ldr	r2, [pc, #392]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002de8:	e01c      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dee:	3308      	adds	r3, #8
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 f928 	bl	8004048 <RCCEx_PLL2_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dfe:	e011      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e04:	3328      	adds	r3, #40	; 0x28
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 f9cf 	bl	80041ac <RCCEx_PLL3_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e14:	e006      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e1c:	e002      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e40:	e003      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002e64:	460b      	mov	r3, r1
 8002e66:	4313      	orrs	r3, r2
 8002e68:	d053      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e76:	d035      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e7c:	d82e      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e82:	d031      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e88:	d828      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d01a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d822      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9e:	d007      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ea0:	e01c      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea2:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	4a31      	ldr	r2, [pc, #196]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eae:	e01c      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 f8c5 	bl	8004048 <RCCEx_PLL2_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ec4:	e011      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eca:	3328      	adds	r3, #40	; 0x28
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 f96c 	bl	80041ac <RCCEx_PLL3_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eda:	e006      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ee2:	e002      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f02:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002f1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	d056      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3e:	d038      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f44:	d831      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f4a:	d034      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f50:	d82b      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f56:	d01d      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5c:	d825      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f68:	e01f      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f6a:	bf00      	nop
 8002f6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f70:	4ba2      	ldr	r3, [pc, #648]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4aa1      	ldr	r2, [pc, #644]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f82:	3308      	adds	r3, #8
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f85e 	bl	8004048 <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f98:	3328      	adds	r3, #40	; 0x28
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f905 	bl	80041ac <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fc0:	4b8e      	ldr	r3, [pc, #568]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fd0:	4a8a      	ldr	r2, [pc, #552]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd6:	e003      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ff6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	d03a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	2b30      	cmp	r3, #48	; 0x30
 8003008:	d01f      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800300a:	2b30      	cmp	r3, #48	; 0x30
 800300c:	d819      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800300e:	2b20      	cmp	r3, #32
 8003010:	d00c      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003012:	2b20      	cmp	r3, #32
 8003014:	d815      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d019      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800301a:	2b10      	cmp	r3, #16
 800301c:	d111      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301e:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4a76      	ldr	r2, [pc, #472]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800302a:	e011      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003030:	3308      	adds	r3, #8
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f001 f807 	bl	8004048 <RCCEx_PLL2_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003048:	e002      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800304e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	4a65      	ldr	r2, [pc, #404]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003068:	430b      	orrs	r3, r1
 800306a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800308c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003090:	460b      	mov	r3, r1
 8003092:	4313      	orrs	r3, r2
 8003094:	d051      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a0:	d035      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80030a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a6:	d82e      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030ac:	d031      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030b2:	d828      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d01a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030be:	d822      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d007      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80030ca:	e01c      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030d8:	e01c      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030de:	3308      	adds	r3, #8
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ffb0 	bl	8004048 <RCCEx_PLL2_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030ee:	e011      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f4:	3328      	adds	r3, #40	; 0x28
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 f857 	bl	80041ac <RCCEx_PLL3_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800310c:	e002      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800312c:	430b      	orrs	r3, r1
 800312e:	6513      	str	r3, [r2, #80]	; 0x50
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800313a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003150:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003154:	460b      	mov	r3, r1
 8003156:	4313      	orrs	r3, r2
 8003158:	d056      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800315a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003164:	d033      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316a:	d82c      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800316c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003170:	d02f      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003176:	d826      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800317c:	d02b      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800317e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003182:	d820      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003188:	d012      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800318a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800318e:	d81a      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d022      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d115      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319e:	3308      	adds	r3, #8
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 ff50 	bl	8004048 <RCCEx_PLL2_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031ae:	e015      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b4:	3328      	adds	r3, #40	; 0x28
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fff7 	bl	80041ac <RCCEx_PLL3_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031c4:	e00a      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031ce:	bf00      	nop
 80031d0:	e004      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031d2:	bf00      	nop
 80031d4:	e002      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f2:	4a02      	ldr	r2, [pc, #8]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6513      	str	r3, [r2, #80]	; 0x50
 80031f8:	e006      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003222:	460b      	mov	r3, r1
 8003224:	4313      	orrs	r3, r2
 8003226:	d055      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003234:	d033      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323a:	d82c      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d02f      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d826      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800324c:	d02b      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800324e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003252:	d820      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d012      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800325a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325e:	d81a      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003268:	d115      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326e:	3308      	adds	r3, #8
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fee8 	bl	8004048 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800327e:	e015      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003284:	3328      	adds	r3, #40	; 0x28
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 ff8f 	bl	80041ac <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003294:	e00a      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800329c:	e006      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800329e:	bf00      	nop
 80032a0:	e004      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032b4:	4ba3      	ldr	r3, [pc, #652]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032c4:	4a9f      	ldr	r2, [pc, #636]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80032e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80032ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d037      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fe:	d00e      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003304:	d816      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800330a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800330e:	d111      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003310:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	4a8b      	ldr	r2, [pc, #556]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800331c:	e00f      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003322:	3308      	adds	r3, #8
 8003324:	2101      	movs	r1, #1
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fe8e 	bl	8004048 <RCCEx_PLL2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800333c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a7b      	ldr	r2, [pc, #492]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003356:	430b      	orrs	r3, r1
 8003358:	6513      	str	r3, [r2, #80]	; 0x50
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800337a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800337e:	460b      	mov	r3, r1
 8003380:	4313      	orrs	r3, r2
 8003382:	d039      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	2b03      	cmp	r3, #3
 800338c:	d81c      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033d1 	.word	0x080033d1
 8003398:	080033a5 	.word	0x080033a5
 800339c:	080033b3 	.word	0x080033b3
 80033a0:	080033d1 	.word	0x080033d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b67      	ldr	r3, [pc, #412]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	4a66      	ldr	r2, [pc, #408]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033b0:	e00f      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	3308      	adds	r3, #8
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fe44 	bl	8004048 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033c6:	e004      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80033d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033da:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	f023 0103 	bic.w	r1, r3, #3
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e8:	4a56      	ldr	r2, [pc, #344]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800340e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	f000 809f 	beq.w	8003558 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341a:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4a      	ldr	r2, [pc, #296]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003426:	f7fd fe1d 	bl	8001064 <HAL_GetTick>
 800342a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342e:	e00b      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fd fe18 	bl	8001064 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	; 0x64
 800343e:	d903      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003446:	e005      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003448:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ed      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003458:	2b00      	cmp	r3, #0
 800345a:	d179      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800345e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003468:	4053      	eors	r3, r2
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003472:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a30      	ldr	r2, [pc, #192]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003496:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	d118      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd fdda 	bl	8001064 <HAL_GetTick>
 80034b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b4:	e00d      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fd fdd5 	bl	8001064 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034c0:	1ad2      	subs	r2, r2, r3
 80034c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d903      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80034d0:	e005      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0eb      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80034de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d129      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f6:	d10e      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003508:	091a      	lsrs	r2, r3, #4
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800350c:	4013      	ands	r3, r2
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6113      	str	r3, [r2, #16]
 8003514:	e005      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003520:	6113      	str	r3, [r2, #16]
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003524:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	e00e      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800353e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003542:	e009      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003544:	58024400 	.word	0x58024400
 8003548:	58024800 	.word	0x58024800
 800354c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f002 0301 	and.w	r3, r2, #1
 8003564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800356e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003572:	460b      	mov	r3, r1
 8003574:	4313      	orrs	r3, r2
 8003576:	f000 8089 	beq.w	800368c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003580:	2b28      	cmp	r3, #40	; 0x28
 8003582:	d86b      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	08003665 	.word	0x08003665
 8003590:	0800365d 	.word	0x0800365d
 8003594:	0800365d 	.word	0x0800365d
 8003598:	0800365d 	.word	0x0800365d
 800359c:	0800365d 	.word	0x0800365d
 80035a0:	0800365d 	.word	0x0800365d
 80035a4:	0800365d 	.word	0x0800365d
 80035a8:	0800365d 	.word	0x0800365d
 80035ac:	08003631 	.word	0x08003631
 80035b0:	0800365d 	.word	0x0800365d
 80035b4:	0800365d 	.word	0x0800365d
 80035b8:	0800365d 	.word	0x0800365d
 80035bc:	0800365d 	.word	0x0800365d
 80035c0:	0800365d 	.word	0x0800365d
 80035c4:	0800365d 	.word	0x0800365d
 80035c8:	0800365d 	.word	0x0800365d
 80035cc:	08003647 	.word	0x08003647
 80035d0:	0800365d 	.word	0x0800365d
 80035d4:	0800365d 	.word	0x0800365d
 80035d8:	0800365d 	.word	0x0800365d
 80035dc:	0800365d 	.word	0x0800365d
 80035e0:	0800365d 	.word	0x0800365d
 80035e4:	0800365d 	.word	0x0800365d
 80035e8:	0800365d 	.word	0x0800365d
 80035ec:	08003665 	.word	0x08003665
 80035f0:	0800365d 	.word	0x0800365d
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800365d 	.word	0x0800365d
 8003600:	0800365d 	.word	0x0800365d
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	08003665 	.word	0x08003665
 8003610:	0800365d 	.word	0x0800365d
 8003614:	0800365d 	.word	0x0800365d
 8003618:	0800365d 	.word	0x0800365d
 800361c:	0800365d 	.word	0x0800365d
 8003620:	0800365d 	.word	0x0800365d
 8003624:	0800365d 	.word	0x0800365d
 8003628:	0800365d 	.word	0x0800365d
 800362c:	08003665 	.word	0x08003665
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003634:	3308      	adds	r3, #8
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd05 	bl	8004048 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003644:	e00f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364a:	3328      	adds	r3, #40	; 0x28
 800364c:	2101      	movs	r1, #1
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fdac 	bl	80041ac <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800365a:	e004      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800366e:	4bbf      	ldr	r3, [pc, #764]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367c:	4abb      	ldr	r2, [pc, #748]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800367e:	430b      	orrs	r3, r1
 8003680:	6553      	str	r3, [r2, #84]	; 0x54
 8003682:	e003      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 0302 	and.w	r3, r2, #2
 8003698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80036a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d041      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d824      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	08003709 	.word	0x08003709
 80036c0:	080036d5 	.word	0x080036d5
 80036c4:	080036eb 	.word	0x080036eb
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d8:	3308      	adds	r3, #8
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fcb3 	bl	8004048 <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036e8:	e00f      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ee:	3328      	adds	r3, #40	; 0x28
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fd5a 	bl	80041ac <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003712:	4b96      	ldr	r3, [pc, #600]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f023 0107 	bic.w	r1, r3, #7
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003720:	4a92      	ldr	r2, [pc, #584]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003722:	430b      	orrs	r3, r1
 8003724:	6553      	str	r3, [r2, #84]	; 0x54
 8003726:	e003      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 0304 	and.w	r3, r2, #4
 800373c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003746:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d044      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	2b05      	cmp	r3, #5
 800375a:	d825      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	080037b1 	.word	0x080037b1
 8003768:	0800377d 	.word	0x0800377d
 800376c:	08003793 	.word	0x08003793
 8003770:	080037b1 	.word	0x080037b1
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037b1 	.word	0x080037b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003780:	3308      	adds	r3, #8
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fc5f 	bl	8004048 <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003790:	e00f      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003796:	3328      	adds	r3, #40	; 0x28
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd06 	bl	80041ac <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80037b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ba:	4b6c      	ldr	r3, [pc, #432]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	f023 0107 	bic.w	r1, r3, #7
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	4a68      	ldr	r2, [pc, #416]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6593      	str	r3, [r2, #88]	; 0x58
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f002 0320 	and.w	r3, r2, #32
 80037e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d055      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003806:	d033      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800380c:	d82c      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d02f      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d826      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800381a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800381e:	d02b      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003824:	d820      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800382a:	d012      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003830:	d81a      	bhi.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d022      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383a:	d115      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003840:	3308      	adds	r3, #8
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fbff 	bl	8004048 <RCCEx_PLL2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003850:	e015      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003856:	3328      	adds	r3, #40	; 0x28
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fca6 	bl	80041ac <RCCEx_PLL3_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003866:	e00a      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800386e:	e006      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003870:	bf00      	nop
 8003872:	e004      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800387c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a35      	ldr	r2, [pc, #212]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6553      	str	r3, [r2, #84]	; 0x54
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80038b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d058      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038d2:	d033      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80038d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038d8:	d82c      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d02f      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d826      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ea:	d02b      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80038ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f0:	d820      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d012      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fc:	d81a      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d022      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003906:	d115      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	3308      	adds	r3, #8
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fb99 	bl	8004048 <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800391c:	e015      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003922:	3328      	adds	r3, #40	; 0x28
 8003924:	2102      	movs	r1, #2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fc40 	bl	80041ac <RCCEx_PLL3_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003932:	e00a      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800393a:	e006      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10e      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003962:	4a02      	ldr	r2, [pc, #8]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003964:	430b      	orrs	r3, r1
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800396a:	bf00      	nop
 800396c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800398e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d055      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039a4:	d033      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80039a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039aa:	d82c      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b0:	d02f      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80039b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b6:	d826      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039bc:	d02b      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80039be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039c2:	d820      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c8:	d012      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80039ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ce:	d81a      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d022      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d8:	d115      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039de:	3308      	adds	r3, #8
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb30 	bl	8004048 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039ee:	e015      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f4:	3328      	adds	r3, #40	; 0x28
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fbd7 	bl	80041ac <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a04:	e00a      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e004      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a12:	bf00      	nop
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a24:	4ba1      	ldr	r3, [pc, #644]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a34:	4a9d      	ldr	r2, [pc, #628]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6593      	str	r3, [r2, #88]	; 0x58
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 0308 	and.w	r3, r2, #8
 8003a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	d01e      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a76:	3328      	adds	r3, #40	; 0x28
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb96 	bl	80041ac <RCCEx_PLL3_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a8c:	4b87      	ldr	r3, [pc, #540]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9c:	4a83      	ldr	r2, [pc, #524]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f002 0310 	and.w	r3, r2, #16
 8003aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ab8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d01e      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d10c      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad4:	3328      	adds	r3, #40	; 0x28
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fb67 	bl	80041ac <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aea:	4b70      	ldr	r3, [pc, #448]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003afa:	4a6c      	ldr	r2, [pc, #432]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d03e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b2c:	d022      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b32:	d81b      	bhi.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b3e:	e015      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b44:	3308      	adds	r3, #8
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fa7d 	bl	8004048 <RCCEx_PLL2_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b54:	e00f      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5a:	3328      	adds	r3, #40	; 0x28
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fb24 	bl	80041ac <RCCEx_PLL3_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b6a:	e004      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b72:	e000      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b7e:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b8e:	4a47      	ldr	r2, [pc, #284]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6593      	str	r3, [r2, #88]	; 0x58
 8003b94:	e003      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003baa:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bac:	2300      	movs	r3, #0
 8003bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d03b      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bc6:	d01f      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bcc:	d818      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd8:	d007      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003bda:	e011      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bdc:	4b33      	ldr	r3, [pc, #204]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a32      	ldr	r2, [pc, #200]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003be8:	e00f      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	3328      	adds	r3, #40	; 0x28
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fada 	bl	80041ac <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bfe:	e004      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c12:	4b26      	ldr	r3, [pc, #152]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	4a22      	ldr	r2, [pc, #136]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6553      	str	r3, [r2, #84]	; 0x54
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c40:	2300      	movs	r3, #0
 8003c42:	677b      	str	r3, [r7, #116]	; 0x74
 8003c44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	d034      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c5e:	e011      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c6c:	e00e      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	3308      	adds	r3, #8
 8003c74:	2102      	movs	r1, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f9e6 	bl	8004048 <RCCEx_PLL2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10d      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	4a02      	ldr	r2, [pc, #8]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca8:	e006      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d00c      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd8:	3328      	adds	r3, #40	; 0x28
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fa65 	bl	80041ac <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8003d00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d04:	460b      	mov	r3, r1
 8003d06:	4313      	orrs	r3, r2
 8003d08:	d038      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d16:	d018      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1c:	d811      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d014      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d28:	d80b      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d011      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	d106      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d34:	4bc3      	ldr	r3, [pc, #780]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4ac2      	ldr	r2, [pc, #776]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d40:	e008      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d48:	e004      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	4bb9      	ldr	r3, [pc, #740]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6c:	4ab5      	ldr	r2, [pc, #724]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6553      	str	r3, [r2, #84]	; 0x54
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d98:	4baa      	ldr	r3, [pc, #680]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	4aa7      	ldr	r2, [pc, #668]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003db8:	653b      	str	r3, [r7, #80]	; 0x50
 8003dba:	2300      	movs	r3, #0
 8003dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003dc8:	4b9e      	ldr	r3, [pc, #632]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dd8:	4a9a      	ldr	r2, [pc, #616]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dec:	2300      	movs	r3, #0
 8003dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dfa:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e08:	4a8e      	ldr	r2, [pc, #568]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e2a:	4b86      	ldr	r3, [pc, #536]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	4a85      	ldr	r2, [pc, #532]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e34:	6113      	str	r3, [r2, #16]
 8003e36:	4b83      	ldr	r3, [pc, #524]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e38:	6919      	ldr	r1, [r3, #16]
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e42:	4a80      	ldr	r2, [pc, #512]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e56:	2300      	movs	r3, #0
 8003e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e64:	4b77      	ldr	r3, [pc, #476]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	4a74      	ldr	r2, [pc, #464]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e94:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea4:	4a67      	ldr	r2, [pc, #412]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ebc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d011      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	3308      	adds	r3, #8
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f8ba 	bl	8004048 <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	6239      	str	r1, [r7, #32]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d011      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f89a 	bl	8004048 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	2100      	movs	r1, #0
 8003f34:	61b9      	str	r1, [r7, #24]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d011      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f87a 	bl	8004048 <RCCEx_PLL2_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	2100      	movs	r1, #0
 8003f74:	6139      	str	r1, [r7, #16]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f80:	460b      	mov	r3, r1
 8003f82:	4313      	orrs	r3, r2
 8003f84:	d011      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	3328      	adds	r3, #40	; 0x28
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f90c 	bl	80041ac <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	d011      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	3328      	adds	r3, #40	; 0x28
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f8ec 	bl	80041ac <RCCEx_PLL3_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004000:	460b      	mov	r3, r1
 8004002:	4313      	orrs	r3, r2
 8004004:	d011      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	3328      	adds	r3, #40	; 0x28
 800400c:	2102      	movs	r1, #2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f8cc 	bl	80041ac <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800401a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800402a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004044:	58024400 	.word	0x58024400

08004048 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004056:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b03      	cmp	r3, #3
 8004060:	d101      	bne.n	8004066 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e099      	b.n	800419a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004066:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a4e      	ldr	r2, [pc, #312]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800406c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004072:	f7fc fff7 	bl	8001064 <HAL_GetTick>
 8004076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004078:	e008      	b.n	800408c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800407a:	f7fc fff3 	bl	8001064 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e086      	b.n	800419a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800408c:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	493f      	ldr	r1, [pc, #252]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	628b      	str	r3, [r1, #40]	; 0x28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	025b      	lsls	r3, r3, #9
 80040be:	b29b      	uxth	r3, r3
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	061b      	lsls	r3, r3, #24
 80040d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040dc:	4931      	ldr	r1, [pc, #196]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040e2:	4b30      	ldr	r3, [pc, #192]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	492d      	ldr	r1, [pc, #180]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	f023 0220 	bic.w	r2, r3, #32
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4928      	ldr	r1, [pc, #160]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004106:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800410c:	f023 0310 	bic.w	r3, r3, #16
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <RCCEx_PLL2_Config+0x160>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	69d2      	ldr	r2, [r2, #28]
 800411e:	00d2      	lsls	r2, r2, #3
 8004120:	4920      	ldr	r1, [pc, #128]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004126:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800412c:	f043 0310 	orr.w	r3, r3, #16
 8004130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800413e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004144:	e00f      	b.n	8004166 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d106      	bne.n	800415a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004158:	e005      	b.n	8004166 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800416c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004172:	f7fc ff77 	bl	8001064 <HAL_GetTick>
 8004176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004178:	e008      	b.n	800418c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800417a:	f7fc ff73 	bl	8001064 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e006      	b.n	800419a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <RCCEx_PLL2_Config+0x15c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	ffff0007 	.word	0xffff0007

080041ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ba:	4b53      	ldr	r3, [pc, #332]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d101      	bne.n	80041ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e099      	b.n	80042fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4e      	ldr	r2, [pc, #312]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80041d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d6:	f7fc ff45 	bl	8001064 <HAL_GetTick>
 80041da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041de:	f7fc ff41 	bl	8001064 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e086      	b.n	80042fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041f0:	4b45      	ldr	r3, [pc, #276]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041fc:	4b42      	ldr	r3, [pc, #264]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	493f      	ldr	r1, [pc, #252]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	628b      	str	r3, [r1, #40]	; 0x28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	3b01      	subs	r3, #1
 8004216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	025b      	lsls	r3, r3, #9
 8004222:	b29b      	uxth	r3, r3
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	3b01      	subs	r3, #1
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	3b01      	subs	r3, #1
 800423a:	061b      	lsls	r3, r3, #24
 800423c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004240:	4931      	ldr	r1, [pc, #196]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004246:	4b30      	ldr	r3, [pc, #192]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	492d      	ldr	r1, [pc, #180]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	4928      	ldr	r1, [pc, #160]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4a26      	ldr	r2, [pc, #152]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <RCCEx_PLL3_Config+0x160>)
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	69d2      	ldr	r2, [r2, #28]
 8004282:	00d2      	lsls	r2, r2, #3
 8004284:	4920      	ldr	r1, [pc, #128]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042a8:	e00f      	b.n	80042ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042bc:	e005      	b.n	80042ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	4a11      	ldr	r2, [pc, #68]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d6:	f7fc fec5 	bl	8001064 <HAL_GetTick>
 80042da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042dc:	e008      	b.n	80042f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042de:	f7fc fec1 	bl	8001064 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e006      	b.n	80042fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <RCCEx_PLL3_Config+0x15c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	58024400 	.word	0x58024400
 800430c:	ffff0007 	.word	0xffff0007

08004310 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e054      	b.n	80043cc <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7a5b      	ldrb	r3, [r3, #9]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fcd8 	bl	8000ce8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f023 0120 	bic.w	r1, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0204 	orr.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d104      	bne.n	800437c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e027      	b.n	80043cc <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800437c:	f7fc fe72 	bl	8001064 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004382:	e015      	b.n	80043b0 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004384:	f7fc fe6e 	bl	8001064 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d90e      	bls.n	80043b0 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d107      	bne.n	80043b0 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e00d      	b.n	80043cc <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d0e2      	beq.n	8004384 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e049      	b.n	800447a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f841 	bl	8004482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fa00 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e054      	b.n	800455a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d01d      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_TIM_Base_Start_IT+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <HAL_TIM_Base_Start_IT+0xd8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_Base_Start_IT+0xe0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1c      	ldr	r2, [pc, #112]	; (800457c <HAL_TIM_Base_Start_IT+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_TIM_Base_Start_IT+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d115      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_TIM_Base_Start_IT+0xec>)
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b06      	cmp	r3, #6
 8004528:	d015      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d011      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e008      	b.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e000      	b.n	8004558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40010400 	.word	0x40010400
 800457c:	40001800 	.word	0x40001800
 8004580:	40014000 	.word	0x40014000
 8004584:	00010007 	.word	0x00010007

08004588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0202 	mvn.w	r2, #2
 80045b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f905 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8f7 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f908 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0204 	mvn.w	r2, #4
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8db 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8cd 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8de 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0208 	mvn.w	r2, #8
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8b1 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8a3 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8b4 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b10      	cmp	r3, #16
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0210 	mvn.w	r2, #16
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2208      	movs	r2, #8
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f887 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f879 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f88a 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0201 	mvn.w	r2, #1
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc f8fa 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f914 	bl	8004960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d10e      	bne.n	8004766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b80      	cmp	r3, #128	; 0x80
 8004754:	d107      	bne.n	8004766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800475e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f907 	bl	8004974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d10e      	bne.n	8004792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d107      	bne.n	8004792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f838 	bl	8004802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b20      	cmp	r3, #32
 800479e:	d10e      	bne.n	80047be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d107      	bne.n	80047be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f06f 0220 	mvn.w	r2, #32
 80047b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8c7 	bl	800494c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d00f      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3d      	ldr	r2, [pc, #244]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3a      	ldr	r2, [pc, #232]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <TIM_Base_SetConfig+0x114>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d01b      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d017      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a29      	ldr	r2, [pc, #164]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a28      	ldr	r2, [pc, #160]	; (8004940 <TIM_Base_SetConfig+0x128>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <TIM_Base_SetConfig+0x130>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <TIM_Base_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <TIM_Base_SetConfig+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <TIM_Base_SetConfig+0x130>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d103      	bne.n	8004918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	615a      	str	r2, [r3, #20]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800499a:	2b84      	cmp	r3, #132	; 0x84
 800499c:	d005      	beq.n	80049aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800499e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	3303      	adds	r3, #3
 80049a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049bc:	f000 fade 	bl	8004f7c <vTaskStartScheduler>
  
  return osOK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c8:	b089      	sub	sp, #36	; 0x24
 80049ca:	af04      	add	r7, sp, #16
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <osThreadCreate+0x54>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01c      	beq.n	8004a1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685c      	ldr	r4, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681d      	ldr	r5, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691e      	ldr	r6, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ffc8 	bl	8004988 <makeFreeRtosPriority>
 80049f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a02:	9202      	str	r2, [sp, #8]
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	9100      	str	r1, [sp, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f8ed 	bl	8004bee <xTaskCreateStatic>
 8004a14:	4603      	mov	r3, r0
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e01c      	b.n	8004a54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685c      	ldr	r4, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a26:	b29e      	uxth	r6, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ffaa 	bl	8004988 <makeFreeRtosPriority>
 8004a34:	4602      	mov	r2, r0
 8004a36:	f107 030c 	add.w	r3, r7, #12
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	9200      	str	r2, [sp, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	4632      	mov	r2, r6
 8004a42:	4629      	mov	r1, r5
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 f92f 	bl	8004ca8 <xTaskCreate>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d001      	beq.n	8004a54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <osDelay+0x16>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	e000      	b.n	8004a76 <osDelay+0x18>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fa4c 	bl	8004f14 <vTaskDelay>
  
  return osOK;
 8004a7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f103 0208 	add.w	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0208 	add.w	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d103      	bne.n	8004b48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e00c      	b.n	8004b62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e002      	b.n	8004b56 <vListInsert+0x2e>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d2f6      	bcs.n	8004b50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6892      	ldr	r2, [r2, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6852      	ldr	r2, [r2, #4]
 8004bba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d103      	bne.n	8004bce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b08e      	sub	sp, #56	; 0x38
 8004bf2:	af04      	add	r7, sp, #16
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <xTaskCreateStatic+0x46>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61fb      	str	r3, [r7, #28]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c34:	2354      	movs	r3, #84	; 0x54
 8004c36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b54      	cmp	r3, #84	; 0x54
 8004c3c:	d00a      	beq.n	8004c54 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	61bb      	str	r3, [r7, #24]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01e      	beq.n	8004c9a <xTaskCreateStatic+0xac>
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01b      	beq.n	8004c9a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c74:	2300      	movs	r3, #0
 8004c76:	9303      	str	r3, [sp, #12]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	9302      	str	r3, [sp, #8]
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f850 	bl	8004d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c94:	f000 f8d4 	bl	8004e40 <prvAddNewTaskToReadyList>
 8004c98:	e001      	b.n	8004c9e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c9e:	697b      	ldr	r3, [r7, #20]
	}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3728      	adds	r7, #40	; 0x28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af04      	add	r7, sp, #16
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fec3 	bl	8005a48 <pvPortMalloc>
 8004cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cca:	2054      	movs	r0, #84	; 0x54
 8004ccc:	f000 febc 	bl	8005a48 <pvPortMalloc>
 8004cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cde:	e005      	b.n	8004cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ce0:	6978      	ldr	r0, [r7, #20]
 8004ce2:	f000 ff7d 	bl	8005be0 <vPortFree>
 8004ce6:	e001      	b.n	8004cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d017      	beq.n	8004d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9303      	str	r3, [sp, #12]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f80e 	bl	8004d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d16:	69f8      	ldr	r0, [r7, #28]
 8004d18:	f000 f892 	bl	8004e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e002      	b.n	8004d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d28:	69bb      	ldr	r3, [r7, #24]
	}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b088      	sub	sp, #32
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004d4a:	440b      	add	r3, r1
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f023 0307 	bic.w	r3, r3, #7
 8004d58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	617b      	str	r3, [r7, #20]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01f      	beq.n	8004dc0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	e012      	b.n	8004dac <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	7819      	ldrb	r1, [r3, #0]
 8004d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	3334      	adds	r3, #52	; 0x34
 8004d96:	460a      	mov	r2, r1
 8004d98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3301      	adds	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d9e9      	bls.n	8004d86 <prvInitialiseNewTask+0x54>
 8004db2:	e000      	b.n	8004db6 <prvInitialiseNewTask+0x84>
			{
				break;
 8004db4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dbe:	e003      	b.n	8004dc8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d901      	bls.n	8004dd2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dce:	2306      	movs	r3, #6
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	2200      	movs	r2, #0
 8004de2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	3304      	adds	r3, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fe6c 	bl	8004ac6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	3318      	adds	r3, #24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fe67 	bl	8004ac6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	f1c3 0207 	rsb	r2, r3, #7
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	2200      	movs	r2, #0
 8004e12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	69b8      	ldr	r0, [r7, #24]
 8004e22:	f000 fc05 	bl	8005630 <pxPortInitialiseStack>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e48:	f000 fd1c 	bl	8005884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <prvAddNewTaskToReadyList+0xb8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <prvAddNewTaskToReadyList+0xb8>)
 8004e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e56:	4b29      	ldr	r3, [pc, #164]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e5e:	4a27      	ldr	r2, [pc, #156]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <prvAddNewTaskToReadyList+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d110      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e6c:	f000 fabc 	bl	80053e8 <prvInitialiseTaskLists>
 8004e70:	e00d      	b.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e72:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <prvAddNewTaskToReadyList+0xc0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d802      	bhi.n	8004e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <prvAddNewTaskToReadyList+0xc4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <prvAddNewTaskToReadyList+0xc4>)
 8004e96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <prvAddNewTaskToReadyList+0xc8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <prvAddNewTaskToReadyList+0xc8>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <prvAddNewTaskToReadyList+0xcc>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7ff fe0d 	bl	8004ae0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec6:	f000 fd0d 	bl	80058e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <prvAddNewTaskToReadyList+0xc0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00e      	beq.n	8004ef0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvAddNewTaskToReadyList+0xbc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d207      	bcs.n	8004ef0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvAddNewTaskToReadyList+0xd0>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	240004a0 	.word	0x240004a0
 8004efc:	240003a0 	.word	0x240003a0
 8004f00:	240004ac 	.word	0x240004ac
 8004f04:	240004bc 	.word	0x240004bc
 8004f08:	240004a8 	.word	0x240004a8
 8004f0c:	240003a4 	.word	0x240003a4
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <vTaskDelay+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <vTaskDelay+0x30>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60bb      	str	r3, [r7, #8]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f44:	f000 f87a 	bl	800503c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f48:	2100      	movs	r1, #0
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fb0a 	bl	8005564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f50:	f000 f882 	bl	8005058 <xTaskResumeAll>
 8004f54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <vTaskDelay+0x64>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	240004c8 	.word	0x240004c8
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f8a:	463a      	mov	r2, r7
 8004f8c:	1d39      	adds	r1, r7, #4
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb f9a4 	bl	80002e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	9202      	str	r2, [sp, #8]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	460a      	mov	r2, r1
 8004faa:	491e      	ldr	r1, [pc, #120]	; (8005024 <vTaskStartScheduler+0xa8>)
 8004fac:	481e      	ldr	r0, [pc, #120]	; (8005028 <vTaskStartScheduler+0xac>)
 8004fae:	f7ff fe1e 	bl	8004bee <xTaskCreateStatic>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <vTaskStartScheduler+0xb0>)
 8004fb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	; (800502c <vTaskStartScheduler+0xb0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e001      	b.n	8004fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d116      	bne.n	8004ffe <vTaskStartScheduler+0x82>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	613b      	str	r3, [r7, #16]
}
 8004fe2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe4:	4b12      	ldr	r3, [pc, #72]	; (8005030 <vTaskStartScheduler+0xb4>)
 8004fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <vTaskStartScheduler+0xb8>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <vTaskStartScheduler+0xbc>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ff8:	f000 fba2 	bl	8005740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ffc:	e00e      	b.n	800501c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d10a      	bne.n	800501c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <vTaskStartScheduler+0x9e>
}
 800501c:	bf00      	nop
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	08005f30 	.word	0x08005f30
 8005028:	080053b9 	.word	0x080053b9
 800502c:	240004c4 	.word	0x240004c4
 8005030:	240004c0 	.word	0x240004c0
 8005034:	240004ac 	.word	0x240004ac
 8005038:	240004a4 	.word	0x240004a4

0800503c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <vTaskSuspendAll+0x18>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a03      	ldr	r2, [pc, #12]	; (8005054 <vTaskSuspendAll+0x18>)
 8005048:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800504a:	bf00      	nop
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	240004c8 	.word	0x240004c8

08005058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005066:	4b41      	ldr	r3, [pc, #260]	; (800516c <xTaskResumeAll+0x114>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <xTaskResumeAll+0x2c>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005084:	f000 fbfe 	bl	8005884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005088:	4b38      	ldr	r3, [pc, #224]	; (800516c <xTaskResumeAll+0x114>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3b01      	subs	r3, #1
 800508e:	4a37      	ldr	r2, [pc, #220]	; (800516c <xTaskResumeAll+0x114>)
 8005090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005092:	4b36      	ldr	r3, [pc, #216]	; (800516c <xTaskResumeAll+0x114>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d161      	bne.n	800515e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800509a:	4b35      	ldr	r3, [pc, #212]	; (8005170 <xTaskResumeAll+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d05d      	beq.n	800515e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a2:	e02e      	b.n	8005102 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	4b33      	ldr	r3, [pc, #204]	; (8005174 <xTaskResumeAll+0x11c>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3318      	adds	r3, #24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fd72 	bl	8004b9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fd6d 	bl	8004b9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	2201      	movs	r2, #1
 80050c6:	409a      	lsls	r2, r3
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <xTaskResumeAll+0x120>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <xTaskResumeAll+0x120>)
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4a27      	ldr	r2, [pc, #156]	; (800517c <xTaskResumeAll+0x124>)
 80050e0:	441a      	add	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7ff fcf9 	bl	8004ae0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <xTaskResumeAll+0x128>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <xTaskResumeAll+0x12c>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <xTaskResumeAll+0x11c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cc      	bne.n	80050a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005110:	f000 fa08 	bl	8005524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <xTaskResumeAll+0x130>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005120:	f000 f836 	bl	8005190 <xTaskIncrementTick>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <xTaskResumeAll+0x12c>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f1      	bne.n	8005120 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <xTaskResumeAll+0x130>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <xTaskResumeAll+0x12c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800514a:	2301      	movs	r3, #1
 800514c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <xTaskResumeAll+0x134>)
 8005150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800515e:	f000 fbc1 	bl	80058e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005162:	68bb      	ldr	r3, [r7, #8]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	240004c8 	.word	0x240004c8
 8005170:	240004a0 	.word	0x240004a0
 8005174:	24000460 	.word	0x24000460
 8005178:	240004a8 	.word	0x240004a8
 800517c:	240003a4 	.word	0x240003a4
 8005180:	240003a0 	.word	0x240003a0
 8005184:	240004b4 	.word	0x240004b4
 8005188:	240004b0 	.word	0x240004b0
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <xTaskIncrementTick+0x144>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 808e 	bne.w	80052c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <xTaskIncrementTick+0x148>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <xTaskIncrementTick+0x148>)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d120      	bne.n	80051fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051b8:	4b48      	ldr	r3, [pc, #288]	; (80052dc <xTaskIncrementTick+0x14c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	603b      	str	r3, [r7, #0]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xTaskIncrementTick+0x46>
 80051d8:	4b40      	ldr	r3, [pc, #256]	; (80052dc <xTaskIncrementTick+0x14c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <xTaskIncrementTick+0x150>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a3e      	ldr	r2, [pc, #248]	; (80052dc <xTaskIncrementTick+0x14c>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4a3e      	ldr	r2, [pc, #248]	; (80052e0 <xTaskIncrementTick+0x150>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <xTaskIncrementTick+0x154>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a3c      	ldr	r2, [pc, #240]	; (80052e4 <xTaskIncrementTick+0x154>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	f000 f995 	bl	8005524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <xTaskIncrementTick+0x158>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	429a      	cmp	r2, r3
 8005202:	d348      	bcc.n	8005296 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <xTaskIncrementTick+0x14c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <xTaskIncrementTick+0x158>)
 8005210:	f04f 32ff 	mov.w	r2, #4294967295
 8005214:	601a      	str	r2, [r3, #0]
					break;
 8005216:	e03e      	b.n	8005296 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005218:	4b30      	ldr	r3, [pc, #192]	; (80052dc <xTaskIncrementTick+0x14c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d203      	bcs.n	8005238 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <xTaskIncrementTick+0x158>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005236:	e02e      	b.n	8005296 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3304      	adds	r3, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fcac 	bl	8004b9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	3318      	adds	r3, #24
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fca3 	bl	8004b9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	2201      	movs	r2, #1
 800525a:	409a      	lsls	r2, r3
 800525c:	4b23      	ldr	r3, [pc, #140]	; (80052ec <xTaskIncrementTick+0x15c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <xTaskIncrementTick+0x15c>)
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <xTaskIncrementTick+0x160>)
 8005274:	441a      	add	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7ff fc2f 	bl	8004ae0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <xTaskIncrementTick+0x164>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	429a      	cmp	r2, r3
 800528e:	d3b9      	bcc.n	8005204 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005294:	e7b6      	b.n	8005204 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <xTaskIncrementTick+0x164>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4914      	ldr	r1, [pc, #80]	; (80052f0 <xTaskIncrementTick+0x160>)
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d901      	bls.n	80052b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <xTaskIncrementTick+0x168>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e004      	b.n	80052ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <xTaskIncrementTick+0x16c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <xTaskIncrementTick+0x16c>)
 80052c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052ca:	697b      	ldr	r3, [r7, #20]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	240004c8 	.word	0x240004c8
 80052d8:	240004a4 	.word	0x240004a4
 80052dc:	24000458 	.word	0x24000458
 80052e0:	2400045c 	.word	0x2400045c
 80052e4:	240004b8 	.word	0x240004b8
 80052e8:	240004c0 	.word	0x240004c0
 80052ec:	240004a8 	.word	0x240004a8
 80052f0:	240003a4 	.word	0x240003a4
 80052f4:	240003a0 	.word	0x240003a0
 80052f8:	240004b4 	.word	0x240004b4
 80052fc:	240004b0 	.word	0x240004b0

08005300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <vTaskSwitchContext+0xa4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <vTaskSwitchContext+0xa8>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005314:	e03f      	b.n	8005396 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <vTaskSwitchContext+0xa8>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531c:	4b23      	ldr	r3, [pc, #140]	; (80053ac <vTaskSwitchContext+0xac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	f1c3 031f 	rsb	r3, r3, #31
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	491f      	ldr	r1, [pc, #124]	; (80053b0 <vTaskSwitchContext+0xb0>)
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	607b      	str	r3, [r7, #4]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <vTaskSwitchContext+0x5a>
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <vTaskSwitchContext+0xb0>)
 8005368:	4413      	add	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3308      	adds	r3, #8
 800537e:	429a      	cmp	r2, r3
 8005380:	d104      	bne.n	800538c <vTaskSwitchContext+0x8c>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <vTaskSwitchContext+0xb4>)
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	240004c8 	.word	0x240004c8
 80053a8:	240004b4 	.word	0x240004b4
 80053ac:	240004a8 	.word	0x240004a8
 80053b0:	240003a4 	.word	0x240003a4
 80053b4:	240003a0 	.word	0x240003a0

080053b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053c0:	f000 f852 	bl	8005468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <prvIdleTask+0x28>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d9f9      	bls.n	80053c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <prvIdleTask+0x2c>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053dc:	e7f0      	b.n	80053c0 <prvIdleTask+0x8>
 80053de:	bf00      	nop
 80053e0:	240003a4 	.word	0x240003a4
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	e00c      	b.n	800540e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <prvInitialiseTaskLists+0x60>)
 8005400:	4413      	add	r3, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fb3f 	bl	8004a86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3301      	adds	r3, #1
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b06      	cmp	r3, #6
 8005412:	d9ef      	bls.n	80053f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005414:	480d      	ldr	r0, [pc, #52]	; (800544c <prvInitialiseTaskLists+0x64>)
 8005416:	f7ff fb36 	bl	8004a86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800541a:	480d      	ldr	r0, [pc, #52]	; (8005450 <prvInitialiseTaskLists+0x68>)
 800541c:	f7ff fb33 	bl	8004a86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005420:	480c      	ldr	r0, [pc, #48]	; (8005454 <prvInitialiseTaskLists+0x6c>)
 8005422:	f7ff fb30 	bl	8004a86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005426:	480c      	ldr	r0, [pc, #48]	; (8005458 <prvInitialiseTaskLists+0x70>)
 8005428:	f7ff fb2d 	bl	8004a86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800542c:	480b      	ldr	r0, [pc, #44]	; (800545c <prvInitialiseTaskLists+0x74>)
 800542e:	f7ff fb2a 	bl	8004a86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <prvInitialiseTaskLists+0x78>)
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <prvInitialiseTaskLists+0x64>)
 8005436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <prvInitialiseTaskLists+0x7c>)
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <prvInitialiseTaskLists+0x68>)
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	240003a4 	.word	0x240003a4
 800544c:	24000430 	.word	0x24000430
 8005450:	24000444 	.word	0x24000444
 8005454:	24000460 	.word	0x24000460
 8005458:	24000474 	.word	0x24000474
 800545c:	2400048c 	.word	0x2400048c
 8005460:	24000458 	.word	0x24000458
 8005464:	2400045c 	.word	0x2400045c

08005468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800546e:	e019      	b.n	80054a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005470:	f000 fa08 	bl	8005884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <prvCheckTasksWaitingTermination+0x50>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fb8a 	bl	8004b9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 800548e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <prvCheckTasksWaitingTermination+0x58>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <prvCheckTasksWaitingTermination+0x58>)
 8005498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800549a:	f000 fa23 	bl	80058e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f810 	bl	80054c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <prvCheckTasksWaitingTermination+0x58>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e1      	bne.n	8005470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	24000474 	.word	0x24000474
 80054bc:	240004a0 	.word	0x240004a0
 80054c0:	24000488 	.word	0x24000488

080054c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fb80 	bl	8005be0 <vPortFree>
				vPortFree( pxTCB );
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fb7d 	bl	8005be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054e6:	e018      	b.n	800551a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d103      	bne.n	80054fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fb74 	bl	8005be0 <vPortFree>
	}
 80054f8:	e00f      	b.n	800551a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005500:	2b02      	cmp	r3, #2
 8005502:	d00a      	beq.n	800551a <prvDeleteTCB+0x56>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60fb      	str	r3, [r7, #12]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <prvDeleteTCB+0x54>
	}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <prvResetNextTaskUnblockTime+0x38>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <prvResetNextTaskUnblockTime+0x3c>)
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800553c:	e008      	b.n	8005550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <prvResetNextTaskUnblockTime+0x38>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <prvResetNextTaskUnblockTime+0x3c>)
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	24000458 	.word	0x24000458
 8005560:	240004c0 	.word	0x240004c0

08005564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3304      	adds	r3, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fb0d 	bl	8004b9a <uxListRemove>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	2201      	movs	r2, #1
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43da      	mvns	r2, r3
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4013      	ands	r3, r2
 800559a:	4a20      	ldr	r2, [pc, #128]	; (800561c <prvAddCurrentTaskToDelayedList+0xb8>)
 800559c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d10a      	bne.n	80055bc <prvAddCurrentTaskToDelayedList+0x58>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ac:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	481a      	ldr	r0, [pc, #104]	; (8005620 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055b6:	f7ff fa93 	bl	8004ae0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055ba:	e026      	b.n	800560a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4413      	add	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d209      	bcs.n	80055e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7ff faa1 	bl	8004b28 <vListInsert>
}
 80055e6:	e010      	b.n	800560a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7ff fa97 	bl	8004b28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <prvAddCurrentTaskToDelayedList+0xc8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d202      	bcs.n	800560a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005604:	4a09      	ldr	r2, [pc, #36]	; (800562c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	240004a4 	.word	0x240004a4
 8005618:	240003a0 	.word	0x240003a0
 800561c:	240004a8 	.word	0x240004a8
 8005620:	2400048c 	.word	0x2400048c
 8005624:	2400045c 	.word	0x2400045c
 8005628:	24000458 	.word	0x24000458
 800562c:	240004c0 	.word	0x240004c0

08005630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b04      	subs	r3, #4
 8005640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3b04      	subs	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 0201 	bic.w	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3b04      	subs	r3, #4
 800565e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005660:	4a0c      	ldr	r2, [pc, #48]	; (8005694 <pxPortInitialiseStack+0x64>)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3b14      	subs	r3, #20
 800566a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b04      	subs	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f06f 0202 	mvn.w	r2, #2
 800567e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b20      	subs	r3, #32
 8005684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005686:	68fb      	ldr	r3, [r7, #12]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	08005699 	.word	0x08005699

08005698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056a2:	4b12      	ldr	r3, [pc, #72]	; (80056ec <prvTaskExitError+0x54>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d00a      	beq.n	80056c2 <prvTaskExitError+0x2a>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <prvTaskExitError+0x28>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60bb      	str	r3, [r7, #8]
}
 80056d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056d6:	bf00      	nop
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0fc      	beq.n	80056d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	24000010 	.word	0x24000010

080056f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <pxCurrentTCBConst2>)
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	6808      	ldr	r0, [r1, #0]
 80056f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	f380 8809 	msr	PSP, r0
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8811 	msr	BASEPRI, r0
 800570a:	4770      	bx	lr
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst2>:
 8005710:	240003a0 	.word	0x240003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <prvPortStartFirstTask+0x24>)
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	6800      	ldr	r0, [r0, #0]
 800571e:	f380 8808 	msr	MSP, r0
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f380 8814 	msr	CONTROL, r0
 800572a:	b662      	cpsie	i
 800572c:	b661      	cpsie	f
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	df00      	svc	0
 8005738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800573a:	bf00      	nop
 800573c:	e000ed08 	.word	0xe000ed08

08005740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005746:	4b46      	ldr	r3, [pc, #280]	; (8005860 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a46      	ldr	r2, [pc, #280]	; (8005864 <xPortStartScheduler+0x124>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x26>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <xPortStartScheduler+0x120>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	; (8005868 <xPortStartScheduler+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10a      	bne.n	8005786 <xPortStartScheduler+0x46>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005786:	4b39      	ldr	r3, [pc, #228]	; (800586c <xPortStartScheduler+0x12c>)
 8005788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4b31      	ldr	r3, [pc, #196]	; (8005870 <xPortStartScheduler+0x130>)
 80057ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <xPortStartScheduler+0x134>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057b4:	e009      	b.n	80057ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057b6:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <xPortStartScheduler+0x134>)
 80057be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	d0ef      	beq.n	80057b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057d6:	4b27      	ldr	r3, [pc, #156]	; (8005874 <xPortStartScheduler+0x134>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1c3 0307 	rsb	r3, r3, #7
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d00a      	beq.n	80057f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60bb      	str	r3, [r7, #8]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <xPortStartScheduler+0x134>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <xPortStartScheduler+0x134>)
 8005800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xPortStartScheduler+0x134>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <xPortStartScheduler+0x134>)
 800580c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xPortStartScheduler+0x138>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <xPortStartScheduler+0x138>)
 800581c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <xPortStartScheduler+0x138>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a14      	ldr	r2, [pc, #80]	; (8005878 <xPortStartScheduler+0x138>)
 8005828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800582c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800582e:	f000 f8dd 	bl	80059ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <xPortStartScheduler+0x13c>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005838:	f000 f8fc 	bl	8005a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <xPortStartScheduler+0x140>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0f      	ldr	r2, [pc, #60]	; (8005880 <xPortStartScheduler+0x140>)
 8005842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005848:	f7ff ff66 	bl	8005718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800584c:	f7ff fd58 	bl	8005300 <vTaskSwitchContext>
	prvTaskExitError();
 8005850:	f7ff ff22 	bl	8005698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000ed00 	.word	0xe000ed00
 8005864:	410fc271 	.word	0x410fc271
 8005868:	410fc270 	.word	0x410fc270
 800586c:	e000e400 	.word	0xe000e400
 8005870:	240004cc 	.word	0x240004cc
 8005874:	240004d0 	.word	0x240004d0
 8005878:	e000ed20 	.word	0xe000ed20
 800587c:	24000010 	.word	0x24000010
 8005880:	e000ef34 	.word	0xe000ef34

08005884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	607b      	str	r3, [r7, #4]
}
 800589c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <vPortEnterCritical+0x58>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <vPortEnterCritical+0x58>)
 80058a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <vPortEnterCritical+0x58>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10f      	bne.n	80058d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <vPortEnterCritical+0x5c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	603b      	str	r3, [r7, #0]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <vPortEnterCritical+0x4a>
	}
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	24000010 	.word	0x24000010
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <vPortExitCritical+0x50>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <vPortExitCritical+0x24>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	607b      	str	r3, [r7, #4]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005908:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <vPortExitCritical+0x50>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <vPortExitCritical+0x50>)
 8005910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <vPortExitCritical+0x50>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <vPortExitCritical+0x42>
 800591a:	2300      	movs	r3, #0
 800591c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	24000010 	.word	0x24000010
	...

08005940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005940:	f3ef 8009 	mrs	r0, PSP
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <pxCurrentTCBConst>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f01e 0f10 	tst.w	lr, #16
 8005950:	bf08      	it	eq
 8005952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005964:	f380 8811 	msr	BASEPRI, r0
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f7ff fcc6 	bl	8005300 <vTaskSwitchContext>
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f380 8811 	msr	BASEPRI, r0
 800597c:	bc09      	pop	{r0, r3}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005986:	f01e 0f10 	tst.w	lr, #16
 800598a:	bf08      	it	eq
 800598c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005990:	f380 8809 	msr	PSP, r0
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst>:
 80059a0:	240003a0 	.word	0x240003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
}
 80059c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059c2:	f7ff fbe5 	bl	8005190 <xTaskIncrementTick>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <SysTick_Handler+0x40>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	2300      	movs	r3, #0
 80059d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortSetupTimerInterrupt+0x34>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <vPortSetupTimerInterrupt+0x38>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <vPortSetupTimerInterrupt+0x3c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <vPortSetupTimerInterrupt+0x40>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	099b      	lsrs	r3, r3, #6
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <vPortSetupTimerInterrupt+0x44>)
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <vPortSetupTimerInterrupt+0x34>)
 8005a10:	2207      	movs	r2, #7
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	e000e010 	.word	0xe000e010
 8005a24:	e000e018 	.word	0xe000e018
 8005a28:	24000000 	.word	0x24000000
 8005a2c:	10624dd3 	.word	0x10624dd3
 8005a30:	e000e014 	.word	0xe000e014

08005a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a44 <vPortEnableVFP+0x10>
 8005a38:	6801      	ldr	r1, [r0, #0]
 8005a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a3e:	6001      	str	r1, [r0, #0]
 8005a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a42:	bf00      	nop
 8005a44:	e000ed88 	.word	0xe000ed88

08005a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a54:	f7ff faf2 	bl	800503c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a58:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <pvPortMalloc+0x180>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a60:	f000 f920 	bl	8005ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <pvPortMalloc+0x184>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 8093 	bne.w	8005b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01d      	beq.n	8005ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a78:	2208      	movs	r2, #8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d014      	beq.n	8005ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f023 0307 	bic.w	r3, r3, #7
 8005a90:	3308      	adds	r3, #8
 8005a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	617b      	str	r3, [r7, #20]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d06e      	beq.n	8005b98 <pvPortMalloc+0x150>
 8005aba:	4b45      	ldr	r3, [pc, #276]	; (8005bd0 <pvPortMalloc+0x188>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d869      	bhi.n	8005b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ac4:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <pvPortMalloc+0x18c>)
 8005ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ac8:	4b42      	ldr	r3, [pc, #264]	; (8005bd4 <pvPortMalloc+0x18c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ace:	e004      	b.n	8005ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <pvPortMalloc+0xa4>
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f1      	bne.n	8005ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <pvPortMalloc+0x180>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d050      	beq.n	8005b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2208      	movs	r2, #8
 8005afc:	4413      	add	r3, r2
 8005afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	2308      	movs	r3, #8
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d91f      	bls.n	8005b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <pvPortMalloc+0xf8>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	613b      	str	r3, [r7, #16]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b52:	69b8      	ldr	r0, [r7, #24]
 8005b54:	f000 f908 	bl	8005d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <pvPortMalloc+0x190>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d203      	bcs.n	8005b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b72:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <pvPortMalloc+0x190>)
 8005b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <pvPortMalloc+0x184>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <pvPortMalloc+0x194>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a11      	ldr	r2, [pc, #68]	; (8005bdc <pvPortMalloc+0x194>)
 8005b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b98:	f7ff fa5e 	bl	8005058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <pvPortMalloc+0x174>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	60fb      	str	r3, [r7, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <pvPortMalloc+0x172>
	return pvReturn;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	240040dc 	.word	0x240040dc
 8005bcc:	240040f0 	.word	0x240040f0
 8005bd0:	240040e0 	.word	0x240040e0
 8005bd4:	240040d4 	.word	0x240040d4
 8005bd8:	240040e4 	.word	0x240040e4
 8005bdc:	240040e8 	.word	0x240040e8

08005be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d04d      	beq.n	8005c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <vPortFree+0xb8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <vPortFree+0x44>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	60fb      	str	r3, [r7, #12]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <vPortFree+0x62>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	60bb      	str	r3, [r7, #8]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <vPortFree+0xb8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01e      	beq.n	8005c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11a      	bne.n	8005c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <vPortFree+0xb8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c68:	f7ff f9e8 	bl	800503c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <vPortFree+0xbc>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4413      	add	r3, r2
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <vPortFree+0xbc>)
 8005c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f000 f874 	bl	8005d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <vPortFree+0xc0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <vPortFree+0xc0>)
 8005c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c8a:	f7ff f9e5 	bl	8005058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	240040f0 	.word	0x240040f0
 8005c9c:	240040e0 	.word	0x240040e0
 8005ca0:	240040ec 	.word	0x240040ec

08005ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <prvHeapInit+0xac>)
 8005cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3307      	adds	r3, #7
 8005cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <prvHeapInit+0xac>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <prvHeapInit+0xb0>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <prvHeapInit+0xb0>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0307 	bic.w	r3, r3, #7
 8005cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <prvHeapInit+0xb4>)
 8005d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <prvHeapInit+0xb4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <prvHeapInit+0xb4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <prvHeapInit+0xb4>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <prvHeapInit+0xb8>)
 8005d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <prvHeapInit+0xbc>)
 8005d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <prvHeapInit+0xc0>)
 8005d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d42:	601a      	str	r2, [r3, #0]
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	240004d4 	.word	0x240004d4
 8005d54:	240040d4 	.word	0x240040d4
 8005d58:	240040dc 	.word	0x240040dc
 8005d5c:	240040e4 	.word	0x240040e4
 8005d60:	240040e0 	.word	0x240040e0
 8005d64:	240040f0 	.word	0x240040f0

08005d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <prvInsertBlockIntoFreeList+0xac>)
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e002      	b.n	8005d7c <prvInsertBlockIntoFreeList+0x14>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d8f7      	bhi.n	8005d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d108      	bne.n	8005daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	441a      	add	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d118      	bne.n	8005df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d00d      	beq.n	8005de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e008      	b.n	8005df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <prvInsertBlockIntoFreeList+0xb0>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e003      	b.n	8005df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d002      	beq.n	8005e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	240040d4 	.word	0x240040d4
 8005e18:	240040dc 	.word	0x240040dc

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	4d0d      	ldr	r5, [pc, #52]	; (8005e54 <__libc_init_array+0x38>)
 8005e20:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	2600      	movs	r6, #0
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	4d0b      	ldr	r5, [pc, #44]	; (8005e5c <__libc_init_array+0x40>)
 8005e2e:	4c0c      	ldr	r4, [pc, #48]	; (8005e60 <__libc_init_array+0x44>)
 8005e30:	f000 f820 	bl	8005e74 <_init>
 8005e34:	1b64      	subs	r4, r4, r5
 8005e36:	10a4      	asrs	r4, r4, #2
 8005e38:	2600      	movs	r6, #0
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08005f48 	.word	0x08005f48
 8005e58:	08005f48 	.word	0x08005f48
 8005e5c:	08005f48 	.word	0x08005f48
 8005e60:	08005f4c 	.word	0x08005f4c

08005e64 <memset>:
 8005e64:	4402      	add	r2, r0
 8005e66:	4603      	mov	r3, r0
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d100      	bne.n	8005e6e <memset+0xa>
 8005e6c:	4770      	bx	lr
 8005e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e72:	e7f9      	b.n	8005e68 <memset+0x4>

08005e74 <_init>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr

08005e80 <_fini>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr
